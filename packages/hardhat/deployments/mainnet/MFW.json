{
  "address": "0x65725931BF9d37d7e1b1CEb90928271B572829F4",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "AdminApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "AdminRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address payable[]",
          "name": "receivers",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "basisPoints",
          "type": "uint256[]"
        }
      ],
      "name": "DefaultRoyaltiesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "extension",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "ExtensionApproveTransferUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "extension",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ExtensionBlacklisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "extension",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ExtensionRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "extension",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address payable[]",
          "name": "receivers",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "basisPoints",
          "type": "uint256[]"
        }
      ],
      "name": "ExtensionRoyaltiesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "extension",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ExtensionUnregistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "extension",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "permissions",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "MintPermissionsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address payable[]",
          "name": "receivers",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "basisPoints",
          "type": "uint256[]"
        }
      ],
      "name": "RoyaltiesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "approveAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "extension",
          "type": "address"
        }
      ],
      "name": "blacklistExtension",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAdmins",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "admins",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getExtensions",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "extensions",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getFeeBps",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getFeeRecipients",
      "outputs": [
        {
          "internalType": "address payable[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getFees",
      "outputs": [
        {
          "internalType": "address payable[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getRoyalties",
      "outputs": [
        {
          "internalType": "address payable[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "isAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "to",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "mintBaseExisting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "to",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "uris",
          "type": "string[]"
        }
      ],
      "name": "mintBaseNew",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "to",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "mintExtensionExisting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "to",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "uris",
          "type": "string[]"
        }
      ],
      "name": "mintExtensionNew",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "extension",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        }
      ],
      "name": "registerExtension",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "extension",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "baseURIIdentical",
          "type": "bool"
        }
      ],
      "name": "registerExtension",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "revokeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setApproveTransferExtension",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri_",
          "type": "string"
        }
      ],
      "name": "setBaseTokenURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri_",
          "type": "string"
        }
      ],
      "name": "setBaseTokenURIExtension",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri_",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "identical",
          "type": "bool"
        }
      ],
      "name": "setBaseTokenURIExtension",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "extension",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "permissions",
          "type": "address"
        }
      ],
      "name": "setMintPermissions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address payable[]",
          "name": "receivers",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "basisPoints",
          "type": "uint256[]"
        }
      ],
      "name": "setRoyalties",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable[]",
          "name": "receivers",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "basisPoints",
          "type": "uint256[]"
        }
      ],
      "name": "setRoyalties",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "extension",
          "type": "address"
        },
        {
          "internalType": "address payable[]",
          "name": "receivers",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "basisPoints",
          "type": "uint256[]"
        }
      ],
      "name": "setRoyaltiesExtension",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "uri_",
          "type": "string"
        }
      ],
      "name": "setTokenURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "uris",
          "type": "string[]"
        }
      ],
      "name": "setTokenURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "uris",
          "type": "string[]"
        }
      ],
      "name": "setTokenURIExtension",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "uri_",
          "type": "string"
        }
      ],
      "name": "setTokenURIExtension",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "prefix",
          "type": "string"
        }
      ],
      "name": "setTokenURIPrefix",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "prefix",
          "type": "string"
        }
      ],
      "name": "setTokenURIPrefixExtension",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenExtension",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "extension",
          "type": "address"
        }
      ],
      "name": "unregisterExtension",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xce173510ee3eaff0f81031a0d1854ff2facc4386b4758aae9cfd5a5fc6e9e713",
  "receipt": {
    "to": null,
    "from": "0x7019523F9f04C4F4e084c39be1049718d48Ee833",
    "contractAddress": "0x65725931BF9d37d7e1b1CEb90928271B572829F4",
    "transactionIndex": 242,
    "gasUsed": "5367985",
    "logsBloom": "0x
    "blockHash": "0x2d5dd45f5736a9933fee1899a04ccf7a3a20d0c12c2c7337bb475bc74c342e68",
    "transactionHash": "0xce173510ee3eaff0f81031a0d1854ff2facc4386b4758aae9cfd5a5fc6e9e713",
    "logs": [
      {
        "transactionIndex": 242,
        "blockNumber": 14986687,
        "transactionHash": "0xce173510ee3eaff0f81031a0d1854ff2facc4386b4758aae9cfd5a5fc6e9e713",
        "address": "0x65725931BF9d37d7e1b1CEb90928271B572829F4",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007019523f9f04c4f4e084c39be1049718d48ee833"
        ],
        "data": "0x",
        "logIndex": 294,
        "blockHash": "0x2d5dd45f5736a9933fee1899a04ccf7a3a20d0c12c2c7337bb475bc74c342e68"
      }
    ],
    "blockNumber": 14986687,
    "cumulativeGasUsed": "21862342",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "468e43ec6aff73cdf581bf7435925473",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"AdminApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"AdminRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address payable[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"basisPoints\",\"type\":\"uint256[]\"}],\"name\":\"DefaultRoyaltiesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"extension\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"ExtensionApproveTransferUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"extension\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ExtensionBlacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"extension\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ExtensionRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"extension\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address payable[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"basisPoints\",\"type\":\"uint256[]\"}],\"name\":\"ExtensionRoyaltiesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"extension\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ExtensionUnregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"extension\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"permissions\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"MintPermissionsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address payable[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"basisPoints\",\"type\":\"uint256[]\"}],\"name\":\"RoyaltiesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"approveAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"extension\",\"type\":\"address\"}],\"name\":\"blacklistExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmins\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"admins\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExtensions\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"extensions\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getFeeBps\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getFeeRecipients\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getFees\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getRoyalties\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"mintBaseExisting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"uris\",\"type\":\"string[]\"}],\"name\":\"mintBaseNew\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"mintExtensionExisting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"uris\",\"type\":\"string[]\"}],\"name\":\"mintExtensionNew\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"extension\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"registerExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"extension\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"baseURIIdentical\",\"type\":\"bool\"}],\"name\":\"registerExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"revokeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setApproveTransferExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"}],\"name\":\"setBaseTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"}],\"name\":\"setBaseTokenURIExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"identical\",\"type\":\"bool\"}],\"name\":\"setBaseTokenURIExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"extension\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"permissions\",\"type\":\"address\"}],\"name\":\"setMintPermissions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address payable[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"basisPoints\",\"type\":\"uint256[]\"}],\"name\":\"setRoyalties\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"basisPoints\",\"type\":\"uint256[]\"}],\"name\":\"setRoyalties\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"extension\",\"type\":\"address\"},{\"internalType\":\"address payable[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"basisPoints\",\"type\":\"uint256[]\"}],\"name\":\"setRoyaltiesExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"uris\",\"type\":\"string[]\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"uris\",\"type\":\"string[]\"}],\"name\":\"setTokenURIExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"}],\"name\":\"setTokenURIExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"prefix\",\"type\":\"string\"}],\"name\":\"setTokenURIPrefix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"prefix\",\"type\":\"string\"}],\"name\":\"setTokenURIPrefixExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenExtension\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"extension\",\"type\":\"address\"}],\"name\":\"unregisterExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approveAdmin(address)\":{\"details\":\"See {IAdminControl-approveAdmin}.\"},\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"blacklistExtension(address)\":{\"details\":\"See {ICreatorCore-blacklistExtension}.\"},\"burn(address,uint256[],uint256[])\":{\"details\":\"See {IERC1155CreatorCore-burn}.\"},\"getAdmins()\":{\"details\":\"See {IAdminControl-getAdmins}.\"},\"getExtensions()\":{\"details\":\"See {ICreatorCore-getExtensions}.\"},\"getFeeBps(uint256)\":{\"details\":\"{See ICreatorCore-getFeeBps}.\"},\"getFeeRecipients(uint256)\":{\"details\":\"{See ICreatorCore-getFeeRecipients}.\"},\"getFees(uint256)\":{\"details\":\"{See ICreatorCore-getFees}.\"},\"getRoyalties(uint256)\":{\"details\":\"{See ICreatorCore-getRoyalties}.\"},\"isAdmin(address)\":{\"details\":\"See {IAdminControl-isAdmin}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"mintBaseExisting(address[],uint256[],uint256[])\":{\"details\":\"See {IERC1155CreatorCore-mintBaseExisting}.\"},\"mintBaseNew(address[],uint256[],string[])\":{\"details\":\"See {IERC1155CreatorCore-mintBaseNew}.\"},\"mintExtensionExisting(address[],uint256[],uint256[])\":{\"details\":\"See {IERC1155CreatorCore-mintExtensionExisting}.\"},\"mintExtensionNew(address[],uint256[],string[])\":{\"details\":\"See {IERC1155CreatorCore-mintExtensionNew}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"registerExtension(address,string)\":{\"details\":\"See {ICreatorCore-registerExtension}.\"},\"registerExtension(address,string,bool)\":{\"details\":\"See {ICreatorCore-registerExtension}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"revokeAdmin(address)\":{\"details\":\"See {IAdminControl-revokeAdmin}.\"},\"royaltyInfo(uint256,uint256)\":{\"details\":\"{See ICreatorCore-royaltyInfo}.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"setApproveTransferExtension(bool)\":{\"details\":\"See {ICreatorCore-setApproveTransferExtension}.\"},\"setBaseTokenURI(string)\":{\"details\":\"See {ICreatorCore-setBaseTokenURI}.\"},\"setBaseTokenURIExtension(string)\":{\"details\":\"See {ICreatorCore-setBaseTokenURIExtension}.\"},\"setBaseTokenURIExtension(string,bool)\":{\"details\":\"See {ICreatorCore-setBaseTokenURIExtension}.\"},\"setMintPermissions(address,address)\":{\"details\":\"See {ICreatorCore-setMintPermissions}.\"},\"setRoyalties(address[],uint256[])\":{\"details\":\"See {ICreatorCore-setRoyalties}.\"},\"setRoyalties(uint256,address[],uint256[])\":{\"details\":\"See {ICreatorCore-setRoyalties}.\"},\"setRoyaltiesExtension(address,address[],uint256[])\":{\"details\":\"See {ICreatorCore-setRoyaltiesExtension}.\"},\"setTokenURI(uint256,string)\":{\"details\":\"See {ICreatorCore-setTokenURI}.\"},\"setTokenURI(uint256[],string[])\":{\"details\":\"See {ICreatorCore-setTokenURI}.\"},\"setTokenURIExtension(uint256,string)\":{\"details\":\"See {ICreatorCore-setTokenURIExtension}.\"},\"setTokenURIExtension(uint256[],string[])\":{\"details\":\"See {ICreatorCore-setTokenURIExtension}.\"},\"setTokenURIPrefix(string)\":{\"details\":\"See {ICreatorCore-setTokenURIPrefix}.\"},\"setTokenURIPrefixExtension(string)\":{\"details\":\"See {ICreatorCore-setTokenURIPrefixExtension}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"tokenExtension(uint256)\":{\"details\":\"See {IERC1155CreatorCore-tokenExtension}.\"},\"totalSupply(uint256)\":{\"details\":\"Total amount of tokens in with a given id.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unregisterExtension(address)\":{\"details\":\"See {ICreatorCore-unregisterExtension}.\"},\"uri(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"}},\"title\":\"MFW wearables contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MFW.sol\":\"MFW\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@manifoldxyz/creator-core-solidity/contracts/ERC1155Creator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@manifoldxyz/libraries-solidity/contracts/access/AdminControl.sol\\\";\\n\\nimport \\\"./core/ERC1155CreatorCore.sol\\\";\\n\\n/**\\n * @dev ERC1155Creator implementation\\n */\\ncontract ERC1155Creator is AdminControl, ERC1155, ERC1155CreatorCore {\\n\\n    mapping(uint256 => uint256) private _totalSupply;\\n\\n    constructor () ERC1155(\\\"\\\") {}\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC1155, ERC1155CreatorCore, AdminControl) returns (bool) {\\n        return ERC1155CreatorCore.supportsInterface(interfaceId) || ERC1155.supportsInterface(interfaceId) || AdminControl.supportsInterface(interfaceId);\\n    }\\n\\n    function _beforeTokenTransfer(address, address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory) internal virtual override {\\n        _approveTransfer(from, to, ids, amounts);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-registerExtension}.\\n     */\\n    function registerExtension(address extension, string calldata baseURI) external override adminRequired nonBlacklistRequired(extension) {\\n        _registerExtension(extension, baseURI, false);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-registerExtension}.\\n     */\\n    function registerExtension(address extension, string calldata baseURI, bool baseURIIdentical) external override adminRequired nonBlacklistRequired(extension) {\\n        _registerExtension(extension, baseURI, baseURIIdentical);\\n    }\\n\\n\\n    /**\\n     * @dev See {ICreatorCore-unregisterExtension}.\\n     */\\n    function unregisterExtension(address extension) external override adminRequired {\\n        _unregisterExtension(extension);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-blacklistExtension}.\\n     */\\n    function blacklistExtension(address extension) external override adminRequired {\\n        _blacklistExtension(extension);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-setBaseTokenURIExtension}.\\n     */\\n    function setBaseTokenURIExtension(string calldata uri_) external override extensionRequired {\\n        _setBaseTokenURIExtension(uri_, false);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-setBaseTokenURIExtension}.\\n     */\\n    function setBaseTokenURIExtension(string calldata uri_, bool identical) external override extensionRequired {\\n        _setBaseTokenURIExtension(uri_, identical);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-setTokenURIPrefixExtension}.\\n     */\\n    function setTokenURIPrefixExtension(string calldata prefix) external override extensionRequired {\\n        _setTokenURIPrefixExtension(prefix);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-setTokenURIExtension}.\\n     */\\n    function setTokenURIExtension(uint256 tokenId, string calldata uri_) external override extensionRequired {\\n        _setTokenURIExtension(tokenId, uri_);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-setTokenURIExtension}.\\n     */\\n    function setTokenURIExtension(uint256[] memory tokenIds, string[] calldata uris) external override extensionRequired {\\n        require(tokenIds.length == uris.length, \\\"Invalid input\\\");\\n        for (uint i = 0; i < tokenIds.length; i++) {\\n            _setTokenURIExtension(tokenIds[i], uris[i]);            \\n        }\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-setBaseTokenURI}.\\n     */\\n    function setBaseTokenURI(string calldata uri_) external override adminRequired {\\n        _setBaseTokenURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-setTokenURIPrefix}.\\n     */\\n    function setTokenURIPrefix(string calldata prefix) external override adminRequired {\\n        _setTokenURIPrefix(prefix);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-setTokenURI}.\\n     */\\n    function setTokenURI(uint256 tokenId, string calldata uri_) external override adminRequired {\\n        _setTokenURI(tokenId, uri_);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-setTokenURI}.\\n     */\\n    function setTokenURI(uint256[] memory tokenIds, string[] calldata uris) external override adminRequired {\\n        require(tokenIds.length == uris.length, \\\"Invalid input\\\");\\n        for (uint i = 0; i < tokenIds.length; i++) {\\n            _setTokenURI(tokenIds[i], uris[i]);            \\n        }\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-setMintPermissions}.\\n     */\\n    function setMintPermissions(address extension, address permissions) external override adminRequired {\\n        _setMintPermissions(extension, permissions);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155CreatorCore-mintBaseNew}.\\n     */\\n    function mintBaseNew(address[] calldata to, uint256[] calldata amounts, string[] calldata uris) public virtual override nonReentrant adminRequired returns(uint256[] memory) {\\n        return _mintNew(address(this), to, amounts, uris);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155CreatorCore-mintBaseExisting}.\\n     */\\n    function mintBaseExisting(address[] calldata to, uint256[] calldata tokenIds, uint256[] calldata amounts) public virtual override nonReentrant adminRequired {\\n        for (uint i = 0; i < tokenIds.length; i++) {\\n            require(_tokensExtension[tokenIds[i]] == address(this), \\\"A token was created by an extension\\\");\\n        }\\n        _mintExisting(address(this), to, tokenIds, amounts);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155CreatorCore-mintExtensionNew}.\\n     */\\n    function mintExtensionNew(address[] calldata to, uint256[] calldata amounts, string[] calldata uris) public virtual override nonReentrant extensionRequired returns(uint256[] memory tokenIds) {\\n        return _mintNew(msg.sender, to, amounts, uris);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155CreatorCore-mintExtensionExisting}.\\n     */\\n    function mintExtensionExisting(address[] calldata to, uint256[] calldata tokenIds, uint256[] calldata amounts) public virtual override nonReentrant extensionRequired {\\n        for (uint i = 0; i < tokenIds.length; i++) {\\n            require(_tokensExtension[tokenIds[i]] == address(msg.sender), \\\"A token was not created by this extension\\\");\\n        }\\n        _mintExisting(msg.sender, to, tokenIds, amounts);\\n    }\\n\\n    /**\\n     * @dev Mint new tokens\\n     */\\n    function _mintNew(address extension, address[] memory to, uint256[] memory amounts, string[] memory uris) internal returns(uint256[] memory tokenIds) {\\n        if (to.length > 1) {\\n            // Multiple receiver.  Give every receiver the same new token\\n            tokenIds = new uint256[](1);\\n            require(uris.length <= 1 && (amounts.length == 1 || to.length == amounts.length), \\\"Invalid input\\\");\\n        } else {\\n            // Single receiver.  Generating multiple tokens\\n            tokenIds = new uint256[](amounts.length);\\n            require(uris.length == 0 || amounts.length == uris.length, \\\"Invalid input\\\");\\n        }\\n\\n        // Assign tokenIds\\n        for (uint i = 0; i < tokenIds.length; i++) {\\n            _tokenCount++;\\n            tokenIds[i] = _tokenCount;\\n            // Track the extension that minted the token\\n            _tokensExtension[_tokenCount] = extension;\\n        }\\n\\n        if (extension != address(this)) {\\n            _checkMintPermissions(to, tokenIds, amounts);\\n        }\\n\\n        if (to.length == 1 && tokenIds.length == 1) {\\n           // Single mint\\n           _mint(to[0], tokenIds[0], amounts[0], new bytes(0));\\n        } else if (to.length > 1) {\\n            // Multiple receivers.  Receiving the same token\\n            if (amounts.length == 1) {\\n                // Everyone receiving the same amount\\n                for (uint i = 0; i < to.length; i++) {\\n                    _mint(to[i], tokenIds[0], amounts[0], new bytes(0));\\n                }\\n            } else {\\n                // Everyone receiving different amounts\\n                for (uint i = 0; i < to.length; i++) {\\n                    _mint(to[i], tokenIds[0], amounts[i], new bytes(0));\\n                }\\n            }\\n        } else {\\n            _mintBatch(to[0], tokenIds, amounts, new bytes(0));\\n        }\\n\\n        for (uint i = 0; i < tokenIds.length; i++) {\\n            if (i < uris.length && bytes(uris[i]).length > 0) {\\n                _tokenURIs[tokenIds[i]] = uris[i];\\n            }\\n        }\\n        return tokenIds;\\n    }\\n\\n    /**\\n     * @dev Mint existing tokens\\n     */\\n    function _mintExisting(address extension, address[] memory to, uint256[] memory tokenIds, uint256[] memory amounts) internal {\\n        if (extension != address(this)) {\\n            _checkMintPermissions(to, tokenIds, amounts);\\n        }\\n\\n        if (to.length == 1 && tokenIds.length == 1 && amounts.length == 1) {\\n             // Single mint\\n            _mint(to[0], tokenIds[0], amounts[0], new bytes(0));            \\n        } else if (to.length == 1 && tokenIds.length == amounts.length) {\\n            // Batch mint to same receiver\\n            _mintBatch(to[0], tokenIds, amounts, new bytes(0));\\n        } else if (tokenIds.length == 1 && amounts.length == 1) {\\n            // Mint of the same token/token amounts to various receivers\\n            for (uint i = 0; i < to.length; i++) {\\n                _mint(to[i], tokenIds[0], amounts[0], new bytes(0));\\n            }\\n        } else if (tokenIds.length == 1 && to.length == amounts.length) {\\n            // Mint of the same token with different amounts to different receivers\\n            for (uint i = 0; i < to.length; i++) {\\n                _mint(to[i], tokenIds[0], amounts[i], new bytes(0));\\n            }\\n        } else if (to.length == tokenIds.length && to.length == amounts.length) {\\n            // Mint of different tokens and different amounts to different receivers\\n            for (uint i = 0; i < to.length; i++) {\\n                _mint(to[i], tokenIds[i], amounts[i], new bytes(0));\\n            }\\n        } else {\\n            revert(\\\"Invalid input\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC1155CreatorCore-tokenExtension}.\\n     */\\n    function tokenExtension(uint256 tokenId) public view virtual override returns (address) {\\n        return _tokenExtension(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155CreatorCore-burn}.\\n     */\\n    function burn(address account, uint256[] memory tokenIds, uint256[] memory amounts) public virtual override nonReentrant {\\n        require(account == msg.sender || isApprovedForAll(account, msg.sender), \\\"Caller is not owner nor approved\\\");\\n        require(tokenIds.length == amounts.length, \\\"Invalid input\\\");\\n        if (tokenIds.length == 1) {\\n            _burn(account, tokenIds[0], amounts[0]);\\n        } else {\\n            _burnBatch(account, tokenIds, amounts);\\n        }\\n        _postBurn(account, tokenIds, amounts);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-setRoyalties}.\\n     */\\n    function setRoyalties(address payable[] calldata receivers, uint256[] calldata basisPoints) external override adminRequired {\\n        _setRoyaltiesExtension(address(this), receivers, basisPoints);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-setRoyalties}.\\n     */\\n    function setRoyalties(uint256 tokenId, address payable[] calldata receivers, uint256[] calldata basisPoints) external override adminRequired {\\n        _setRoyalties(tokenId, receivers, basisPoints);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-setRoyaltiesExtension}.\\n     */\\n    function setRoyaltiesExtension(address extension, address payable[] calldata receivers, uint256[] calldata basisPoints) external override adminRequired {\\n        _setRoyaltiesExtension(extension, receivers, basisPoints);\\n    }\\n\\n    /**\\n     * @dev {See ICreatorCore-getRoyalties}.\\n     */\\n    function getRoyalties(uint256 tokenId) external view virtual override returns (address payable[] memory, uint256[] memory) {\\n        return _getRoyalties(tokenId);\\n    }\\n\\n    /**\\n     * @dev {See ICreatorCore-getFees}.\\n     */\\n    function getFees(uint256 tokenId) external view virtual override returns (address payable[] memory, uint256[] memory) {\\n        return _getRoyalties(tokenId);\\n    }\\n\\n    /**\\n     * @dev {See ICreatorCore-getFeeRecipients}.\\n     */\\n    function getFeeRecipients(uint256 tokenId) external view virtual override returns (address payable[] memory) {\\n        return _getRoyaltyReceivers(tokenId);\\n    }\\n\\n    /**\\n     * @dev {See ICreatorCore-getFeeBps}.\\n     */\\n    function getFeeBps(uint256 tokenId) external view virtual override returns (uint[] memory) {\\n        return _getRoyaltyBPS(tokenId);\\n    }\\n    \\n    /**\\n     * @dev {See ICreatorCore-royaltyInfo}.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 value) external view virtual override returns (address, uint256) {\\n        return _getRoyaltyInfo(tokenId, value);\\n    } \\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function uri(uint256 tokenId) public view virtual override returns (string memory) {\\n        return _tokenURI(tokenId);\\n    }\\n    \\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 tokenId) external view virtual override returns (uint256) {\\n        return _totalSupply[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_mint}.\\n     */\\n    function _mint(address account, uint256 id, uint256 amount, bytes memory data) internal virtual override {\\n        super._mint(account, id, amount, data);\\n        _totalSupply[id] += amount;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_mintBatch}.\\n     */\\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal virtual override {\\n        super._mintBatch(to, ids, amounts, data);\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            _totalSupply[ids[i]] += amounts[i];\\n        }\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_burn}.\\n     */\\n    function _burn(address account, uint256 id, uint256 amount) internal virtual override {\\n        super._burn(account, id, amount);\\n        _totalSupply[id] -= amount;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_burnBatch}.\\n     */\\n    function _burnBatch(address account, uint256[] memory ids, uint256[] memory amounts) internal virtual override {\\n        super._burnBatch(account, ids, amounts);\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            _totalSupply[ids[i]] -= amounts[i];\\n        }\\n    }\\n}\",\"keccak256\":\"0x51eca44245abaa327e21ded74a8635bfb512bedcbb55e0ceeb266267daed2c27\",\"license\":\"MIT\"},\"@manifoldxyz/creator-core-solidity/contracts/core/CreatorCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\n\\nimport \\\"../extensions/ICreatorExtensionTokenURI.sol\\\";\\n\\nimport \\\"./ICreatorCore.sol\\\";\\n\\n/**\\n * @dev Core creator implementation\\n */\\nabstract contract CreatorCore is ReentrancyGuard, ICreatorCore, ERC165 {\\n    using Strings for uint256;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using AddressUpgradeable for address;\\n\\n    uint256 _tokenCount = 0;\\n\\n    // Track registered extensions data\\n    EnumerableSet.AddressSet internal _extensions;\\n    EnumerableSet.AddressSet internal _blacklistedExtensions;\\n    mapping (address => address) internal _extensionPermissions;\\n    mapping (address => bool) internal _extensionApproveTransfers;\\n    \\n    // For tracking which extension a token was minted by\\n    mapping (uint256 => address) internal _tokensExtension;\\n\\n    // The baseURI for a given extension\\n    mapping (address => string) private _extensionBaseURI;\\n    mapping (address => bool) private _extensionBaseURIIdentical;\\n\\n    // The prefix for any tokens with a uri configured\\n    mapping (address => string) private _extensionURIPrefix;\\n\\n    // Mapping for individual token URIs\\n    mapping (uint256 => string) internal _tokenURIs;\\n\\n    \\n    // Royalty configurations\\n    mapping (address => address payable[]) internal _extensionRoyaltyReceivers;\\n    mapping (address => uint256[]) internal _extensionRoyaltyBPS;\\n    mapping (uint256 => address payable[]) internal _tokenRoyaltyReceivers;\\n    mapping (uint256 => uint256[]) internal _tokenRoyaltyBPS;\\n\\n    /**\\n     * External interface identifiers for royalties\\n     */\\n\\n    /**\\n     *  @dev CreatorCore\\n     *\\n     *  bytes4(keccak256('getRoyalties(uint256)')) == 0xbb3bafd6\\n     *\\n     *  => 0xbb3bafd6 = 0xbb3bafd6\\n     */\\n    bytes4 private constant _INTERFACE_ID_ROYALTIES_CREATORCORE = 0xbb3bafd6;\\n\\n    /**\\n     *  @dev Rarible: RoyaltiesV1\\n     *\\n     *  bytes4(keccak256('getFeeRecipients(uint256)')) == 0xb9c4d9fb\\n     *  bytes4(keccak256('getFeeBps(uint256)')) == 0x0ebd4c7f\\n     *\\n     *  => 0xb9c4d9fb ^ 0x0ebd4c7f = 0xb7799584\\n     */\\n    bytes4 private constant _INTERFACE_ID_ROYALTIES_RARIBLE = 0xb7799584;\\n\\n    /**\\n     *  @dev Foundation\\n     *\\n     *  bytes4(keccak256('getFees(uint256)')) == 0xd5a06d4c\\n     *\\n     *  => 0xd5a06d4c = 0xd5a06d4c\\n     */\\n    bytes4 private constant _INTERFACE_ID_ROYALTIES_FOUNDATION = 0xd5a06d4c;\\n\\n    /**\\n     *  @dev EIP-2981\\n     *\\n     * bytes4(keccak256(\\\"royaltyInfo(uint256,uint256)\\\")) == 0x2a55205a\\n     *\\n     * => 0x2a55205a = 0x2a55205a\\n     */\\n    bytes4 private constant _INTERFACE_ID_ROYALTIES_EIP2981 = 0x2a55205a;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(ICreatorCore).interfaceId || super.supportsInterface(interfaceId)\\n            || interfaceId == _INTERFACE_ID_ROYALTIES_CREATORCORE || interfaceId == _INTERFACE_ID_ROYALTIES_RARIBLE\\n            || interfaceId == _INTERFACE_ID_ROYALTIES_FOUNDATION || interfaceId == _INTERFACE_ID_ROYALTIES_EIP2981;\\n    }\\n\\n    /**\\n     * @dev Only allows registered extensions to call the specified function\\n     */\\n    modifier extensionRequired() {\\n        require(_extensions.contains(msg.sender), \\\"Must be registered extension\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows non-blacklisted extensions\\n     */\\n    modifier nonBlacklistRequired(address extension) {\\n        require(!_blacklistedExtensions.contains(extension), \\\"Extension blacklisted\\\");\\n        _;\\n    }   \\n\\n    /**\\n     * @dev See {ICreatorCore-getExtensions}.\\n     */\\n    function getExtensions() external view override returns (address[] memory extensions) {\\n        extensions = new address[](_extensions.length());\\n        for (uint i = 0; i < _extensions.length(); i++) {\\n            extensions[i] = _extensions.at(i);\\n        }\\n        return extensions;\\n    }\\n\\n    /**\\n     * @dev Register an extension\\n     */\\n    function _registerExtension(address extension, string calldata baseURI, bool baseURIIdentical) internal {\\n        require(extension != address(this), \\\"Creator: Invalid\\\");\\n        require(extension.isContract(), \\\"Creator: Extension must be a contract\\\");\\n        if (!_extensions.contains(extension)) {\\n            _extensionBaseURI[extension] = baseURI;\\n            _extensionBaseURIIdentical[extension] = baseURIIdentical;\\n            emit ExtensionRegistered(extension, msg.sender);\\n            _extensions.add(extension);\\n        }\\n    }\\n\\n    /**\\n     * @dev Unregister an extension\\n     */\\n    function _unregisterExtension(address extension) internal {\\n       if (_extensions.contains(extension)) {\\n           emit ExtensionUnregistered(extension, msg.sender);\\n           _extensions.remove(extension);\\n       }\\n    }\\n\\n    /**\\n     * @dev Blacklist an extension\\n     */\\n    function _blacklistExtension(address extension) internal {\\n       require(extension != address(this), \\\"Cannot blacklist yourself\\\");\\n       if (_extensions.contains(extension)) {\\n           emit ExtensionUnregistered(extension, msg.sender);\\n           _extensions.remove(extension);\\n       }\\n       if (!_blacklistedExtensions.contains(extension)) {\\n           emit ExtensionBlacklisted(extension, msg.sender);\\n           _blacklistedExtensions.add(extension);\\n       }\\n    }\\n\\n    /**\\n     * @dev Set base token uri for an extension\\n     */\\n    function _setBaseTokenURIExtension(string calldata uri, bool identical) internal {\\n        _extensionBaseURI[msg.sender] = uri;\\n        _extensionBaseURIIdentical[msg.sender] = identical;\\n    }\\n\\n    /**\\n     * @dev Set token uri prefix for an extension\\n     */\\n    function _setTokenURIPrefixExtension(string calldata prefix) internal {\\n        _extensionURIPrefix[msg.sender] = prefix;\\n    }\\n\\n    /**\\n     * @dev Set token uri for a token of an extension\\n     */\\n    function _setTokenURIExtension(uint256 tokenId, string calldata uri) internal {\\n        require(_tokensExtension[tokenId] == msg.sender, \\\"Invalid token\\\");\\n        _tokenURIs[tokenId] = uri;\\n    }\\n\\n    /**\\n     * @dev Set base token uri for tokens with no extension\\n     */\\n    function _setBaseTokenURI(string memory uri) internal {\\n        _extensionBaseURI[address(this)] = uri;\\n    }\\n\\n    /**\\n     * @dev Set token uri prefix for tokens with no extension\\n     */\\n    function _setTokenURIPrefix(string calldata prefix) internal {\\n        _extensionURIPrefix[address(this)] = prefix;\\n    }\\n\\n\\n    /**\\n     * @dev Set token uri for a token with no extension\\n     */\\n    function _setTokenURI(uint256 tokenId, string calldata uri) internal {\\n        require(_tokensExtension[tokenId] == address(this), \\\"Invalid token\\\");\\n        _tokenURIs[tokenId] = uri;\\n    }\\n\\n    /**\\n     * @dev Retrieve a token's URI\\n     */\\n    function _tokenURI(uint256 tokenId) internal view returns (string memory) {\\n        address extension = _tokensExtension[tokenId];\\n        require(!_blacklistedExtensions.contains(extension), \\\"Extension blacklisted\\\");\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            if (bytes(_extensionURIPrefix[extension]).length != 0) {\\n                return string(abi.encodePacked(_extensionURIPrefix[extension],_tokenURIs[tokenId]));\\n            }\\n            return _tokenURIs[tokenId];\\n        }\\n\\n        if (ERC165Checker.supportsInterface(extension, type(ICreatorExtensionTokenURI).interfaceId)) {\\n            return ICreatorExtensionTokenURI(extension).tokenURI(address(this), tokenId);\\n        }\\n\\n        if (!_extensionBaseURIIdentical[extension]) {\\n            return string(abi.encodePacked(_extensionBaseURI[extension], tokenId.toString()));\\n        } else {\\n            return _extensionBaseURI[extension];\\n        }\\n    }\\n\\n    /**\\n     * Get token extension\\n     */\\n    function _tokenExtension(uint256 tokenId) internal view returns (address extension) {\\n        extension = _tokensExtension[tokenId];\\n\\n        require(extension != address(this), \\\"No extension for token\\\");\\n        require(!_blacklistedExtensions.contains(extension), \\\"Extension blacklisted\\\");\\n\\n        return extension;\\n    }\\n\\n    /**\\n     * Helper to get royalties for a token\\n     */\\n    function _getRoyalties(uint256 tokenId) view internal returns (address payable[] storage, uint256[] storage) {\\n        return (_getRoyaltyReceivers(tokenId), _getRoyaltyBPS(tokenId));\\n    }\\n\\n    /**\\n     * Helper to get royalty receivers for a token\\n     */\\n    function _getRoyaltyReceivers(uint256 tokenId) view internal returns (address payable[] storage) {\\n        if (_tokenRoyaltyReceivers[tokenId].length > 0) {\\n            return _tokenRoyaltyReceivers[tokenId];\\n        } else if (_extensionRoyaltyReceivers[_tokensExtension[tokenId]].length > 0) {\\n            return _extensionRoyaltyReceivers[_tokensExtension[tokenId]];\\n        }\\n        return _extensionRoyaltyReceivers[address(this)];        \\n    }\\n\\n    /**\\n     * Helper to get royalty basis points for a token\\n     */\\n    function _getRoyaltyBPS(uint256 tokenId) view internal returns (uint256[] storage) {\\n        if (_tokenRoyaltyBPS[tokenId].length > 0) {\\n            return _tokenRoyaltyBPS[tokenId];\\n        } else if (_extensionRoyaltyBPS[_tokensExtension[tokenId]].length > 0) {\\n            return _extensionRoyaltyBPS[_tokensExtension[tokenId]];\\n        }\\n        return _extensionRoyaltyBPS[address(this)];        \\n    }\\n\\n    function _getRoyaltyInfo(uint256 tokenId, uint256 value) view internal returns (address receiver, uint256 amount){\\n        address payable[] storage receivers = _getRoyaltyReceivers(tokenId);\\n        require(receivers.length <= 1, \\\"More than 1 royalty receiver\\\");\\n        \\n        if (receivers.length == 0) {\\n            return (address(this), 0);\\n        }\\n        return (receivers[0], _getRoyaltyBPS(tokenId)[0]*value/10000);\\n    }\\n\\n    /**\\n     * Set royalties for a token\\n     */\\n    function _setRoyalties(uint256 tokenId, address payable[] calldata receivers, uint256[] calldata basisPoints) internal {\\n        require(receivers.length == basisPoints.length, \\\"Invalid input\\\");\\n        uint256 totalBasisPoints;\\n        for (uint i = 0; i < basisPoints.length; i++) {\\n            totalBasisPoints += basisPoints[i];\\n        }\\n        require(totalBasisPoints < 10000, \\\"Invalid total royalties\\\");\\n        _tokenRoyaltyReceivers[tokenId] = receivers;\\n        _tokenRoyaltyBPS[tokenId] = basisPoints;\\n        emit RoyaltiesUpdated(tokenId, receivers, basisPoints);\\n    }\\n\\n    /**\\n     * Set royalties for all tokens of an extension\\n     */\\n    function _setRoyaltiesExtension(address extension, address payable[] calldata receivers, uint256[] calldata basisPoints) internal {\\n        require(receivers.length == basisPoints.length, \\\"Invalid input\\\");\\n        uint256 totalBasisPoints;\\n        for (uint i = 0; i < basisPoints.length; i++) {\\n            totalBasisPoints += basisPoints[i];\\n        }\\n        require(totalBasisPoints < 10000, \\\"Invalid total royalties\\\");\\n        _extensionRoyaltyReceivers[extension] = receivers;\\n        _extensionRoyaltyBPS[extension] = basisPoints;\\n        if (extension == address(this)) {\\n            emit DefaultRoyaltiesUpdated(receivers, basisPoints);\\n        } else {\\n            emit ExtensionRoyaltiesUpdated(extension, receivers, basisPoints);\\n        }\\n    }\\n\\n\\n}\\n\",\"keccak256\":\"0x903427a3f59de8a7a1f67dc47ceb504b31cfbf51e1fdf0d9f6f66f73768cd869\",\"license\":\"MIT\"},\"@manifoldxyz/creator-core-solidity/contracts/core/ERC1155CreatorCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport \\\"../extensions/ERC1155/IERC1155CreatorExtensionApproveTransfer.sol\\\";\\nimport \\\"../extensions/ERC1155/IERC1155CreatorExtensionBurnable.sol\\\";\\nimport \\\"../permissions/ERC1155/IERC1155CreatorMintPermissions.sol\\\";\\nimport \\\"./IERC1155CreatorCore.sol\\\";\\nimport \\\"./CreatorCore.sol\\\";\\n\\n/**\\n * @dev Core ERC1155 creator implementation\\n */\\nabstract contract ERC1155CreatorCore is CreatorCore, IERC1155CreatorCore {\\n\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(CreatorCore, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155CreatorCore).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-setApproveTransferExtension}.\\n     */\\n    function setApproveTransferExtension(bool enabled) external override extensionRequired {\\n        require(!enabled || ERC165Checker.supportsInterface(msg.sender, type(IERC1155CreatorExtensionApproveTransfer).interfaceId), \\\"Extension must implement IERC1155CreatorExtensionApproveTransfer\\\");\\n        if (_extensionApproveTransfers[msg.sender] != enabled) {\\n            _extensionApproveTransfers[msg.sender] = enabled;\\n            emit ExtensionApproveTransferUpdated(msg.sender, enabled);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set mint permissions for an extension\\n     */\\n    function _setMintPermissions(address extension, address permissions) internal {\\n        require(_extensions.contains(extension), \\\"Invalid extension\\\");\\n        require(permissions == address(0x0) || ERC165Checker.supportsInterface(permissions, type(IERC1155CreatorMintPermissions).interfaceId), \\\"Invalid address\\\");\\n        if (_extensionPermissions[extension] != permissions) {\\n            _extensionPermissions[extension] = permissions;\\n            emit MintPermissionsUpdated(extension, permissions, msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * Check if an extension can mint\\n     */\\n    function _checkMintPermissions(address[] memory to, uint256[] memory tokenIds, uint256[] memory amounts) internal {\\n        if (_extensionPermissions[msg.sender] != address(0x0)) {\\n            IERC1155CreatorMintPermissions(_extensionPermissions[msg.sender]).approveMint(msg.sender, to, tokenIds, amounts);\\n        }\\n    }\\n\\n    /**\\n     * Post burn actions\\n     */\\n    function _postBurn(address owner, uint256[] memory tokenIds, uint256[] memory amounts) internal virtual {\\n        require(tokenIds.length > 0, \\\"Invalid input\\\");\\n        address extension = _tokensExtension[tokenIds[0]];\\n        for (uint i = 0; i < tokenIds.length; i++) {\\n            require(_tokensExtension[tokenIds[i]] == extension, \\\"Mismatched token originators\\\");\\n        }\\n        // Callback to originating extension if needed\\n        if (extension != address(this)) {\\n           if (ERC165Checker.supportsInterface(extension, type(IERC1155CreatorExtensionBurnable).interfaceId)) {\\n               IERC1155CreatorExtensionBurnable(extension).onBurn(owner, tokenIds, amounts);\\n           }\\n        }\\n    }\\n\\n    /**\\n     * Approve a transfer\\n     */\\n    function _approveTransfer(address from, address to, uint256[] memory tokenIds, uint256[] memory amounts) internal {\\n        require(tokenIds.length > 0, \\\"Invalid input\\\");\\n        address extension = _tokensExtension[tokenIds[0]];\\n        for (uint i = 0; i < tokenIds.length; i++) {\\n            require(_tokensExtension[tokenIds[i]] == extension, \\\"Mismatched token originators\\\");\\n        }\\n        if (_extensionApproveTransfers[extension]) {\\n            require(IERC1155CreatorExtensionApproveTransfer(extension).approveTransfer(from, to, tokenIds, amounts), \\\"Extension approval failure\\\");\\n        }\\n    }\\n\\n\\n}\",\"keccak256\":\"0xab9ccafe0a4690fdd02a9edb0a4a9677161522147da84639056aa82b5fbc9343\",\"license\":\"MIT\"},\"@manifoldxyz/creator-core-solidity/contracts/core/ICreatorCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Core creator interface\\n */\\ninterface ICreatorCore is IERC165 {\\n\\n    event ExtensionRegistered(address indexed extension, address indexed sender);\\n    event ExtensionUnregistered(address indexed extension, address indexed sender);\\n    event ExtensionBlacklisted(address indexed extension, address indexed sender);\\n    event MintPermissionsUpdated(address indexed extension, address indexed permissions, address indexed sender);\\n    event RoyaltiesUpdated(uint256 indexed tokenId, address payable[] receivers, uint256[] basisPoints);\\n    event DefaultRoyaltiesUpdated(address payable[] receivers, uint256[] basisPoints);\\n    event ExtensionRoyaltiesUpdated(address indexed extension, address payable[] receivers, uint256[] basisPoints);\\n    event ExtensionApproveTransferUpdated(address indexed extension, bool enabled);\\n\\n    /**\\n     * @dev gets address of all extensions\\n     */\\n    function getExtensions() external view returns (address[] memory);\\n\\n    /**\\n     * @dev add an extension.  Can only be called by contract owner or admin.\\n     * extension address must point to a contract implementing ICreatorExtension.\\n     * Returns True if newly added, False if already added.\\n     */\\n    function registerExtension(address extension, string calldata baseURI) external;\\n\\n    /**\\n     * @dev add an extension.  Can only be called by contract owner or admin.\\n     * extension address must point to a contract implementing ICreatorExtension.\\n     * Returns True if newly added, False if already added.\\n     */\\n    function registerExtension(address extension, string calldata baseURI, bool baseURIIdentical) external;\\n\\n    /**\\n     * @dev add an extension.  Can only be called by contract owner or admin.\\n     * Returns True if removed, False if already removed.\\n     */\\n    function unregisterExtension(address extension) external;\\n\\n    /**\\n     * @dev blacklist an extension.  Can only be called by contract owner or admin.\\n     * This function will destroy all ability to reference the metadata of any tokens created\\n     * by the specified extension. It will also unregister the extension if needed.\\n     * Returns True if removed, False if already removed.\\n     */\\n    function blacklistExtension(address extension) external;\\n\\n    /**\\n     * @dev set the baseTokenURI of an extension.  Can only be called by extension.\\n     */\\n    function setBaseTokenURIExtension(string calldata uri) external;\\n\\n    /**\\n     * @dev set the baseTokenURI of an extension.  Can only be called by extension.\\n     * For tokens with no uri configured, tokenURI will return \\\"uri+tokenId\\\"\\n     */\\n    function setBaseTokenURIExtension(string calldata uri, bool identical) external;\\n\\n    /**\\n     * @dev set the common prefix of an extension.  Can only be called by extension.\\n     * If configured, and a token has a uri set, tokenURI will return \\\"prefixURI+tokenURI\\\"\\n     * Useful if you want to use ipfs/arweave\\n     */\\n    function setTokenURIPrefixExtension(string calldata prefix) external;\\n\\n    /**\\n     * @dev set the tokenURI of a token extension.  Can only be called by extension that minted token.\\n     */\\n    function setTokenURIExtension(uint256 tokenId, string calldata uri) external;\\n\\n    /**\\n     * @dev set the tokenURI of a token extension for multiple tokens.  Can only be called by extension that minted token.\\n     */\\n    function setTokenURIExtension(uint256[] memory tokenId, string[] calldata uri) external;\\n\\n    /**\\n     * @dev set the baseTokenURI for tokens with no extension.  Can only be called by owner/admin.\\n     * For tokens with no uri configured, tokenURI will return \\\"uri+tokenId\\\"\\n     */\\n    function setBaseTokenURI(string calldata uri) external;\\n\\n    /**\\n     * @dev set the common prefix for tokens with no extension.  Can only be called by owner/admin.\\n     * If configured, and a token has a uri set, tokenURI will return \\\"prefixURI+tokenURI\\\"\\n     * Useful if you want to use ipfs/arweave\\n     */\\n    function setTokenURIPrefix(string calldata prefix) external;\\n\\n    /**\\n     * @dev set the tokenURI of a token with no extension.  Can only be called by owner/admin.\\n     */\\n    function setTokenURI(uint256 tokenId, string calldata uri) external;\\n\\n    /**\\n     * @dev set the tokenURI of multiple tokens with no extension.  Can only be called by owner/admin.\\n     */\\n    function setTokenURI(uint256[] memory tokenIds, string[] calldata uris) external;\\n\\n    /**\\n     * @dev set a permissions contract for an extension.  Used to control minting.\\n     */\\n    function setMintPermissions(address extension, address permissions) external;\\n\\n    /**\\n     * @dev Configure so transfers of tokens created by the caller (must be extension) gets approval\\n     * from the extension before transferring\\n     */\\n    function setApproveTransferExtension(bool enabled) external;\\n\\n    /**\\n     * @dev get the extension of a given token\\n     */\\n    function tokenExtension(uint256 tokenId) external view returns (address);\\n\\n    /**\\n     * @dev Set default royalties\\n     */\\n    function setRoyalties(address payable[] calldata receivers, uint256[] calldata basisPoints) external;\\n\\n    /**\\n     * @dev Set royalties of a token\\n     */\\n    function setRoyalties(uint256 tokenId, address payable[] calldata receivers, uint256[] calldata basisPoints) external;\\n\\n    /**\\n     * @dev Set royalties of an extension\\n     */\\n    function setRoyaltiesExtension(address extension, address payable[] calldata receivers, uint256[] calldata basisPoints) external;\\n\\n    /**\\n     * @dev Get royalites of a token.  Returns list of receivers and basisPoints\\n     */\\n    function getRoyalties(uint256 tokenId) external view returns (address payable[] memory, uint256[] memory);\\n    \\n    // Royalty support for various other standards\\n    function getFeeRecipients(uint256 tokenId) external view returns (address payable[] memory);\\n    function getFeeBps(uint256 tokenId) external view returns (uint[] memory);\\n    function getFees(uint256 tokenId) external view returns (address payable[] memory, uint256[] memory);\\n    function royaltyInfo(uint256 tokenId, uint256 value) external view returns (address, uint256);\\n\\n}\\n\",\"keccak256\":\"0x2dc54667c7182b70fbfcb5c0775b098d9b6b652cbebdd55d2ef7e4676b84af4b\",\"license\":\"MIT\"},\"@manifoldxyz/creator-core-solidity/contracts/core/IERC1155CreatorCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"./CreatorCore.sol\\\";\\n\\n/**\\n * @dev Core ERC1155 creator interface\\n */\\ninterface IERC1155CreatorCore is ICreatorCore {\\n\\n    /**\\n     * @dev mint a token with no extension. Can only be called by an admin.\\n     *\\n     * @param to       - Can be a single element array (all tokens go to same address) or multi-element array (single token to many recipients)\\n     * @param amounts  - Can be a single element array (all recipients get the same amount) or a multi-element array\\n     * @param uris     - If no elements, all tokens use the default uri.\\n     *                   If any element is an empty string, the corresponding token uses the default uri.\\n     *\\n     *\\n     * Requirements: If to is a multi-element array, then uris must be empty or single element array\\n     *               If to is a multi-element array, then amounts must be a single element array or a multi-element array of the same size\\n     *               If to is a single element array, uris must be empty or the same length as amounts\\n     *\\n     * Examples:\\n     *    mintBaseNew(['0x....1', '0x....2'], [1], [])\\n     *        Mints a single new token, and gives 1 each to '0x....1' and '0x....2'.  Token uses default uri.\\n     *    \\n     *    mintBaseNew(['0x....1', '0x....2'], [1, 2], [])\\n     *        Mints a single new token, and gives 1 to '0x....1' and 2 to '0x....2'.  Token uses default uri.\\n     *    \\n     *    mintBaseNew(['0x....1'], [1, 2], [\\\"\\\", \\\"http://token2.com\\\"])\\n     *        Mints two new tokens to '0x....1'. 1 of the first token, 2 of the second.  1st token uses default uri, second uses \\\"http://token2.com\\\".\\n     *    \\n     * @return Returns list of tokenIds minted\\n     */\\n    function mintBaseNew(address[] calldata to, uint256[] calldata amounts, string[] calldata uris) external returns (uint256[] memory);\\n\\n    /**\\n     * @dev batch mint existing token with no extension. Can only be called by an admin.\\n     *\\n     * @param to        - Can be a single element array (all tokens go to same address) or multi-element array (single token to many recipients)\\n     * @param tokenIds  - Can be a single element array (all recipients get the same token) or a multi-element array\\n     * @param amounts   - Can be a single element array (all recipients get the same amount) or a multi-element array\\n     *\\n     * Requirements: If any of the parameters are multi-element arrays, they need to be the same length as other multi-element arrays\\n     *\\n     * Examples:\\n     *    mintBaseExisting(['0x....1', '0x....2'], [1], [10])\\n     *        Mints 10 of tokenId 1 to each of '0x....1' and '0x....2'.\\n     *    \\n     *    mintBaseExisting(['0x....1', '0x....2'], [1, 2], [10, 20])\\n     *        Mints 10 of tokenId 1 to '0x....1' and 20 of tokenId 2 to '0x....2'.\\n     *    \\n     *    mintBaseExisting(['0x....1'], [1, 2], [10, 20])\\n     *        Mints 10 of tokenId 1 and 20 of tokenId 2 to '0x....1'.\\n     *    \\n     *    mintBaseExisting(['0x....1', '0x....2'], [1], [10, 20])\\n     *        Mints 10 of tokenId 1 to '0x....1' and 20 of tokenId 1 to '0x....2'.\\n     *    \\n     */\\n    function mintBaseExisting(address[] calldata to, uint256[] calldata tokenIds, uint256[] calldata amounts) external;\\n\\n    /**\\n     * @dev mint a token from an extension. Can only be called by a registered extension.\\n     *\\n     * @param to       - Can be a single element array (all tokens go to same address) or multi-element array (single token to many recipients)\\n     * @param amounts  - Can be a single element array (all recipients get the same amount) or a multi-element array\\n     * @param uris     - If no elements, all tokens use the default uri.\\n     *                   If any element is an empty string, the corresponding token uses the default uri.\\n     *\\n     *\\n     * Requirements: If to is a multi-element array, then uris must be empty or single element array\\n     *               If to is a multi-element array, then amounts must be a single element array or a multi-element array of the same size\\n     *               If to is a single element array, uris must be empty or the same length as amounts\\n     *\\n     * Examples:\\n     *    mintExtensionNew(['0x....1', '0x....2'], [1], [])\\n     *        Mints a single new token, and gives 1 each to '0x....1' and '0x....2'.  Token uses default uri.\\n     *    \\n     *    mintExtensionNew(['0x....1', '0x....2'], [1, 2], [])\\n     *        Mints a single new token, and gives 1 to '0x....1' and 2 to '0x....2'.  Token uses default uri.\\n     *    \\n     *    mintExtensionNew(['0x....1'], [1, 2], [\\\"\\\", \\\"http://token2.com\\\"])\\n     *        Mints two new tokens to '0x....1'. 1 of the first token, 2 of the second.  1st token uses default uri, second uses \\\"http://token2.com\\\".\\n     *    \\n     * @return Returns list of tokenIds minted\\n     */\\n    function mintExtensionNew(address[] calldata to, uint256[] calldata amounts, string[] calldata uris) external returns (uint256[] memory);\\n\\n    /**\\n     * @dev batch mint existing token from extension. Can only be called by a registered extension.\\n     *\\n     * @param to        - Can be a single element array (all tokens go to same address) or multi-element array (single token to many recipients)\\n     * @param tokenIds  - Can be a single element array (all recipients get the same token) or a multi-element array\\n     * @param amounts   - Can be a single element array (all recipients get the same amount) or a multi-element array\\n     *\\n     * Requirements: If any of the parameters are multi-element arrays, they need to be the same length as other multi-element arrays\\n     *\\n     * Examples:\\n     *    mintExtensionExisting(['0x....1', '0x....2'], [1], [10])\\n     *        Mints 10 of tokenId 1 to each of '0x....1' and '0x....2'.\\n     *    \\n     *    mintExtensionExisting(['0x....1', '0x....2'], [1, 2], [10, 20])\\n     *        Mints 10 of tokenId 1 to '0x....1' and 20 of tokenId 2 to '0x....2'.\\n     *    \\n     *    mintExtensionExisting(['0x....1'], [1, 2], [10, 20])\\n     *        Mints 10 of tokenId 1 and 20 of tokenId 2 to '0x....1'.\\n     *    \\n     *    mintExtensionExisting(['0x....1', '0x....2'], [1], [10, 20])\\n     *        Mints 10 of tokenId 1 to '0x....1' and 20 of tokenId 1 to '0x....2'.\\n     *    \\n     */\\n    function mintExtensionExisting(address[] calldata to, uint256[] calldata tokenIds, uint256[] calldata amounts) external;\\n\\n    /**\\n     * @dev burn tokens. Can only be called by token owner or approved address.\\n     * On burn, calls back to the registered extension's onBurn method\\n     */\\n    function burn(address account, uint256[] calldata tokenIds, uint256[] calldata amounts) external;\\n\\n    /**\\n     * @dev Total amount of tokens in with a given tokenId.\\n     */\\n    function totalSupply(uint256 tokenId) external view returns (uint256);\\n}\",\"keccak256\":\"0xc91d0050b622fbb41b7516c6a8c75ab6236e6a52feab681d36fb75b8b49fc8c0\",\"license\":\"MIT\"},\"@manifoldxyz/creator-core-solidity/contracts/extensions/ERC1155/IERC1155CreatorExtensionApproveTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * Implement this if you want your extension to approve a transfer\\n */\\ninterface IERC1155CreatorExtensionApproveTransfer is IERC165 {\\n\\n    /**\\n     * @dev Set whether or not the creator contract will check the extension for approval of token transfer\\n     */\\n    function setApproveTransfer(address creator, bool enabled) external;\\n\\n    /**\\n     * @dev Called by creator contract to approve a transfer\\n     */\\n    function approveTransfer(address from, address to, uint256[] calldata tokenIds, uint256[] calldata amounts) external returns (bool);\\n}\",\"keccak256\":\"0xe5c94f605446a92f423df657673c2f110ffa4d767cd16f85a39f5e1997949f1a\",\"license\":\"MIT\"},\"@manifoldxyz/creator-core-solidity/contracts/extensions/ERC1155/IERC1155CreatorExtensionBurnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Your extension is required to implement this interface if it wishes\\n * to receive the onBurn callback whenever a token the extension created is\\n * burned\\n */\\ninterface IERC1155CreatorExtensionBurnable is IERC165 {\\n    /**\\n     * @dev callback handler for burn events\\n     */\\n    function onBurn(address owner, uint256[] calldata tokenIds, uint256[] calldata amounts) external;\\n}\",\"keccak256\":\"0xc274a67fd639f490659aae3c188b7eaef5f819367f61b058e547681c1410e22f\",\"license\":\"MIT\"},\"@manifoldxyz/creator-core-solidity/contracts/extensions/ICreatorExtensionTokenURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Implement this if you want your extension to have overloadable URI's\\n */\\ninterface ICreatorExtensionTokenURI is IERC165 {\\n\\n    /**\\n     * Get the uri for a given creator/tokenId\\n     */\\n    function tokenURI(address creator, uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6c8ca804ee7dea9d78f0dacdd9233b1b75ca2b2fa517f52f0fdf6beb34780a51\",\"license\":\"MIT\"},\"@manifoldxyz/creator-core-solidity/contracts/permissions/ERC1155/IERC1155CreatorMintPermissions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155Creator compliant extension contracts.\\n */\\ninterface IERC1155CreatorMintPermissions is IERC165 {\\n\\n    /**\\n     * @dev get approval to mint\\n     */\\n    function approveMint(address extension, address[] calldata to, uint256[] calldata tokenIds, uint256[] calldata amounts) external;\\n}\",\"keccak256\":\"0x0cf037e3da9a47dab1b0c287d128497f6e28bdbadb4b66f7949a63f8fa144de0\",\"license\":\"MIT\"},\"@manifoldxyz/libraries-solidity/contracts/access/AdminControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./IAdminControl.sol\\\";\\n\\nabstract contract AdminControl is Ownable, IAdminControl, ERC165 {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    // Track registered admins\\n    EnumerableSet.AddressSet private _admins;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IAdminControl).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Only allows approved admins to call the specified function\\n     */\\n    modifier adminRequired() {\\n        require(owner() == msg.sender || _admins.contains(msg.sender), \\\"AdminControl: Must be owner or admin\\\");\\n        _;\\n    }   \\n\\n    /**\\n     * @dev See {IAdminControl-getAdmins}.\\n     */\\n    function getAdmins() external view override returns (address[] memory admins) {\\n        admins = new address[](_admins.length());\\n        for (uint i = 0; i < _admins.length(); i++) {\\n            admins[i] = _admins.at(i);\\n        }\\n        return admins;\\n    }\\n\\n    /**\\n     * @dev See {IAdminControl-approveAdmin}.\\n     */\\n    function approveAdmin(address admin) external override onlyOwner {\\n        if (!_admins.contains(admin)) {\\n            emit AdminApproved(admin, msg.sender);\\n            _admins.add(admin);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IAdminControl-revokeAdmin}.\\n     */\\n    function revokeAdmin(address admin) external override onlyOwner {\\n        if (_admins.contains(admin)) {\\n            emit AdminRevoked(admin, msg.sender);\\n            _admins.remove(admin);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IAdminControl-isAdmin}.\\n     */\\n    function isAdmin(address admin) public override view returns (bool) {\\n        return (owner() == admin || _admins.contains(admin));\\n    }\\n\\n}\",\"keccak256\":\"0xaed5e7784e33745ab1b16f1d87b22084a8b25d531c1dcb8dc41fc2a89e2617da\",\"license\":\"MIT\"},\"@manifoldxyz/libraries-solidity/contracts/access/IAdminControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for admin control\\n */\\ninterface IAdminControl is IERC165 {\\n\\n    event AdminApproved(address indexed account, address indexed sender);\\n    event AdminRevoked(address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev gets address of all admins\\n     */\\n    function getAdmins() external view returns (address[] memory);\\n\\n    /**\\n     * @dev add an admin.  Can only be called by contract owner.\\n     */\\n    function approveAdmin(address admin) external;\\n\\n    /**\\n     * @dev remove an admin.  Can only be called by contract owner.\\n     */\\n    function revokeAdmin(address admin) external;\\n\\n    /**\\n     * @dev checks whether or not given address is an admin\\n     * Returns True if they are\\n     */\\n    function isAdmin(address admin) external view returns (bool);\\n\\n}\",\"keccak256\":\"0x7cc2e4e7d9052532f445e62ec1fa2f05cc0f5d1d8ee1fea913b43a132277bf2f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(_msgSender() != operator, \\\"ERC1155: setting approval status for self\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][account] += amount;\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `account`\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 accountBalance = _balances[id][account];\\n        require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][account] = accountBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 accountBalance = _balances[id][account];\\n            require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][account] = accountBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0xbda715785876dbfc675396b89ac45bb9f4cceb968133a8258924d163a700f0e4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfce1eb6398eae0e2b50251140866a70a3106193f101972c878bba1dbf44929ec\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7de6e64d4a8075e803a972cc77c4c91463e0c3777e4110eacfb5d4a71759b2fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6ba0564f6970414d1166ee83127b834bbe7dbf699241a3005eb7ae64a2211975\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface,\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            _supportsERC165Interface(account, type(IERC165).interfaceId) &&\\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in _interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n        (bool success, bytes memory result) = account.staticcall{gas: 30000}(encodedParams);\\n        if (result.length < 32) return false;\\n        return success && abi.decode(result, (bool));\\n    }\\n}\\n\",\"keccak256\":\"0xaf583f9537cf446d08c33909e52313d349a831f6b88f20361b76474e40b4c36f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"contracts/MFW.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@manifoldxyz/creator-core-solidity/contracts/ERC1155Creator.sol\\\";\\n\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n// @@@@@@                               @@@@@@\\n// @@@@@@                               @@@@@@\\n// @@@@@@                               @@@@@@\\n// @@@@@@      @@@@@@@     @@@@@@@      @@@@@@\\n// @@@@@@      @@@@@@@     @@@@@@@      @@@@@@\\n// @@@@@@                               @@@@@@\\n// @@@@@@                               @@@@@@\\n// @@@@@@                               @@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n// @@@@@@                               @@@@@@\\n// @@@@@@                               @@@@@@\\n// @@@@@@                               @@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n\\n/// @title MFW wearables contract\\ncontract MFW is ERC1155Creator {\\n    constructor() ERC1155Creator() {}\\n\\n    function name() external pure returns (string memory _name) {\\n        return \\\"MetaFactory Wearables\\\";\\n    }\\n\\n    function symbol() external pure returns (string memory _symbol) {\\n        return \\\"MFW\\\";\\n    }\\n}\",\"keccak256\":\"0xd07e85a57a12f14a1ea2917c17baf849318527ce792f310620d5a271f2f53c6b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260006007553480156200001657600080fd5b50604080516020810190915260008152620000313362000047565b60018055620000408162000097565b5062000193565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8051620000ac906006906020840190620000b0565b5050565b828054620000be9062000156565b90600052602060002090601f016020900481019282620000e257600085556200012d565b82601f10620000fd57805160ff19168380011785556200012d565b828001600101855582156200012d579182015b828111156200012d57825182559160200191906001019062000110565b506200013b9291506200013f565b5090565b5b808211156200013b576000815560010162000140565b600181811c908216806200016b57607f821691505b602082108114156200018d57634e487b7160e01b600052602260045260246000fd5b50919050565b615f1e80620001a36000396000f3fe608060405234801561001057600080fd5b506004361061029f5760003560e01c80636d73e66911610167578063b9c4d9fb116100ce578063e92a89f611610087578063e92a89f614610647578063e985e9c51461065a578063f0cdc4991461066d578063f242432a14610680578063f2fde38b14610693578063feeb5a9a146106a657600080fd5b8063b9c4d9fb146105cd578063bb3bafd6146105e0578063bd85b03914610601578063ce8aee9d14610621578063d5a06d4c146105e0578063e6c884dc1461063457600080fd5b806395d89b411161012057806395d89b411461054f57806399e0dd7c1461056e578063a22cb46514610581578063aafb2d4414610594578063ac0c8cfa146105a7578063b0fe87c9146105ba57600080fd5b80636d73e669146104fe578063715018a61461051157806382dcc0c81461051957806383b7db631461052c5780638c6e8472146105345780638da5cb5b1461054757600080fd5b80632eb2c2d61161020b5780633e6134b8116101c45780633e6134b81461048c5780633f0f37f61461049f5780634e1273f4146104b257806361e5bc6b146104c557806366d1e9d0146104d8578063695c96e6146104eb57600080fd5b80632eb2c2d61461041857806330176e131461042b5780633071a0f91461043e57806331ae450b14610451578063332dd1ae146104665780633db0f8ab1461047957600080fd5b8063162094c41161025d578063162094c41461036f57806320e4afe214610382578063239be3171461039557806324d7806c146103c05780632a55205a146103d35780632d3456701461040557600080fd5b8062fdd58e146102a457806301ffc9a7146102ca57806302e7afb7146102ed57806306fdde03146103025780630e89341c1461033c5780630ebd4c7f1461034f575b600080fd5b6102b76102b2366004614ee1565b6106b9565b6040519081526020015b60405180910390f35b6102dd6102d83660046151db565b610755565b60405190151581526020016102c1565b6103006102fb366004614ba9565b61077e565b005b6040805180820190915260158152744d657461466163746f7279205765617261626c657360581b60208201525b6040516102c19190615789565b61032f61034a366004615319565b6107ca565b61036261035d366004615319565b6107d5565b6040516102c19190615763565b61030061037d366004615365565b610836565b610300610390366004615331565b610886565b6103a86103a3366004615319565b6108da565b6040516001600160a01b0390911681526020016102c1565b6102dd6103ce366004614ba9565b6108e5565b6103e66103e1366004615395565b610914565b604080516001600160a01b0390931683526020830191909152016102c1565b610300610413366004614ba9565b61092d565b610300610426366004614bfd565b6109b1565b610300610439366004615213565b610a41565b61030061044c366004614e2a565b610ac0565b610459610b3c565b6040516102c191906156a3565b6103006104743660046150e3565b610c06565b610300610487366004614d8b565b610c53565b61030061049a366004615213565b610d8d565b6103006104ad366004614e7c565b610dc0565b6103626104c0366004615017565b610e35565b6103006104d336600461514b565b610f96565b6103006104e6366004615213565b61105d565b6103006104f9366004614fa1565b61108e565b61030061050c366004614ba9565b611260565b6103006112df565b610300610527366004615252565b61131a565b61045961134c565b610362610542366004614f0c565b611412565b6103a86114ec565b6040805180820190915260038152624d465760e81b602082015261032f565b61030061057c366004615213565b6114fb565b61030061058f366004614dfd565b611545565b6103006105a236600461514b565b61161c565b6103006105b53660046151a3565b6116fc565b6103006105c8366004614d0c565b611822565b6104596105db366004615319565b61186f565b6105f36105ee366004615319565b6118d9565b6040516102c1929190615735565b6102b761060f366004615319565b60009081526017602052604090205490565b61030061062f366004614ba9565b611998565b610300610642366004614fa1565b6119e1565b610300610655366004615365565b611b94565b6102dd610668366004614bc5565b611bc6565b61030061067b366004614bc5565b611bf4565b61030061068e366004614ca6565b611c3e565b6103006106a1366004614ba9565b611cc5565b6103626106b4366004614f0c565b611d62565b60006001600160a01b03831661072a5760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b5060008181526004602090815260408083206001600160a01b03861684529091529020545b92915050565b600061076082611e41565b8061076f575061076f82611e66565b8061074f575061074f82611ea1565b336107876114ec565b6001600160a01b031614806107a257506107a2600233611ed6565b6107be5760405162461bcd60e51b815260040161072190615a4b565b6107c781611efb565b50565b606061074f82611ff3565b60606107e08261227c565b80548060200260200160405190810160405280929190818152602001828054801561082a57602002820191906000526020600020905b815481526020019060010190808311610816575b50505050509050919050565b3361083f6114ec565b6001600160a01b0316148061085a575061085a600233611ed6565b6108765760405162461bcd60e51b815260040161072190615a4b565b610881838383612308565b505050565b3361088f6114ec565b6001600160a01b031614806108aa57506108aa600233611ed6565b6108c65760405162461bcd60e51b815260040161072190615a4b565b6108d38585858585612357565b5050505050565b600061074f82612464565b6000816001600160a01b03166108f96114ec565b6001600160a01b0316148061074f575061074f600283611ed6565b60008061092184846124f2565b915091505b9250929050565b336109366114ec565b6001600160a01b03161461095c5760405162461bcd60e51b8152600401610721906159be565b610967600282611ed6565b156107c75760405133906001600160a01b038316907f7c0c3c84c67c85fcac635147348bfe374c24a1a93d0366d1cfe9d8853cbf89d590600090a36109ad6002826125f6565b5050565b6001600160a01b0385163314806109cd57506109cd8533611bc6565b610a345760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b6064820152608401610721565b6108d3858585858561260b565b33610a4a6114ec565b6001600160a01b03161480610a655750610a65600233611ed6565b610a815760405162461bcd60e51b815260040161072190615a4b565b6109ad82828080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506127c292505050565b33610ac96114ec565b6001600160a01b03161480610ae45750610ae4600233611ed6565b610b005760405162461bcd60e51b815260040161072190615a4b565b82610b0c600a82611ed6565b15610b295760405162461bcd60e51b815260040161072190615828565b610b3684848460006127e2565b50505050565b6060610b48600261291d565b6001600160401b03811115610b6d57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610b96578160200160208202803683370190505b50905060005b610ba6600261291d565b811015610c0257610bb8600282612927565b828281518110610bd857634e487b7160e01b600052603260045260246000fd5b6001600160a01b039092166020928302919091019091015280610bfa81615d5d565b915050610b9c565b5090565b33610c0f6114ec565b6001600160a01b03161480610c2a5750610c2a600233611ed6565b610c465760405162461bcd60e51b815260040161072190615a4b565b610b363085858585612933565b60026001541415610c765760405162461bcd60e51b815260040161072190615b18565b60026001556001600160a01b038316331480610c975750610c978333611bc6565b610ce35760405162461bcd60e51b815260206004820181905260248201527f43616c6c6572206973206e6f74206f776e6572206e6f7220617070726f7665646044820152606401610721565b8051825114610d045760405162461bcd60e51b8152600401610721906159f3565b815160011415610d6e57610d698383600081518110610d3357634e487b7160e01b600052603260045260246000fd5b602002602001015183600081518110610d5c57634e487b7160e01b600052603260045260246000fd5b6020026020010151612aa0565b610d79565b610d79838383612ad3565b610d84838383612b71565b50506001805550565b610d98600833611ed6565b610db45760405162461bcd60e51b81526004016107219061587e565b6109ad82826000612d01565b33610dc96114ec565b6001600160a01b03161480610de45750610de4600233611ed6565b610e005760405162461bcd60e51b815260040161072190615a4b565b83610e0c600a82611ed6565b15610e295760405162461bcd60e51b815260040161072190615828565b6108d3858585856127e2565b60608151835114610e9a5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610721565b600083516001600160401b03811115610ec357634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610eec578160200160208202803683370190505b50905060005b8451811015610f8e57610f53858281518110610f1e57634e487b7160e01b600052603260045260246000fd5b6020026020010151858381518110610f4657634e487b7160e01b600052603260045260246000fd5b60200260200101516106b9565b828281518110610f7357634e487b7160e01b600052603260045260246000fd5b6020908102919091010152610f8781615d5d565b9050610ef2565b509392505050565b610fa1600833611ed6565b610fbd5760405162461bcd60e51b81526004016107219061587e565b82518114610fdd5760405162461bcd60e51b8152600401610721906159f3565b60005b8351811015610b365761104b84828151811061100c57634e487b7160e01b600052603260045260246000fd5b602002602001015184848481811061103457634e487b7160e01b600052603260045260246000fd5b90506020028101906110469190615b4f565b612d3e565b8061105581615d5d565b915050610fe0565b611068600833611ed6565b6110845760405162461bcd60e51b81526004016107219061587e565b6109ad8282612d74565b600260015414156110b15760405162461bcd60e51b815260040161072190615b18565b6002600155336110bf6114ec565b6001600160a01b031614806110da57506110da600233611ed6565b6110f65760405162461bcd60e51b815260040161072190615a4b565b60005b838110156111b45730600e600087878581811061112657634e487b7160e01b600052603260045260246000fd5b60209081029290920135835250810191909152604001600020546001600160a01b0316146111a25760405162461bcd60e51b815260206004820152602360248201527f4120746f6b656e20776173206372656174656420627920616e20657874656e7360448201526234b7b760e91b6064820152608401610721565b806111ac81615d5d565b9150506110f9565b506112543087878080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808b0282810182019093528a82529093508a92508991829185019084908082843760009201919091525050604080516020808a02828101820190935289825290935089925088918291850190849080828437600092019190915250612d8e92505050565b50506001805550505050565b336112696114ec565b6001600160a01b03161461128f5760405162461bcd60e51b8152600401610721906159be565b61129a600282611ed6565b6107c75760405133906001600160a01b038316907f7e1a1a08d52e4ba0e21554733d66165fd5151f99460116223d9e3a608eec5cb190600090a36109ad600282613134565b336112e86114ec565b6001600160a01b03161461130e5760405162461bcd60e51b8152600401610721906159be565b6113186000613149565b565b611325600833611ed6565b6113415760405162461bcd60e51b81526004016107219061587e565b610881838383612d01565b6060611358600861291d565b6001600160401b0381111561137d57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156113a6578160200160208202803683370190505b50905060005b6113b6600861291d565b811015610c02576113c8600882612927565b8282815181106113e857634e487b7160e01b600052603260045260246000fd5b6001600160a01b03909216602092830291909101909101528061140a81615d5d565b9150506113ac565b6060600260015414156114375760405162461bcd60e51b815260040161072190615b18565b6002600155611447600833611ed6565b6114635760405162461bcd60e51b81526004016107219061587e565b6114dd3388888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808c0282810182019093528b82529093508b92508a9182918501908490808284376000920191909152506114d89250889150899050615c3f565b613199565b60018055979650505050505050565b6000546001600160a01b031690565b336115046114ec565b6001600160a01b0316148061151f575061151f600233611ed6565b61153b5760405162461bcd60e51b815260040161072190615a4b565b6109ad8282613630565b336001600160a01b03831614156115b05760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610721565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b336116256114ec565b6001600160a01b031614806116405750611640600233611ed6565b61165c5760405162461bcd60e51b815260040161072190615a4b565b8251811461167c5760405162461bcd60e51b8152600401610721906159f3565b60005b8351811015610b36576116ea8482815181106116ab57634e487b7160e01b600052603260045260246000fd5b60200260200101518484848181106116d357634e487b7160e01b600052603260045260246000fd5b90506020028101906116e59190615b4f565b612308565b806116f481615d5d565b91505061167f565b611707600833611ed6565b6117235760405162461bcd60e51b81526004016107219061587e565b80158061173c575061173c336324ea02c560e21b61364a565b6117b0576040805162461bcd60e51b81526020600482015260248101919091527f457874656e73696f6e206d75737420696d706c656d656e74204945524331313560448201527f3543726561746f72457874656e73696f6e417070726f76655472616e736665726064820152608401610721565b336000908152600d602052604090205460ff161515811515146107c757336000818152600d6020908152604091829020805460ff191685151590811790915591519182527f072a7592283e2c2d1d56d21517ff6013325e0f55483f4828373ff4d98b0a1a36910160405180910390a250565b3361182b6114ec565b6001600160a01b031614806118465750611846600233611ed6565b6118625760405162461bcd60e51b815260040161072190615a4b565b6108d38585858585612933565b606061187a82613666565b80548060200260200160405190810160405280929190818152602001828054801561082a57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116118b05750505050509050919050565b6060806118e5836136f2565b81546040805160208084028201810190925282815291849183018282801561193657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611918575b505050505091508080548060200260200160405190810160405280929190818152602001828054801561198857602002820191906000526020600020905b815481526020019060010190808311611974575b5050505050905091509150915091565b336119a16114ec565b6001600160a01b031614806119bc57506119bc600233611ed6565b6119d85760405162461bcd60e51b815260040161072190615a4b565b6107c781613710565b60026001541415611a045760405162461bcd60e51b815260040161072190615b18565b6002600155611a14600833611ed6565b611a305760405162461bcd60e51b81526004016107219061587e565b60005b83811015611af45733600e6000878785818110611a6057634e487b7160e01b600052603260045260246000fd5b60209081029290920135835250810191909152604001600020546001600160a01b031614611ae25760405162461bcd60e51b815260206004820152602960248201527f4120746f6b656e20776173206e6f74206372656174656420627920746869732060448201526832bc3a32b739b4b7b760b91b6064820152608401610721565b80611aec81615d5d565b915050611a33565b506112543387878080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808b0282810182019093528a82529093508a92508991829185019084908082843760009201919091525050604080516020808a02828101820190935289825290935089925088918291850190849080828437600092019190915250612d8e92505050565b611b9f600833611ed6565b611bbb5760405162461bcd60e51b81526004016107219061587e565b610881838383612d3e565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b33611bfd6114ec565b6001600160a01b03161480611c185750611c18600233611ed6565b611c345760405162461bcd60e51b815260040161072190615a4b565b6109ad8282613761565b6001600160a01b038516331480611c5a5750611c5a8533611bc6565b611cb85760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b6064820152608401610721565b6108d3858585858561388a565b33611cce6114ec565b6001600160a01b031614611cf45760405162461bcd60e51b8152600401610721906159be565b6001600160a01b038116611d595760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610721565b6107c781613149565b606060026001541415611d875760405162461bcd60e51b815260040161072190615b18565b600260015533611d956114ec565b6001600160a01b03161480611db05750611db0600233611ed6565b611dcc5760405162461bcd60e51b815260040161072190615a4b565b6114dd3088888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808c0282810182019093528b82529093508b92508a9182918501908490808284376000920191909152506114d89250889150899050615c3f565b60006001600160e01b031982166301f4921160e61b148061074f575061074f826139a8565b60006001600160e01b03198216636cdb3d1360e11b148061076f57506001600160e01b031982166303a24d0760e21b148061074f575061074f825b60006001600160e01b03198216632a9f3abf60e11b148061074f57506301ffc9a760e01b6001600160e01b031983161461074f565b6001600160a01b038116600090815260018301602052604081205415155b9392505050565b6001600160a01b038116301415611f505760405162461bcd60e51b815260206004820152601960248201527821b0b73737ba10313630b1b5b634b9ba103cb7bab939b2b63360391b6044820152606401610721565b611f5b600882611ed6565b15611fa35760405133906001600160a01b038316907fd19cf84cf0fec6bec9ddfa29c63adf83a55707c712f32c8285d6180a7890147990600090a3611fa16008826125f6565b505b611fae600a82611ed6565b6107c75760405133906001600160a01b038316907f05ac7bc5a606cd92a63365f9fda244499b9add0526b22d99937b6bd88181059c90600090a36109ad600a82613134565b6000818152600e60205260409020546060906001600160a01b0316612019600a82611ed6565b156120365760405162461bcd60e51b815260040161072190615828565b6000838152601260205260409020805461204f90615cfc565b159050612169576001600160a01b0381166000908152601160205260409020805461207990615cfc565b1590506120ca576001600160a01b0381166000908152601160209081526040808320868452601283529281902090516120b393920161552d565b604051602081830303815290604052915050919050565b600083815260126020526040902080546120e390615cfc565b80601f016020809104026020016040519081016040528092919081815260200182805461210f90615cfc565b801561215c5780601f106121315761010080835404028352916020019161215c565b820191906000526020600020905b81548152906001019060200180831161213f57829003601f168201915b5050505050915050919050565b61217a8163e9dc637560e01b61364a565b156122015760405163e9dc637560e01b8152306004820152602481018490526001600160a01b0382169063e9dc63759060440160006040518083038186803b1580156121c557600080fd5b505afa1580156121d9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611ef491908101906152a6565b6001600160a01b03811660009081526010602052604090205460ff16612253576001600160a01b0381166000908152600f6020526040902061224284613a3e565b6040516020016120b3929190615508565b6001600160a01b0381166000908152600f6020526040902080546120e390615cfc565b50919050565b600081815260166020526040812054156122a25750600090815260166020526040902090565b6000828152600e60209081526040808320546001600160a01b031683526014909152902054156122f457506000908152600e60209081526040808320546001600160a01b031683526014909152902090565b505030600090815260146020526040902090565b6000838152600e60205260409020546001600160a01b0316301461233e5760405162461bcd60e51b815260040161072190615857565b6000838152601260205260409020610b369083836148b9565b8281146123765760405162461bcd60e51b8152600401610721906159f3565b6000805b828110156123c8578383828181106123a257634e487b7160e01b600052603260045260246000fd5b90506020020135826123b49190615bdd565b9150806123c081615d5d565b91505061237a565b5061271081106123ea5760405162461bcd60e51b815260040161072190615a1a565b6000868152601560205260409020612403908686614939565b50600086815260166020526040902061241d90848461498c565b50857fabb46fe0761d77584bde75697647804ffd8113abd4d8d06bc664150395eccdee8686868660405161245494939291906156b6565b60405180910390a2505050505050565b6000818152600e60205260409020546001600160a01b0316308114156124c55760405162461bcd60e51b815260206004820152601660248201527527379032bc3a32b739b4b7b7103337b9103a37b5b2b760511b6044820152606401610721565b6124d0600a82611ed6565b156124ed5760405162461bcd60e51b815260040161072190615828565b919050565b600080600061250085613666565b8054909150600110156125555760405162461bcd60e51b815260206004820152601c60248201527f4d6f7265207468616e203120726f79616c7479207265636569766572000000006044820152606401610721565b8054612568573060009250925050610926565b8060008154811061258957634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0316612710856125ab8861227c565b6000815481106125cb57634e487b7160e01b600052603260045260246000fd5b90600052602060002001546125e09190615c09565b6125ea9190615bf5565b92509250509250929050565b6000611ef4836001600160a01b038416613b5f565b815183511461262c5760405162461bcd60e51b815260040161072190615a8f565b6001600160a01b0384166126525760405162461bcd60e51b8152600401610721906158b5565b33612661818787878787613c7c565b60005b845181101561276657600085828151811061268f57634e487b7160e01b600052603260045260246000fd5b6020026020010151905060008583815181106126bb57634e487b7160e01b600052603260045260246000fd5b60209081029190910181015160008481526004835260408082206001600160a01b038e16835290935291909120549091508181101561270c5760405162461bcd60e51b81526004016107219061593d565b60008381526004602090815260408083206001600160a01b038e8116855292528083208585039055908b1682528120805484929061274b908490615bdd565b925050819055505050508061275f90615d5d565b9050612664565b50846001600160a01b0316866001600160a01b0316826001600160a01b0316600080516020615ea983398151915287876040516127a4929190615776565b60405180910390a46127ba818787878787613c88565b505050505050565b306000908152600f6020908152604090912082516109ad928401906149c6565b6001600160a01b03841630141561282e5760405162461bcd60e51b815260206004820152601060248201526f10dc99585d1bdc8e88125b9d985b1a5960821b6044820152606401610721565b6001600160a01b0384163b6128935760405162461bcd60e51b815260206004820152602560248201527f43726561746f723a20457874656e73696f6e206d757374206265206120636f6e6044820152641d1c9858dd60da1b6064820152608401610721565b61289e600885611ed6565b610b36576001600160a01b0384166000908152600f602052604090206128c59084846148b9565b506001600160a01b038416600081815260106020526040808220805460ff1916851515179055513392917fd8cb8ba4086944eabf43c5535b7712015e4d4c714b24bf812c040ea5b7a3e42a91a36108d3600885613134565b600061074f825490565b6000611ef48383613df3565b8281146129525760405162461bcd60e51b8152600401610721906159f3565b6000805b828110156129a45783838281811061297e57634e487b7160e01b600052603260045260246000fd5b90506020020135826129909190615bdd565b91508061299c81615d5d565b915050612956565b5061271081106129c65760405162461bcd60e51b815260040161072190615a1a565b6001600160a01b03861660009081526013602052604090206129e9908686614939565b506001600160a01b0386166000908152601460205260409020612a0d90848461498c565b506001600160a01b038616301415612a61577f2b6849d5976d799a5b0ca4dfd6b40a3d7afe9ea72c091fa01a958594f9a2659b85858585604051612a5494939291906156b6565b60405180910390a16127ba565b856001600160a01b03167f535a93d2cb000582c0ebeaa9be4890ec6a287f98eb2df00c54c300612fd78d8f8686868660405161245494939291906156b6565b612aab838383613e2b565b60008281526017602052604081208054839290612ac9908490615c28565b9091555050505050565b612ade838383613f1e565b60005b8251811015610b3657818181518110612b0a57634e487b7160e01b600052603260045260246000fd5b602002602001015160176000858481518110612b3657634e487b7160e01b600052603260045260246000fd5b602002602001015181526020019081526020016000206000828254612b5b9190615c28565b90915550612b6a905081615d5d565b9050612ae1565b6000825111612b925760405162461bcd60e51b8152600401610721906159f3565b6000600e600084600081518110612bb957634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002060009054906101000a90046001600160a01b0316905060005b8351811015612c7257816001600160a01b0316600e6000868481518110612c1f57634e487b7160e01b600052603260045260246000fd5b6020908102919091018101518252810191909152604001600020546001600160a01b031614612c605760405162461bcd60e51b815260040161072190615987565b80612c6a81615d5d565b915050612be8565b506001600160a01b0381163014610b3657612c94816303dc6f6560e51b61364a565b15610b36576040516303dc6f6560e51b81526001600160a01b03821690637b8deca090612cc99087908790879060040161566d565b600060405180830381600087803b158015612ce357600080fd5b505af1158015612cf7573d6000803e3d6000fd5b5050505050505050565b336000908152600f60205260409020612d1b9084846148b9565b50336000908152601060205260409020805460ff19169115159190911790555050565b6000838152600e60205260409020546001600160a01b0316331461233e5760405162461bcd60e51b815260040161072190615857565b3360009081526011602052604090206108819083836148b9565b6001600160a01b0384163014612da957612da98383836140b9565b82516001148015612dbb575081516001145b8015612dc8575080516001145b15612ea757612ea283600081518110612df157634e487b7160e01b600052603260045260246000fd5b602002602001015183600081518110612e1a57634e487b7160e01b600052603260045260246000fd5b602002602001015183600081518110612e4357634e487b7160e01b600052603260045260246000fd5b602002602001015160006001600160401b03811115612e7257634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612e9c576020820181803683370190505b50614148565b610b36565b82516001148015612eb9575080518251145b15612f4357612ea283600081518110612ee257634e487b7160e01b600052603260045260246000fd5b6020026020010151838360006001600160401b03811115612f1357634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612f3d576020820181803683370190505b5061417d565b81516001148015612f55575080516001145b15612ff35760005b8351811015612fed57612fdb848281518110612f8957634e487b7160e01b600052603260045260246000fd5b602002602001015184600081518110612fb257634e487b7160e01b600052603260045260246000fd5b602002602001015184600081518110612e4357634e487b7160e01b600052603260045260246000fd5b80612fe581615d5d565b915050612f5d565b50610b36565b81516001148015613005575080518351145b1561309c5760005b8351811015612fed5761308a84828151811061303957634e487b7160e01b600052603260045260246000fd5b60200260200101518460008151811061306257634e487b7160e01b600052603260045260246000fd5b6020026020010151848481518110612e4357634e487b7160e01b600052603260045260246000fd5b8061309481615d5d565b91505061300d565b815183511480156130ae575080518351145b1561311c5760005b8351811015612fed5761310a8482815181106130e257634e487b7160e01b600052603260045260246000fd5b602002602001015184838151811061306257634e487b7160e01b600052603260045260246000fd5b8061311481615d5d565b9150506130b6565b60405162461bcd60e51b8152600401610721906159f3565b6000611ef4836001600160a01b03841661421c565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b606060018451111561320457604080516001808252818301909252906020808301908036833701905050905060018251111580156131e357508251600114806131e3575082518451145b6131ff5760405162461bcd60e51b8152600401610721906159f3565b613284565b82516001600160401b0381111561322b57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015613254578160200160208202803683370190505b509050815160001480613268575081518351145b6132845760405162461bcd60e51b8152600401610721906159f3565b60005b815181101561331357600780549060006132a083615d5d565b91905055506007548282815181106132c857634e487b7160e01b600052603260045260246000fd5b6020908102919091018101919091526007546000908152600e9091526040902080546001600160a01b0319166001600160a01b0388161790558061330b81615d5d565b915050613287565b506001600160a01b038516301461332f5761332f8482856140b9565b83516001148015613341575080516001145b156133c1576133bc8460008151811061336a57634e487b7160e01b600052603260045260246000fd5b60200260200101518260008151811061339357634e487b7160e01b600052603260045260246000fd5b602002602001015185600081518110612e4357634e487b7160e01b600052603260045260246000fd5b613555565b6001845111156135005782516001141561346e5760005b84518110156134685761345685828151811061340457634e487b7160e01b600052603260045260246000fd5b60200260200101518360008151811061342d57634e487b7160e01b600052603260045260246000fd5b602002602001015186600081518110612e4357634e487b7160e01b600052603260045260246000fd5b8061346081615d5d565b9150506133d8565b50613555565b60005b8451811015613468576134ee85828151811061349d57634e487b7160e01b600052603260045260246000fd5b6020026020010151836000815181106134c657634e487b7160e01b600052603260045260246000fd5b6020026020010151868481518110612e4357634e487b7160e01b600052603260045260246000fd5b806134f881615d5d565b915050613471565b6135558460008151811061352457634e487b7160e01b600052603260045260246000fd5b6020026020010151828560006001600160401b03811115612f1357634e487b7160e01b600052604160045260246000fd5b60005b8151811015613627578251811080156135995750600083828151811061358e57634e487b7160e01b600052603260045260246000fd5b602002602001015151115b15613615578281815181106135be57634e487b7160e01b600052603260045260246000fd5b6020026020010151601260008484815181106135ea57634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002090805190602001906136139291906149c6565b505b8061361f81615d5d565b915050613558565b50949350505050565b3060009081526011602052604090206108819083836148b9565b60006136558361426b565b8015611ef45750611ef4838361429e565b6000818152601560205260408120541561368c5750600090815260156020526040902090565b6000828152600e60209081526040808320546001600160a01b031683526013909152902054156136de57506000908152600e60209081526040808320546001600160a01b031683526013909152902090565b505030600090815260136020526040902090565b6000806136fe83613666565b6137078461227c565b91509150915091565b61371b600882611ed6565b156107c75760405133906001600160a01b038316907fd19cf84cf0fec6bec9ddfa29c63adf83a55707c712f32c8285d6180a7890147990600090a36109ad6008826125f6565b61376c600883611ed6565b6137ac5760405162461bcd60e51b815260206004820152601160248201527024b73b30b634b21032bc3a32b739b4b7b760791b6044820152606401610721565b6001600160a01b03811615806137ce57506137ce816378ea2a9760e11b61364a565b61380c5760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b6044820152606401610721565b6001600160a01b038281166000908152600c60205260409020548116908216146109ad576001600160a01b038281166000818152600c602052604080822080546001600160a01b031916948616948517905551339392917f6a835c4fcf7e0d398db3762332fdaa1471814ad39f1e2d6d0b3fdabf8efee3e091a45050565b6001600160a01b0384166138b05760405162461bcd60e51b8152600401610721906158b5565b336138cf8187876138c088614387565b6138c988614387565b87613c7c565b60008481526004602090815260408083206001600160a01b038a168452909152902054838110156139125760405162461bcd60e51b81526004016107219061593d565b60008581526004602090815260408083206001600160a01b038b8116855292528083208785039055908816825281208054869290613951908490615bdd565b909155505060408051868152602081018690526001600160a01b03808916928a82169291861691600080516020615ec9833981519152910160405180910390a461399f8288888888886143e0565b50505050505050565b60006001600160e01b031982166328f10a2160e01b14806139cd57506139cd82611e66565b806139e857506001600160e01b03198216635d9dd7eb60e11b145b80613a0357506001600160e01b03198216632dde656160e21b145b80613a1e57506001600160e01b031982166335681b5360e21b145b8061074f57506001600160e01b0319821663152a902d60e11b1492915050565b606081613a625750506040805180820190915260018152600360fc1b602082015290565b8160005b8115613a8c5780613a7681615d5d565b9150613a859050600a83615bf5565b9150613a66565b6000816001600160401b03811115613ab457634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015613ade576020820181803683370190505b5090505b8415613b5757613af3600183615c28565b9150613b00600a86615d78565b613b0b906030615bdd565b60f81b818381518110613b2e57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350613b50600a86615bf5565b9450613ae2565b949350505050565b60008181526001830160205260408120548015613c72576000613b83600183615c28565b8554909150600090613b9790600190615c28565b9050818114613c18576000866000018281548110613bc557634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080876000018481548110613bf657634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b8554869080613c3757634e487b7160e01b600052603160045260246000fd5b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061074f565b600091505061074f565b6127ba858585856144aa565b6001600160a01b0384163b156127ba5760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190613ccc908990899088908890889060040161558b565b602060405180830381600087803b158015613ce657600080fd5b505af1925050508015613d16575060408051601f3d908101601f19168201909252613d13918101906151f7565b60015b613dc357613d22615dce565b806308c379a01415613d5c5750613d37615de6565b80613d425750613d5e565b8060405162461bcd60e51b81526004016107219190615789565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610721565b6001600160e01b0319811663bc197c8160e01b1461399f5760405162461bcd60e51b81526004016107219061579c565b6000826000018281548110613e1857634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b6001600160a01b038316613e515760405162461bcd60e51b8152600401610721906158fa565b33613e8081856000613e6287614387565b613e6b87614387565b60405180602001604052806000815250613c7c565b60008381526004602090815260408083206001600160a01b038816845290915290205482811015613ec35760405162461bcd60e51b8152600401610721906157e4565b60008481526004602090815260408083206001600160a01b0389811680865291845282852088870390558251898152938401889052909290861691600080516020615ec9833981519152910160405180910390a45050505050565b6001600160a01b038316613f445760405162461bcd60e51b8152600401610721906158fa565b8051825114613f655760405162461bcd60e51b815260040161072190615a8f565b6000339050613f8881856000868660405180602001604052806000815250613c7c565b60005b835181101561406c576000848281518110613fb657634e487b7160e01b600052603260045260246000fd5b602002602001015190506000848381518110613fe257634e487b7160e01b600052603260045260246000fd5b60209081029190910181015160008481526004835260408082206001600160a01b038c1683529093529190912054909150818110156140335760405162461bcd60e51b8152600401610721906157e4565b60009283526004602090815260408085206001600160a01b038b168652909152909220910390558061406481615d5d565b915050613f8b565b5060006001600160a01b0316846001600160a01b0316826001600160a01b0316600080516020615ea983398151915286866040516140ab929190615776565b60405180910390a450505050565b336000908152600c60205260409020546001600160a01b03161561088157336000818152600c6020526040908190205490516378ea2a9760e11b81526001600160a01b039091169163f1d4552e9161411a9190879087908790600401615623565b600060405180830381600087803b15801561413457600080fd5b505af115801561399f573d6000803e3d6000fd5b6141548484848461469d565b60008381526017602052604081208054849290614172908490615bdd565b909155505050505050565b61418984848484614754565b60005b83518110156108d3578281815181106141b557634e487b7160e01b600052603260045260246000fd5b6020026020010151601760008684815181106141e157634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002060008282546142069190615bdd565b90915550614215905081615d5d565b905061418c565b60008181526001830160205260408120546142635750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561074f565b50600061074f565b600061427e826301ffc9a760e01b61429e565b801561074f5750614297826001600160e01b031961429e565b1592915050565b604080516001600160e01b0319831660248083019190915282518083039091018152604490910182526020810180516001600160e01b03166301ffc9a760e01b179052905160009190829081906001600160a01b03871690617530906143059086906154ec565b6000604051808303818686fa925050503d8060008114614341576040519150601f19603f3d011682016040523d82523d6000602084013e614346565b606091505b5091509150602081511015614361576000935050505061074f565b81801561437d57508080602001905181019061437d91906151bf565b9695505050505050565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106143cf57634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b6001600160a01b0384163b156127ba5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e619061442490899089908890889088906004016155e9565b602060405180830381600087803b15801561443e57600080fd5b505af192505050801561446e575060408051601f3d908101601f1916820190925261446b918101906151f7565b60015b61447a57613d22615dce565b6001600160e01b0319811663f23a6e6160e01b1461399f5760405162461bcd60e51b81526004016107219061579c565b60008251116144cb5760405162461bcd60e51b8152600401610721906159f3565b6000600e6000846000815181106144f257634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002060009054906101000a90046001600160a01b0316905060005b83518110156145ab57816001600160a01b0316600e600086848151811061455857634e487b7160e01b600052603260045260246000fd5b6020908102919091018101518252810191909152604001600020546001600160a01b0316146145995760405162461bcd60e51b815260040161072190615987565b806145a381615d5d565b915050614521565b506001600160a01b0381166000908152600d602052604090205460ff16156108d35760405163883da93360e01b81526001600160a01b0382169063883da933906145ff908890889088908890600401615542565b602060405180830381600087803b15801561461957600080fd5b505af115801561462d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061465191906151bf565b6108d35760405162461bcd60e51b815260206004820152601a60248201527f457874656e73696f6e20617070726f76616c206661696c7572650000000000006044820152606401610721565b6001600160a01b0384166146c35760405162461bcd60e51b815260040161072190615ad7565b336146d4816000876138c088614387565b60008481526004602090815260408083206001600160a01b038916845290915281208054859290614706908490615bdd565b909155505060408051858152602081018590526001600160a01b038088169260009291851691600080516020615ec9833981519152910160405180910390a46108d3816000878787876143e0565b6001600160a01b03841661477a5760405162461bcd60e51b815260040161072190615ad7565b815183511461479b5760405162461bcd60e51b815260040161072190615a8f565b336147ab81600087878787613c7c565b60005b8451811015614863578381815181106147d757634e487b7160e01b600052603260045260246000fd5b60200260200101516004600087848151811061480357634e487b7160e01b600052603260045260246000fd5b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b03168152602001908152602001600020600082825461484b9190615bdd565b9091555081905061485b81615d5d565b9150506147ae565b50846001600160a01b031660006001600160a01b0316826001600160a01b0316600080516020615ea983398151915287876040516148a2929190615776565b60405180910390a46108d381600087878787613c88565b8280546148c590615cfc565b90600052602060002090601f0160209004810192826148e7576000855561492d565b82601f106149005782800160ff1982351617855561492d565b8280016001018555821561492d579182015b8281111561492d578235825591602001919060010190614912565b50610c02929150614a3a565b82805482825590600052602060002090810192821561492d579160200282015b8281111561492d5781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190614959565b82805482825590600052602060002090810192821561492d579160200282018281111561492d578235825591602001919060010190614912565b8280546149d290615cfc565b90600052602060002090601f0160209004810192826149f4576000855561492d565b82601f10614a0d57805160ff191683800117855561492d565b8280016001018555821561492d579182015b8281111561492d578251825591602001919060010190614a1f565b5b80821115610c025760008155600101614a3b565b6000614a5a83615bb6565b604051614a678282615d31565b809250848152858585011115614a7c57600080fd5b8484602083013760006020868301015250509392505050565b60008083601f840112614aa6578182fd5b5081356001600160401b03811115614abc578182fd5b6020830191508360208260051b850101111561092657600080fd5b600082601f830112614ae7578081fd5b81356020614af482615b93565b604051614b018282615d31565b8381528281019150858301600585901b87018401881015614b20578586fd5b855b85811015614b3e57813584529284019290840190600101614b22565b5090979650505050505050565b600082601f830112614b5b578081fd5b611ef483833560208501614a4f565b60008083601f840112614b7b578182fd5b5081356001600160401b03811115614b91578182fd5b60208301915083602082850101111561092657600080fd5b600060208284031215614bba578081fd5b8135611ef481615e6f565b60008060408385031215614bd7578081fd5b8235614be281615e6f565b91506020830135614bf281615e6f565b809150509250929050565b600080600080600060a08688031215614c14578081fd5b8535614c1f81615e6f565b94506020860135614c2f81615e6f565b935060408601356001600160401b0380821115614c4a578283fd5b614c5689838a01614ad7565b94506060880135915080821115614c6b578283fd5b614c7789838a01614ad7565b93506080880135915080821115614c8c578283fd5b50614c9988828901614b4b565b9150509295509295909350565b600080600080600060a08688031215614cbd578283fd5b8535614cc881615e6f565b94506020860135614cd881615e6f565b9350604086013592506060860135915060808601356001600160401b03811115614d00578182fd5b614c9988828901614b4b565b600080600080600060608688031215614d23578283fd5b8535614d2e81615e6f565b945060208601356001600160401b0380821115614d49578485fd5b614d5589838a01614a95565b90965094506040880135915080821115614d6d578283fd5b50614d7a88828901614a95565b969995985093965092949392505050565b600080600060608486031215614d9f578081fd5b8335614daa81615e6f565b925060208401356001600160401b0380821115614dc5578283fd5b614dd187838801614ad7565b93506040860135915080821115614de6578283fd5b50614df386828701614ad7565b9150509250925092565b60008060408385031215614e0f578182fd5b8235614e1a81615e6f565b91506020830135614bf281615e84565b600080600060408486031215614e3e578081fd5b8335614e4981615e6f565b925060208401356001600160401b03811115614e63578182fd5b614e6f86828701614b6a565b9497909650939450505050565b60008060008060608587031215614e91578182fd5b8435614e9c81615e6f565b935060208501356001600160401b03811115614eb6578283fd5b614ec287828801614b6a565b9094509250506040850135614ed681615e84565b939692955090935050565b60008060408385031215614ef3578182fd5b8235614efe81615e6f565b946020939093013593505050565b60008060008060008060608789031215614f24578384fd5b86356001600160401b0380821115614f3a578586fd5b614f468a838b01614a95565b90985096506020890135915080821115614f5e578586fd5b614f6a8a838b01614a95565b90965094506040890135915080821115614f82578283fd5b50614f8f89828a01614a95565b979a9699509497509295939492505050565b60008060008060008060608789031215614fb9578384fd5b86356001600160401b0380821115614fcf578586fd5b614fdb8a838b01614a95565b90985096506020890135915080821115614ff3578586fd5b614fff8a838b01614a95565b90965094506040890135915080821115614f82578384fd5b60008060408385031215615029578182fd5b82356001600160401b038082111561503f578384fd5b818501915085601f830112615052578384fd5b8135602061505f82615b93565b60405161506c8282615d31565b8381528281019150858301600585901b870184018b101561508b578889fd5b8896505b848710156150b65780356150a281615e6f565b83526001969096019591830191830161508f565b50965050860135925050808211156150cc578283fd5b506150d985828601614ad7565b9150509250929050565b600080600080604085870312156150f8578182fd5b84356001600160401b038082111561510e578384fd5b61511a88838901614a95565b90965094506020870135915080821115615132578384fd5b5061513f87828801614a95565b95989497509550505050565b60008060006040848603121561515f578081fd5b83356001600160401b0380821115615175578283fd5b61518187838801614ad7565b94506020860135915080821115615196578283fd5b50614e6f86828701614a95565b6000602082840312156151b4578081fd5b8135611ef481615e84565b6000602082840312156151d0578081fd5b8151611ef481615e84565b6000602082840312156151ec578081fd5b8135611ef481615e92565b600060208284031215615208578081fd5b8151611ef481615e92565b60008060208385031215615225578182fd5b82356001600160401b0381111561523a578283fd5b61524685828601614b6a565b90969095509350505050565b600080600060408486031215615266578081fd5b83356001600160401b0381111561527b578182fd5b61528786828701614b6a565b909450925050602084013561529b81615e84565b809150509250925092565b6000602082840312156152b7578081fd5b81516001600160401b038111156152cc578182fd5b8201601f810184136152dc578182fd5b80516152e781615bb6565b6040516152f48282615d31565b828152866020848601011115615308578485fd5b61437d836020830160208701615cd0565b60006020828403121561532a578081fd5b5035919050565b600080600080600060608688031215615348578283fd5b8535945060208601356001600160401b0380821115614d49578485fd5b600080600060408486031215615379578081fd5b8335925060208401356001600160401b03811115614e63578182fd5b600080604083850312156153a7578182fd5b50508035926020909101359150565b6000815180845260208085019450808401835b838110156153ee5781516001600160a01b0316875295820195908201906001016153c9565b509495945050505050565b6000815180845260208085019450808401835b838110156153ee5781518752958201959082019060010161540c565b60008151808452615440816020860160208601615cd0565b601f01601f19169290920160200192915050565b8054600090600181811c908083168061546e57607f831692505b602080841082141561548e57634e487b7160e01b86526022600452602486fd5b8180156154a257600181146154b3576154e0565b60ff198616895284890196506154e0565b60008881526020902060005b868110156154d85781548b8201529085019083016154bf565b505084890196505b50505050505092915050565b600082516154fe818460208701615cd0565b9190910192915050565b60006155148285615454565b8351615524818360208801615cd0565b01949350505050565b6000613b5761553c8386615454565b84615454565b6001600160a01b0385811682528416602082015260806040820181905260009061556e908301856153f9565b828103606084015261558081856153f9565b979650505050505050565b6001600160a01b0386811682528516602082015260a0604082018190526000906155b7908301866153f9565b82810360608401526155c981866153f9565b905082810360808401526155dd8185615428565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061558090830184615428565b6001600160a01b0385168152608060208201819052600090615647908301866153b6565b828103604084015261565981866153f9565b9050828103606084015261558081856153f9565b6001600160a01b0384168152606060208201819052600090615691908301856153f9565b828103604084015261437d81856153f9565b602081526000611ef460208301846153b6565b6040808252810184905260008560608301825b878110156156f95782356156dc81615e6f565b6001600160a01b03168252602092830192909101906001016156c9565b5083810360208501528481526001600160fb1b03851115615718578283fd5b8460051b9150818660208301370160200190815295945050505050565b60408152600061574860408301856153b6565b828103602084015261575a81856153f9565b95945050505050565b602081526000611ef460208301846153f9565b60408152600061574860408301856153f9565b602081526000611ef46020830184615428565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b60208082526024908201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604082015263616e636560e01b606082015260800190565b602080825260159082015274115e1d195b9cda5bdb88189b1858dadb1a5cdd1959605a1b604082015260600190565b6020808252600d908201526c24b73b30b634b2103a37b5b2b760991b604082015260600190565b6020808252601c908201527f4d757374206265207265676973746572656420657874656e73696f6e00000000604082015260600190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526023908201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260408201526265737360e81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6020808252601c908201527f4d69736d61746368656420746f6b656e206f726967696e61746f727300000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252600d908201526c125b9d985b1a59081a5b9c1d5d609a1b604082015260600190565b602080825260179082015276496e76616c696420746f74616c20726f79616c7469657360481b604082015260600190565b60208082526024908201527f41646d696e436f6e74726f6c3a204d757374206265206f776e6572206f7220616040820152633236b4b760e11b606082015260800190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6000808335601e19843603018112615b65578283fd5b8301803591506001600160401b03821115615b7e578283fd5b60200191503681900382131561092657600080fd5b60006001600160401b03821115615bac57615bac615db8565b5060051b60200190565b60006001600160401b03821115615bcf57615bcf615db8565b50601f01601f191660200190565b60008219821115615bf057615bf0615d8c565b500190565b600082615c0457615c04615da2565b500490565b6000816000190483118215151615615c2357615c23615d8c565b500290565b600082821015615c3a57615c3a615d8c565b500390565b6000615c4a83615b93565b604051615c578282615d31565b848152602080820192508436600588901b82011115615c74578485fd5b845b87811015615cc45781356001600160401b03811115615c93578687fd5b870136601f820112615ca3578687fd5b615cb1368235868401614a4f565b8652509382019390820190600101615c76565b50919695505050505050565b60005b83811015615ceb578181015183820152602001615cd3565b83811115610b365750506000910152565b600181811c90821680615d1057607f821691505b6020821081141561227657634e487b7160e01b600052602260045260246000fd5b601f8201601f191681016001600160401b0381118282101715615d5657615d56615db8565b6040525050565b6000600019821415615d7157615d71615d8c565b5060010190565b600082615d8757615d87615da2565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d1115615de357600481823e5160e01c5b90565b600060443d1015615df45790565b6040516003193d81016004833e81513d6001600160401b038160248401118184111715615e2357505050505090565b8285019150815181811115615e3b5750505050505090565b843d8701016020828501011115615e555750505050505090565b615e6460208286010187615d31565b509095945050505050565b6001600160a01b03811681146107c757600080fd5b80151581146107c757600080fd5b6001600160e01b0319811681146107c757600080fdfe4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fbc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62a264697066735822122014819c046e58c168bf73141b6e28f28d831363194c282c23a270d4f28a945b5264736f6c63430008040033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approveAdmin(address)": {
        "details": "See {IAdminControl-approveAdmin}."
      },
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "blacklistExtension(address)": {
        "details": "See {ICreatorCore-blacklistExtension}."
      },
      "burn(address,uint256[],uint256[])": {
        "details": "See {IERC1155CreatorCore-burn}."
      },
      "getAdmins()": {
        "details": "See {IAdminControl-getAdmins}."
      },
      "getExtensions()": {
        "details": "See {ICreatorCore-getExtensions}."
      },
      "getFeeBps(uint256)": {
        "details": "{See ICreatorCore-getFeeBps}."
      },
      "getFeeRecipients(uint256)": {
        "details": "{See ICreatorCore-getFeeRecipients}."
      },
      "getFees(uint256)": {
        "details": "{See ICreatorCore-getFees}."
      },
      "getRoyalties(uint256)": {
        "details": "{See ICreatorCore-getRoyalties}."
      },
      "isAdmin(address)": {
        "details": "See {IAdminControl-isAdmin}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "mintBaseExisting(address[],uint256[],uint256[])": {
        "details": "See {IERC1155CreatorCore-mintBaseExisting}."
      },
      "mintBaseNew(address[],uint256[],string[])": {
        "details": "See {IERC1155CreatorCore-mintBaseNew}."
      },
      "mintExtensionExisting(address[],uint256[],uint256[])": {
        "details": "See {IERC1155CreatorCore-mintExtensionExisting}."
      },
      "mintExtensionNew(address[],uint256[],string[])": {
        "details": "See {IERC1155CreatorCore-mintExtensionNew}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "registerExtension(address,string)": {
        "details": "See {ICreatorCore-registerExtension}."
      },
      "registerExtension(address,string,bool)": {
        "details": "See {ICreatorCore-registerExtension}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "revokeAdmin(address)": {
        "details": "See {IAdminControl-revokeAdmin}."
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "{See ICreatorCore-royaltyInfo}."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "setApproveTransferExtension(bool)": {
        "details": "See {ICreatorCore-setApproveTransferExtension}."
      },
      "setBaseTokenURI(string)": {
        "details": "See {ICreatorCore-setBaseTokenURI}."
      },
      "setBaseTokenURIExtension(string)": {
        "details": "See {ICreatorCore-setBaseTokenURIExtension}."
      },
      "setBaseTokenURIExtension(string,bool)": {
        "details": "See {ICreatorCore-setBaseTokenURIExtension}."
      },
      "setMintPermissions(address,address)": {
        "details": "See {ICreatorCore-setMintPermissions}."
      },
      "setRoyalties(address[],uint256[])": {
        "details": "See {ICreatorCore-setRoyalties}."
      },
      "setRoyalties(uint256,address[],uint256[])": {
        "details": "See {ICreatorCore-setRoyalties}."
      },
      "setRoyaltiesExtension(address,address[],uint256[])": {
        "details": "See {ICreatorCore-setRoyaltiesExtension}."
      },
      "setTokenURI(uint256,string)": {
        "details": "See {ICreatorCore-setTokenURI}."
      },
      "setTokenURI(uint256[],string[])": {
        "details": "See {ICreatorCore-setTokenURI}."
      },
      "setTokenURIExtension(uint256,string)": {
        "details": "See {ICreatorCore-setTokenURIExtension}."
      },
      "setTokenURIExtension(uint256[],string[])": {
        "details": "See {ICreatorCore-setTokenURIExtension}."
      },
      "setTokenURIPrefix(string)": {
        "details": "See {ICreatorCore-setTokenURIPrefix}."
      },
      "setTokenURIPrefixExtension(string)": {
        "details": "See {ICreatorCore-setTokenURIPrefixExtension}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "tokenExtension(uint256)": {
        "details": "See {IERC1155CreatorCore-tokenExtension}."
      },
      "totalSupply(uint256)": {
        "details": "Total amount of tokens in with a given id."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unregisterExtension(address)": {
        "details": "See {ICreatorCore-unregisterExtension}."
      },
      "uri(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      }
    },
    "title": "MFW wearables contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5481,
        "contract": "contracts/MFW.sol:MFW",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5588,
        "contract": "contracts/MFW.sol:MFW",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 4637,
        "contract": "contracts/MFW.sol:MFW",
        "label": "_admins",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(AddressSet)9227_storage"
      },
      {
        "astId": 5643,
        "contract": "contracts/MFW.sol:MFW",
        "label": "_balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 5649,
        "contract": "contracts/MFW.sol:MFW",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 5651,
        "contract": "contracts/MFW.sol:MFW",
        "label": "_uri",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 2480,
        "contract": "contracts/MFW.sol:MFW",
        "label": "_tokenCount",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 2483,
        "contract": "contracts/MFW.sol:MFW",
        "label": "_extensions",
        "offset": 0,
        "slot": "8",
        "type": "t_struct(AddressSet)9227_storage"
      },
      {
        "astId": 2486,
        "contract": "contracts/MFW.sol:MFW",
        "label": "_blacklistedExtensions",
        "offset": 0,
        "slot": "10",
        "type": "t_struct(AddressSet)9227_storage"
      },
      {
        "astId": 2490,
        "contract": "contracts/MFW.sol:MFW",
        "label": "_extensionPermissions",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 2494,
        "contract": "contracts/MFW.sol:MFW",
        "label": "_extensionApproveTransfers",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2498,
        "contract": "contracts/MFW.sol:MFW",
        "label": "_tokensExtension",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2502,
        "contract": "contracts/MFW.sol:MFW",
        "label": "_extensionBaseURI",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_string_storage)"
      },
      {
        "astId": 2506,
        "contract": "contracts/MFW.sol:MFW",
        "label": "_extensionBaseURIIdentical",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2510,
        "contract": "contracts/MFW.sol:MFW",
        "label": "_extensionURIPrefix",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_string_storage)"
      },
      {
        "astId": 2514,
        "contract": "contracts/MFW.sol:MFW",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 2519,
        "contract": "contracts/MFW.sol:MFW",
        "label": "_extensionRoyaltyReceivers",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_array(t_address_payable)dyn_storage)"
      },
      {
        "astId": 2524,
        "contract": "contracts/MFW.sol:MFW",
        "label": "_extensionRoyaltyBPS",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 2529,
        "contract": "contracts/MFW.sol:MFW",
        "label": "_tokenRoyaltyReceivers",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_uint256,t_array(t_address_payable)dyn_storage)"
      },
      {
        "astId": 2534,
        "contract": "contracts/MFW.sol:MFW",
        "label": "_tokenRoyaltyBPS",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 15,
        "contract": "contracts/MFW.sol:MFW",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_address_payable)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address payable[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address_payable)dyn_storage"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_address_payable)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address payable[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address_payable)dyn_storage"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)9227_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 9226,
            "contract": "contracts/MFW.sol:MFW",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)8926_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)8926_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 8921,
            "contract": "contracts/MFW.sol:MFW",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 8925,
            "contract": "contracts/MFW.sol:MFW",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}