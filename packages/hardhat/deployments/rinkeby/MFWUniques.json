{
  "address": "0x90593Af64b1ca0F7da1ed032EFe247c91d6515Aa",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "AdminApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "AdminRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address payable[]",
          "name": "receivers",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "basisPoints",
          "type": "uint256[]"
        }
      ],
      "name": "DefaultRoyaltiesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "extension",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "ExtensionApproveTransferUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "extension",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ExtensionBlacklisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "extension",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ExtensionRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "extension",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address payable[]",
          "name": "receivers",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "basisPoints",
          "type": "uint256[]"
        }
      ],
      "name": "ExtensionRoyaltiesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "extension",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ExtensionUnregistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "extension",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "permissions",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "MintPermissionsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address payable[]",
          "name": "receivers",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "basisPoints",
          "type": "uint256[]"
        }
      ],
      "name": "RoyaltiesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "approveAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "extension",
          "type": "address"
        }
      ],
      "name": "blacklistExtension",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAdmins",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "admins",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getExtensions",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "extensions",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getFeeBps",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getFeeRecipients",
      "outputs": [
        {
          "internalType": "address payable[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getFees",
      "outputs": [
        {
          "internalType": "address payable[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getRoyalties",
      "outputs": [
        {
          "internalType": "address payable[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "isAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "mintBase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "mintBase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "uris",
          "type": "string[]"
        }
      ],
      "name": "mintBaseBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "count",
          "type": "uint16"
        }
      ],
      "name": "mintBaseBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "mintExtension",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "mintExtension",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "uris",
          "type": "string[]"
        }
      ],
      "name": "mintExtensionBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "count",
          "type": "uint16"
        }
      ],
      "name": "mintExtensionBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "extension",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        }
      ],
      "name": "registerExtension",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "extension",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "baseURIIdentical",
          "type": "bool"
        }
      ],
      "name": "registerExtension",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "revokeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setApproveTransferExtension",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "setBaseTokenURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "setBaseTokenURIExtension",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "identical",
          "type": "bool"
        }
      ],
      "name": "setBaseTokenURIExtension",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "extension",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "permissions",
          "type": "address"
        }
      ],
      "name": "setMintPermissions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address payable[]",
          "name": "receivers",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "basisPoints",
          "type": "uint256[]"
        }
      ],
      "name": "setRoyalties",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable[]",
          "name": "receivers",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "basisPoints",
          "type": "uint256[]"
        }
      ],
      "name": "setRoyalties",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "extension",
          "type": "address"
        },
        {
          "internalType": "address payable[]",
          "name": "receivers",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "basisPoints",
          "type": "uint256[]"
        }
      ],
      "name": "setRoyaltiesExtension",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "setTokenURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "uris",
          "type": "string[]"
        }
      ],
      "name": "setTokenURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "uris",
          "type": "string[]"
        }
      ],
      "name": "setTokenURIExtension",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "setTokenURIExtension",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "prefix",
          "type": "string"
        }
      ],
      "name": "setTokenURIPrefix",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "prefix",
          "type": "string"
        }
      ],
      "name": "setTokenURIPrefixExtension",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenExtension",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "extension",
          "type": "address"
        }
      ],
      "name": "unregisterExtension",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x621441244de6d55fedf712beb5ebd57872890b121503d34ea28d95ae40234561",
  "receipt": {
    "to": null,
    "from": "0xf737d363832a6dEF12BABDd1d8D73b8f907A489b",
    "contractAddress": "0x90593Af64b1ca0F7da1ed032EFe247c91d6515Aa",
    "transactionIndex": 32,
    "gasUsed": "4520663",
    "logsBloom": "0x
    "blockHash": "0xc5c4d23d12a20a0014f9a9f043b62fe8bd58089be2565fa55003253fc9133109",
    "transactionHash": "0x621441244de6d55fedf712beb5ebd57872890b121503d34ea28d95ae40234561",
    "logs": [
      {
        "transactionIndex": 32,
        "blockNumber": 10823718,
        "transactionHash": "0x621441244de6d55fedf712beb5ebd57872890b121503d34ea28d95ae40234561",
        "address": "0x90593Af64b1ca0F7da1ed032EFe247c91d6515Aa",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f737d363832a6def12babdd1d8d73b8f907a489b"
        ],
        "data": "0x",
        "logIndex": 163,
        "blockHash": "0xc5c4d23d12a20a0014f9a9f043b62fe8bd58089be2565fa55003253fc9133109"
      }
    ],
    "blockNumber": 10823718,
    "cumulativeGasUsed": "16096264",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "MetaFactory Wearables - Unique",
    "MFWU"
  ],
  "solcInputHash": "e582479fc1a35fdc3f1deca5f1c9ac43",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"AdminApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"AdminRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address payable[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"basisPoints\",\"type\":\"uint256[]\"}],\"name\":\"DefaultRoyaltiesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"extension\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"ExtensionApproveTransferUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"extension\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ExtensionBlacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"extension\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ExtensionRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"extension\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address payable[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"basisPoints\",\"type\":\"uint256[]\"}],\"name\":\"ExtensionRoyaltiesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"extension\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ExtensionUnregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"extension\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"permissions\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"MintPermissionsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address payable[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"basisPoints\",\"type\":\"uint256[]\"}],\"name\":\"RoyaltiesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"approveAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"extension\",\"type\":\"address\"}],\"name\":\"blacklistExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmins\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"admins\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExtensions\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"extensions\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getFeeBps\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getFeeRecipients\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getFees\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getRoyalties\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mintBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"mintBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"uris\",\"type\":\"string[]\"}],\"name\":\"mintBaseBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"count\",\"type\":\"uint16\"}],\"name\":\"mintBaseBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mintExtension\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"mintExtension\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"uris\",\"type\":\"string[]\"}],\"name\":\"mintExtensionBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"count\",\"type\":\"uint16\"}],\"name\":\"mintExtensionBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"extension\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"registerExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"extension\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"baseURIIdentical\",\"type\":\"bool\"}],\"name\":\"registerExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"revokeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setApproveTransferExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setBaseTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setBaseTokenURIExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"identical\",\"type\":\"bool\"}],\"name\":\"setBaseTokenURIExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"extension\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"permissions\",\"type\":\"address\"}],\"name\":\"setMintPermissions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address payable[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"basisPoints\",\"type\":\"uint256[]\"}],\"name\":\"setRoyalties\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"basisPoints\",\"type\":\"uint256[]\"}],\"name\":\"setRoyalties\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"extension\",\"type\":\"address\"},{\"internalType\":\"address payable[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"basisPoints\",\"type\":\"uint256[]\"}],\"name\":\"setRoyaltiesExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"uris\",\"type\":\"string[]\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"uris\",\"type\":\"string[]\"}],\"name\":\"setTokenURIExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setTokenURIExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"prefix\",\"type\":\"string\"}],\"name\":\"setTokenURIPrefix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"prefix\",\"type\":\"string\"}],\"name\":\"setTokenURIPrefixExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenExtension\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"extension\",\"type\":\"address\"}],\"name\":\"unregisterExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"approveAdmin(address)\":{\"details\":\"See {IAdminControl-approveAdmin}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"blacklistExtension(address)\":{\"details\":\"See {ICreatorCore-blacklistExtension}.\"},\"burn(uint256)\":{\"details\":\"See {IERC721CreatorCore-burn}.\"},\"getAdmins()\":{\"details\":\"See {IAdminControl-getAdmins}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getExtensions()\":{\"details\":\"See {ICreatorCore-getExtensions}.\"},\"getFeeBps(uint256)\":{\"details\":\"{See ICreatorCore-getFeeBps}.\"},\"getFeeRecipients(uint256)\":{\"details\":\"{See ICreatorCore-getFeeRecipients}.\"},\"getFees(uint256)\":{\"details\":\"{See ICreatorCore-getFees}.\"},\"getRoyalties(uint256)\":{\"details\":\"{See ICreatorCore-getRoyalties}.\"},\"isAdmin(address)\":{\"details\":\"See {IAdminControl-isAdmin}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"mintBase(address)\":{\"details\":\"See {IERC721CreatorCore-mintBase}.\"},\"mintBase(address,string)\":{\"details\":\"See {IERC721CreatorCore-mintBase}.\"},\"mintBaseBatch(address,string[])\":{\"details\":\"See {IERC721CreatorCore-mintBaseBatch}.\"},\"mintBaseBatch(address,uint16)\":{\"details\":\"See {IERC721CreatorCore-mintBaseBatch}.\"},\"mintExtension(address)\":{\"details\":\"See {IERC721CreatorCore-mintExtension}.\"},\"mintExtension(address,string)\":{\"details\":\"See {IERC721CreatorCore-mintExtension}.\"},\"mintExtensionBatch(address,string[])\":{\"details\":\"See {IERC721CreatorCore-mintExtensionBatch}.\"},\"mintExtensionBatch(address,uint16)\":{\"details\":\"See {IERC721CreatorCore-mintExtensionBatch}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"registerExtension(address,string)\":{\"details\":\"See {ICreatorCore-registerExtension}.\"},\"registerExtension(address,string,bool)\":{\"details\":\"See {ICreatorCore-registerExtension}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"revokeAdmin(address)\":{\"details\":\"See {IAdminControl-revokeAdmin}.\"},\"royaltyInfo(uint256,uint256)\":{\"details\":\"{See ICreatorCore-royaltyInfo}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setApproveTransferExtension(bool)\":{\"details\":\"See {ICreatorCore-setApproveTransferExtension}.\"},\"setBaseTokenURI(string)\":{\"details\":\"See {ICreatorCore-setBaseTokenURI}.\"},\"setBaseTokenURIExtension(string)\":{\"details\":\"See {ICreatorCore-setBaseTokenURIExtension}.\"},\"setBaseTokenURIExtension(string,bool)\":{\"details\":\"See {ICreatorCore-setBaseTokenURIExtension}.\"},\"setMintPermissions(address,address)\":{\"details\":\"See {ICreatorCore-setMintPermissions}.\"},\"setRoyalties(address[],uint256[])\":{\"details\":\"See {ICreatorCore-setRoyalties}.\"},\"setRoyalties(uint256,address[],uint256[])\":{\"details\":\"See {ICreatorCore-setRoyalties}.\"},\"setRoyaltiesExtension(address,address[],uint256[])\":{\"details\":\"See {ICreatorCore-setRoyaltiesExtension}.\"},\"setTokenURI(uint256,string)\":{\"details\":\"See {ICreatorCore-setTokenURI}.\"},\"setTokenURI(uint256[],string[])\":{\"details\":\"See {ICreatorCore-setTokenURI}.\"},\"setTokenURIExtension(uint256,string)\":{\"details\":\"See {ICreatorCore-setTokenURIExtension}.\"},\"setTokenURIExtension(uint256[],string[])\":{\"details\":\"See {ICreatorCore-setTokenURIExtension}.\"},\"setTokenURIPrefix(string)\":{\"details\":\"See {ICreatorCore-setTokenURIPrefix}.\"},\"setTokenURIPrefixExtension(string)\":{\"details\":\"See {ICreatorCore-setTokenURIPrefixExtension}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenExtension(uint256)\":{\"details\":\"See {IERC721CreatorCore-tokenExtension}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unregisterExtension(address)\":{\"details\":\"See {ICreatorCore-unregisterExtension}.\"}},\"title\":\"MFW wearables contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MFWUniques.sol\":\"MFWUniques\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@manifoldxyz/creator-core-solidity/contracts/ERC721Creator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\n\\nimport \\\"@manifoldxyz/libraries-solidity/contracts/access/AdminControl.sol\\\";\\nimport \\\"./core/ERC721CreatorCore.sol\\\";\\n\\n/**\\n * @dev ERC721Creator implementation\\n */\\ncontract ERC721Creator is AdminControl, ERC721, ERC721CreatorCore {\\n\\n    constructor (string memory _name, string memory _symbol) ERC721(_name, _symbol) {\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, ERC721CreatorCore, AdminControl) returns (bool) {\\n        return ERC721CreatorCore.supportsInterface(interfaceId) || ERC721.supportsInterface(interfaceId) || AdminControl.supportsInterface(interfaceId);\\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override {\\n        _approveTransfer(from, to, tokenId);    \\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-registerExtension}.\\n     */\\n    function registerExtension(address extension, string calldata baseURI) external override adminRequired nonBlacklistRequired(extension) {\\n        _registerExtension(extension, baseURI, false);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-registerExtension}.\\n     */\\n    function registerExtension(address extension, string calldata baseURI, bool baseURIIdentical) external override adminRequired nonBlacklistRequired(extension) {\\n        _registerExtension(extension, baseURI, baseURIIdentical);\\n    }\\n\\n\\n    /**\\n     * @dev See {ICreatorCore-unregisterExtension}.\\n     */\\n    function unregisterExtension(address extension) external override adminRequired {\\n        _unregisterExtension(extension);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-blacklistExtension}.\\n     */\\n    function blacklistExtension(address extension) external override adminRequired {\\n        _blacklistExtension(extension);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-setBaseTokenURIExtension}.\\n     */\\n    function setBaseTokenURIExtension(string calldata uri) external override extensionRequired {\\n        _setBaseTokenURIExtension(uri, false);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-setBaseTokenURIExtension}.\\n     */\\n    function setBaseTokenURIExtension(string calldata uri, bool identical) external override extensionRequired {\\n        _setBaseTokenURIExtension(uri, identical);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-setTokenURIPrefixExtension}.\\n     */\\n    function setTokenURIPrefixExtension(string calldata prefix) external override extensionRequired {\\n        _setTokenURIPrefixExtension(prefix);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-setTokenURIExtension}.\\n     */\\n    function setTokenURIExtension(uint256 tokenId, string calldata uri) external override extensionRequired {\\n        _setTokenURIExtension(tokenId, uri);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-setTokenURIExtension}.\\n     */\\n    function setTokenURIExtension(uint256[] memory tokenIds, string[] calldata uris) external override extensionRequired {\\n        require(tokenIds.length == uris.length, \\\"Invalid input\\\");\\n        for (uint i = 0; i < tokenIds.length; i++) {\\n            _setTokenURIExtension(tokenIds[i], uris[i]);            \\n        }\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-setBaseTokenURI}.\\n     */\\n    function setBaseTokenURI(string calldata uri) external override adminRequired {\\n        _setBaseTokenURI(uri);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-setTokenURIPrefix}.\\n     */\\n    function setTokenURIPrefix(string calldata prefix) external override adminRequired {\\n        _setTokenURIPrefix(prefix);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-setTokenURI}.\\n     */\\n    function setTokenURI(uint256 tokenId, string calldata uri) external override adminRequired {\\n        _setTokenURI(tokenId, uri);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-setTokenURI}.\\n     */\\n    function setTokenURI(uint256[] memory tokenIds, string[] calldata uris) external override adminRequired {\\n        require(tokenIds.length == uris.length, \\\"Invalid input\\\");\\n        for (uint i = 0; i < tokenIds.length; i++) {\\n            _setTokenURI(tokenIds[i], uris[i]);            \\n        }\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-setMintPermissions}.\\n     */\\n    function setMintPermissions(address extension, address permissions) external override adminRequired {\\n        _setMintPermissions(extension, permissions);\\n    }\\n\\n    /**\\n     * @dev See {IERC721CreatorCore-mintBase}.\\n     */\\n    function mintBase(address to) public virtual override nonReentrant adminRequired returns(uint256) {\\n        return _mintBase(to, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721CreatorCore-mintBase}.\\n     */\\n    function mintBase(address to, string calldata uri) public virtual override nonReentrant adminRequired returns(uint256) {\\n        return _mintBase(to, uri);\\n    }\\n\\n    /**\\n     * @dev See {IERC721CreatorCore-mintBaseBatch}.\\n     */\\n    function mintBaseBatch(address to, uint16 count) public virtual override nonReentrant adminRequired returns(uint256[] memory tokenIds) {\\n        tokenIds = new uint256[](count);\\n        for (uint16 i = 0; i < count; i++) {\\n            tokenIds[i] = _mintBase(to, \\\"\\\");\\n        }\\n        return tokenIds;\\n    }\\n\\n    /**\\n     * @dev See {IERC721CreatorCore-mintBaseBatch}.\\n     */\\n    function mintBaseBatch(address to, string[] calldata uris) public virtual override nonReentrant adminRequired returns(uint256[] memory tokenIds) {\\n        tokenIds = new uint256[](uris.length);\\n        for (uint i = 0; i < uris.length; i++) {\\n            tokenIds[i] = _mintBase(to, uris[i]);\\n        }\\n        return tokenIds;\\n    }\\n\\n    /**\\n     * @dev Mint token with no extension\\n     */\\n    function _mintBase(address to, string memory uri) internal virtual returns(uint256 tokenId) {\\n        _tokenCount++;\\n        tokenId = _tokenCount;\\n\\n        // Track the extension that minted the token\\n        _tokensExtension[tokenId] = address(this);\\n\\n        _safeMint(to, tokenId);\\n\\n        if (bytes(uri).length > 0) {\\n            _tokenURIs[tokenId] = uri;\\n        }\\n\\n        // Call post mint\\n        _postMintBase(to, tokenId);\\n        return tokenId;\\n    }\\n\\n\\n    /**\\n     * @dev See {IERC721CreatorCore-mintExtension}.\\n     */\\n    function mintExtension(address to) public virtual override nonReentrant extensionRequired returns(uint256) {\\n        return _mintExtension(to, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721CreatorCore-mintExtension}.\\n     */\\n    function mintExtension(address to, string calldata uri) public virtual override nonReentrant extensionRequired returns(uint256) {\\n        return _mintExtension(to, uri);\\n    }\\n\\n    /**\\n     * @dev See {IERC721CreatorCore-mintExtensionBatch}.\\n     */\\n    function mintExtensionBatch(address to, uint16 count) public virtual override nonReentrant extensionRequired returns(uint256[] memory tokenIds) {\\n        tokenIds = new uint256[](count);\\n        for (uint16 i = 0; i < count; i++) {\\n            tokenIds[i] = _mintExtension(to, \\\"\\\");\\n        }\\n        return tokenIds;\\n    }\\n\\n    /**\\n     * @dev See {IERC721CreatorCore-mintExtensionBatch}.\\n     */\\n    function mintExtensionBatch(address to, string[] calldata uris) public virtual override nonReentrant extensionRequired returns(uint256[] memory tokenIds) {\\n        tokenIds = new uint256[](uris.length);\\n        for (uint i = 0; i < uris.length; i++) {\\n            tokenIds[i] = _mintExtension(to, uris[i]);\\n        }\\n    }\\n    \\n    /**\\n     * @dev Mint token via extension\\n     */\\n    function _mintExtension(address to, string memory uri) internal virtual returns(uint256 tokenId) {\\n        _tokenCount++;\\n        tokenId = _tokenCount;\\n\\n        _checkMintPermissions(to, tokenId);\\n\\n        // Track the extension that minted the token\\n        _tokensExtension[tokenId] = msg.sender;\\n\\n        _safeMint(to, tokenId);\\n\\n        if (bytes(uri).length > 0) {\\n            _tokenURIs[tokenId] = uri;\\n        }\\n        \\n        // Call post mint\\n        _postMintExtension(to, tokenId);\\n        return tokenId;\\n    }\\n\\n    /**\\n     * @dev See {IERC721CreatorCore-tokenExtension}.\\n     */\\n    function tokenExtension(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"Nonexistent token\\\");\\n        return _tokenExtension(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721CreatorCore-burn}.\\n     */\\n    function burn(uint256 tokenId) public virtual override nonReentrant {\\n        require(_isApprovedOrOwner(msg.sender, tokenId), \\\"Caller is not owner nor approved\\\");\\n        address owner = ownerOf(tokenId);\\n        _burn(tokenId);\\n        _postBurn(owner, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-setRoyalties}.\\n     */\\n    function setRoyalties(address payable[] calldata receivers, uint256[] calldata basisPoints) external override adminRequired {\\n        _setRoyaltiesExtension(address(this), receivers, basisPoints);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-setRoyalties}.\\n     */\\n    function setRoyalties(uint256 tokenId, address payable[] calldata receivers, uint256[] calldata basisPoints) external override adminRequired {\\n        require(_exists(tokenId), \\\"Nonexistent token\\\");\\n        _setRoyalties(tokenId, receivers, basisPoints);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-setRoyaltiesExtension}.\\n     */\\n    function setRoyaltiesExtension(address extension, address payable[] calldata receivers, uint256[] calldata basisPoints) external override adminRequired {\\n        _setRoyaltiesExtension(extension, receivers, basisPoints);\\n    }\\n\\n    /**\\n     * @dev {See ICreatorCore-getRoyalties}.\\n     */\\n    function getRoyalties(uint256 tokenId) external view virtual override returns (address payable[] memory, uint256[] memory) {\\n        require(_exists(tokenId), \\\"Nonexistent token\\\");\\n        return _getRoyalties(tokenId);\\n    }\\n\\n    /**\\n     * @dev {See ICreatorCore-getFees}.\\n     */\\n    function getFees(uint256 tokenId) external view virtual override returns (address payable[] memory, uint256[] memory) {\\n        require(_exists(tokenId), \\\"Nonexistent token\\\");\\n        return _getRoyalties(tokenId);\\n    }\\n\\n    /**\\n     * @dev {See ICreatorCore-getFeeRecipients}.\\n     */\\n    function getFeeRecipients(uint256 tokenId) external view virtual override returns (address payable[] memory) {\\n        require(_exists(tokenId), \\\"Nonexistent token\\\");\\n        return _getRoyaltyReceivers(tokenId);\\n    }\\n\\n    /**\\n     * @dev {See ICreatorCore-getFeeBps}.\\n     */\\n    function getFeeBps(uint256 tokenId) external view virtual override returns (uint[] memory) {\\n        require(_exists(tokenId), \\\"Nonexistent token\\\");\\n        return _getRoyaltyBPS(tokenId);\\n    }\\n    \\n    /**\\n     * @dev {See ICreatorCore-royaltyInfo}.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 value) external view virtual override returns (address, uint256) {\\n        require(_exists(tokenId), \\\"Nonexistent token\\\");\\n        return _getRoyaltyInfo(tokenId, value);\\n    } \\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"Nonexistent token\\\");\\n        return _tokenURI(tokenId);\\n    }\\n    \\n}\",\"keccak256\":\"0x29c70beb087c935852b54e9075f9cdf00cfe3a336984df33a78b84c42a242c93\",\"license\":\"MIT\"},\"@manifoldxyz/creator-core-solidity/contracts/core/CreatorCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\n\\nimport \\\"../extensions/ICreatorExtensionTokenURI.sol\\\";\\n\\nimport \\\"./ICreatorCore.sol\\\";\\n\\n/**\\n * @dev Core creator implementation\\n */\\nabstract contract CreatorCore is ReentrancyGuard, ICreatorCore, ERC165 {\\n    using Strings for uint256;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using AddressUpgradeable for address;\\n\\n    uint256 _tokenCount = 0;\\n\\n    // Track registered extensions data\\n    EnumerableSet.AddressSet internal _extensions;\\n    EnumerableSet.AddressSet internal _blacklistedExtensions;\\n    mapping (address => address) internal _extensionPermissions;\\n    mapping (address => bool) internal _extensionApproveTransfers;\\n    \\n    // For tracking which extension a token was minted by\\n    mapping (uint256 => address) internal _tokensExtension;\\n\\n    // The baseURI for a given extension\\n    mapping (address => string) private _extensionBaseURI;\\n    mapping (address => bool) private _extensionBaseURIIdentical;\\n\\n    // The prefix for any tokens with a uri configured\\n    mapping (address => string) private _extensionURIPrefix;\\n\\n    // Mapping for individual token URIs\\n    mapping (uint256 => string) internal _tokenURIs;\\n\\n    \\n    // Royalty configurations\\n    mapping (address => address payable[]) internal _extensionRoyaltyReceivers;\\n    mapping (address => uint256[]) internal _extensionRoyaltyBPS;\\n    mapping (uint256 => address payable[]) internal _tokenRoyaltyReceivers;\\n    mapping (uint256 => uint256[]) internal _tokenRoyaltyBPS;\\n\\n    /**\\n     * External interface identifiers for royalties\\n     */\\n\\n    /**\\n     *  @dev CreatorCore\\n     *\\n     *  bytes4(keccak256('getRoyalties(uint256)')) == 0xbb3bafd6\\n     *\\n     *  => 0xbb3bafd6 = 0xbb3bafd6\\n     */\\n    bytes4 private constant _INTERFACE_ID_ROYALTIES_CREATORCORE = 0xbb3bafd6;\\n\\n    /**\\n     *  @dev Rarible: RoyaltiesV1\\n     *\\n     *  bytes4(keccak256('getFeeRecipients(uint256)')) == 0xb9c4d9fb\\n     *  bytes4(keccak256('getFeeBps(uint256)')) == 0x0ebd4c7f\\n     *\\n     *  => 0xb9c4d9fb ^ 0x0ebd4c7f = 0xb7799584\\n     */\\n    bytes4 private constant _INTERFACE_ID_ROYALTIES_RARIBLE = 0xb7799584;\\n\\n    /**\\n     *  @dev Foundation\\n     *\\n     *  bytes4(keccak256('getFees(uint256)')) == 0xd5a06d4c\\n     *\\n     *  => 0xd5a06d4c = 0xd5a06d4c\\n     */\\n    bytes4 private constant _INTERFACE_ID_ROYALTIES_FOUNDATION = 0xd5a06d4c;\\n\\n    /**\\n     *  @dev EIP-2981\\n     *\\n     * bytes4(keccak256(\\\"royaltyInfo(uint256,uint256)\\\")) == 0x2a55205a\\n     *\\n     * => 0x2a55205a = 0x2a55205a\\n     */\\n    bytes4 private constant _INTERFACE_ID_ROYALTIES_EIP2981 = 0x2a55205a;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(ICreatorCore).interfaceId || super.supportsInterface(interfaceId)\\n            || interfaceId == _INTERFACE_ID_ROYALTIES_CREATORCORE || interfaceId == _INTERFACE_ID_ROYALTIES_RARIBLE\\n            || interfaceId == _INTERFACE_ID_ROYALTIES_FOUNDATION || interfaceId == _INTERFACE_ID_ROYALTIES_EIP2981;\\n    }\\n\\n    /**\\n     * @dev Only allows registered extensions to call the specified function\\n     */\\n    modifier extensionRequired() {\\n        require(_extensions.contains(msg.sender), \\\"Must be registered extension\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows non-blacklisted extensions\\n     */\\n    modifier nonBlacklistRequired(address extension) {\\n        require(!_blacklistedExtensions.contains(extension), \\\"Extension blacklisted\\\");\\n        _;\\n    }   \\n\\n    /**\\n     * @dev See {ICreatorCore-getExtensions}.\\n     */\\n    function getExtensions() external view override returns (address[] memory extensions) {\\n        extensions = new address[](_extensions.length());\\n        for (uint i = 0; i < _extensions.length(); i++) {\\n            extensions[i] = _extensions.at(i);\\n        }\\n        return extensions;\\n    }\\n\\n    /**\\n     * @dev Register an extension\\n     */\\n    function _registerExtension(address extension, string calldata baseURI, bool baseURIIdentical) internal {\\n        require(extension != address(this), \\\"Creator: Invalid\\\");\\n        require(extension.isContract(), \\\"Creator: Extension must be a contract\\\");\\n        if (!_extensions.contains(extension)) {\\n            _extensionBaseURI[extension] = baseURI;\\n            _extensionBaseURIIdentical[extension] = baseURIIdentical;\\n            emit ExtensionRegistered(extension, msg.sender);\\n            _extensions.add(extension);\\n        }\\n    }\\n\\n    /**\\n     * @dev Unregister an extension\\n     */\\n    function _unregisterExtension(address extension) internal {\\n       if (_extensions.contains(extension)) {\\n           emit ExtensionUnregistered(extension, msg.sender);\\n           _extensions.remove(extension);\\n       }\\n    }\\n\\n    /**\\n     * @dev Blacklist an extension\\n     */\\n    function _blacklistExtension(address extension) internal {\\n       require(extension != address(this), \\\"Cannot blacklist yourself\\\");\\n       if (_extensions.contains(extension)) {\\n           emit ExtensionUnregistered(extension, msg.sender);\\n           _extensions.remove(extension);\\n       }\\n       if (!_blacklistedExtensions.contains(extension)) {\\n           emit ExtensionBlacklisted(extension, msg.sender);\\n           _blacklistedExtensions.add(extension);\\n       }\\n    }\\n\\n    /**\\n     * @dev Set base token uri for an extension\\n     */\\n    function _setBaseTokenURIExtension(string calldata uri, bool identical) internal {\\n        _extensionBaseURI[msg.sender] = uri;\\n        _extensionBaseURIIdentical[msg.sender] = identical;\\n    }\\n\\n    /**\\n     * @dev Set token uri prefix for an extension\\n     */\\n    function _setTokenURIPrefixExtension(string calldata prefix) internal {\\n        _extensionURIPrefix[msg.sender] = prefix;\\n    }\\n\\n    /**\\n     * @dev Set token uri for a token of an extension\\n     */\\n    function _setTokenURIExtension(uint256 tokenId, string calldata uri) internal {\\n        require(_tokensExtension[tokenId] == msg.sender, \\\"Invalid token\\\");\\n        _tokenURIs[tokenId] = uri;\\n    }\\n\\n    /**\\n     * @dev Set base token uri for tokens with no extension\\n     */\\n    function _setBaseTokenURI(string memory uri) internal {\\n        _extensionBaseURI[address(this)] = uri;\\n    }\\n\\n    /**\\n     * @dev Set token uri prefix for tokens with no extension\\n     */\\n    function _setTokenURIPrefix(string calldata prefix) internal {\\n        _extensionURIPrefix[address(this)] = prefix;\\n    }\\n\\n\\n    /**\\n     * @dev Set token uri for a token with no extension\\n     */\\n    function _setTokenURI(uint256 tokenId, string calldata uri) internal {\\n        require(_tokensExtension[tokenId] == address(this), \\\"Invalid token\\\");\\n        _tokenURIs[tokenId] = uri;\\n    }\\n\\n    /**\\n     * @dev Retrieve a token's URI\\n     */\\n    function _tokenURI(uint256 tokenId) internal view returns (string memory) {\\n        address extension = _tokensExtension[tokenId];\\n        require(!_blacklistedExtensions.contains(extension), \\\"Extension blacklisted\\\");\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            if (bytes(_extensionURIPrefix[extension]).length != 0) {\\n                return string(abi.encodePacked(_extensionURIPrefix[extension],_tokenURIs[tokenId]));\\n            }\\n            return _tokenURIs[tokenId];\\n        }\\n\\n        if (ERC165Checker.supportsInterface(extension, type(ICreatorExtensionTokenURI).interfaceId)) {\\n            return ICreatorExtensionTokenURI(extension).tokenURI(address(this), tokenId);\\n        }\\n\\n        if (!_extensionBaseURIIdentical[extension]) {\\n            return string(abi.encodePacked(_extensionBaseURI[extension], tokenId.toString()));\\n        } else {\\n            return _extensionBaseURI[extension];\\n        }\\n    }\\n\\n    /**\\n     * Get token extension\\n     */\\n    function _tokenExtension(uint256 tokenId) internal view returns (address extension) {\\n        extension = _tokensExtension[tokenId];\\n\\n        require(extension != address(this), \\\"No extension for token\\\");\\n        require(!_blacklistedExtensions.contains(extension), \\\"Extension blacklisted\\\");\\n\\n        return extension;\\n    }\\n\\n    /**\\n     * Helper to get royalties for a token\\n     */\\n    function _getRoyalties(uint256 tokenId) view internal returns (address payable[] storage, uint256[] storage) {\\n        return (_getRoyaltyReceivers(tokenId), _getRoyaltyBPS(tokenId));\\n    }\\n\\n    /**\\n     * Helper to get royalty receivers for a token\\n     */\\n    function _getRoyaltyReceivers(uint256 tokenId) view internal returns (address payable[] storage) {\\n        if (_tokenRoyaltyReceivers[tokenId].length > 0) {\\n            return _tokenRoyaltyReceivers[tokenId];\\n        } else if (_extensionRoyaltyReceivers[_tokensExtension[tokenId]].length > 0) {\\n            return _extensionRoyaltyReceivers[_tokensExtension[tokenId]];\\n        }\\n        return _extensionRoyaltyReceivers[address(this)];        \\n    }\\n\\n    /**\\n     * Helper to get royalty basis points for a token\\n     */\\n    function _getRoyaltyBPS(uint256 tokenId) view internal returns (uint256[] storage) {\\n        if (_tokenRoyaltyBPS[tokenId].length > 0) {\\n            return _tokenRoyaltyBPS[tokenId];\\n        } else if (_extensionRoyaltyBPS[_tokensExtension[tokenId]].length > 0) {\\n            return _extensionRoyaltyBPS[_tokensExtension[tokenId]];\\n        }\\n        return _extensionRoyaltyBPS[address(this)];        \\n    }\\n\\n    function _getRoyaltyInfo(uint256 tokenId, uint256 value) view internal returns (address receiver, uint256 amount){\\n        address payable[] storage receivers = _getRoyaltyReceivers(tokenId);\\n        require(receivers.length <= 1, \\\"More than 1 royalty receiver\\\");\\n        \\n        if (receivers.length == 0) {\\n            return (address(this), 0);\\n        }\\n        return (receivers[0], _getRoyaltyBPS(tokenId)[0]*value/10000);\\n    }\\n\\n    /**\\n     * Set royalties for a token\\n     */\\n    function _setRoyalties(uint256 tokenId, address payable[] calldata receivers, uint256[] calldata basisPoints) internal {\\n        require(receivers.length == basisPoints.length, \\\"Invalid input\\\");\\n        uint256 totalBasisPoints;\\n        for (uint i = 0; i < basisPoints.length; i++) {\\n            totalBasisPoints += basisPoints[i];\\n        }\\n        require(totalBasisPoints < 10000, \\\"Invalid total royalties\\\");\\n        _tokenRoyaltyReceivers[tokenId] = receivers;\\n        _tokenRoyaltyBPS[tokenId] = basisPoints;\\n        emit RoyaltiesUpdated(tokenId, receivers, basisPoints);\\n    }\\n\\n    /**\\n     * Set royalties for all tokens of an extension\\n     */\\n    function _setRoyaltiesExtension(address extension, address payable[] calldata receivers, uint256[] calldata basisPoints) internal {\\n        require(receivers.length == basisPoints.length, \\\"Invalid input\\\");\\n        uint256 totalBasisPoints;\\n        for (uint i = 0; i < basisPoints.length; i++) {\\n            totalBasisPoints += basisPoints[i];\\n        }\\n        require(totalBasisPoints < 10000, \\\"Invalid total royalties\\\");\\n        _extensionRoyaltyReceivers[extension] = receivers;\\n        _extensionRoyaltyBPS[extension] = basisPoints;\\n        if (extension == address(this)) {\\n            emit DefaultRoyaltiesUpdated(receivers, basisPoints);\\n        } else {\\n            emit ExtensionRoyaltiesUpdated(extension, receivers, basisPoints);\\n        }\\n    }\\n\\n\\n}\\n\",\"keccak256\":\"0x903427a3f59de8a7a1f67dc47ceb504b31cfbf51e1fdf0d9f6f66f73768cd869\",\"license\":\"MIT\"},\"@manifoldxyz/creator-core-solidity/contracts/core/ERC721CreatorCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport \\\"../extensions/ERC721/IERC721CreatorExtensionApproveTransfer.sol\\\";\\nimport \\\"../extensions/ERC721/IERC721CreatorExtensionBurnable.sol\\\";\\nimport \\\"../permissions/ERC721/IERC721CreatorMintPermissions.sol\\\";\\nimport \\\"./IERC721CreatorCore.sol\\\";\\nimport \\\"./CreatorCore.sol\\\";\\n\\n/**\\n * @dev Core ERC721 creator implementation\\n */\\nabstract contract ERC721CreatorCore is CreatorCore, IERC721CreatorCore {\\n\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(CreatorCore, IERC165) returns (bool) {\\n        return interfaceId == type(IERC721CreatorCore).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-setApproveTransferExtension}.\\n     */\\n    function setApproveTransferExtension(bool enabled) external override extensionRequired {\\n        require(!enabled || ERC165Checker.supportsInterface(msg.sender, type(IERC721CreatorExtensionApproveTransfer).interfaceId), \\\"Extension must implement IERC721CreatorExtensionApproveTransfer\\\");\\n        if (_extensionApproveTransfers[msg.sender] != enabled) {\\n            _extensionApproveTransfers[msg.sender] = enabled;\\n            emit ExtensionApproveTransferUpdated(msg.sender, enabled);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set mint permissions for an extension\\n     */\\n    function _setMintPermissions(address extension, address permissions) internal {\\n        require(_extensions.contains(extension), \\\"CreatorCore: Invalid extension\\\");\\n        require(permissions == address(0x0) || ERC165Checker.supportsInterface(permissions, type(IERC721CreatorMintPermissions).interfaceId), \\\"Invalid address\\\");\\n        if (_extensionPermissions[extension] != permissions) {\\n            _extensionPermissions[extension] = permissions;\\n            emit MintPermissionsUpdated(extension, permissions, msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * Check if an extension can mint\\n     */\\n    function _checkMintPermissions(address to, uint256 tokenId) internal {\\n        if (_extensionPermissions[msg.sender] != address(0x0)) {\\n            IERC721CreatorMintPermissions(_extensionPermissions[msg.sender]).approveMint(msg.sender, to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * Override for post mint actions\\n     */\\n    function _postMintBase(address, uint256) internal virtual {}\\n\\n    \\n    /**\\n     * Override for post mint actions\\n     */\\n    function _postMintExtension(address, uint256) internal virtual {}\\n\\n    /**\\n     * Post-burning callback and metadata cleanup\\n     */\\n    function _postBurn(address owner, uint256 tokenId) internal virtual {\\n        // Callback to originating extension if needed\\n        if (_tokensExtension[tokenId] != address(this)) {\\n           if (ERC165Checker.supportsInterface(_tokensExtension[tokenId], type(IERC721CreatorExtensionBurnable).interfaceId)) {\\n               IERC721CreatorExtensionBurnable(_tokensExtension[tokenId]).onBurn(owner, tokenId);\\n           }\\n        }\\n        // Clear metadata (if any)\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }    \\n        // Delete token origin extension tracking\\n        delete _tokensExtension[tokenId];    \\n    }\\n\\n    /**\\n     * Approve a transfer\\n     */\\n    function _approveTransfer(address from, address to, uint256 tokenId) internal {\\n       if (_extensionApproveTransfers[_tokensExtension[tokenId]]) {\\n           require(IERC721CreatorExtensionApproveTransfer(_tokensExtension[tokenId]).approveTransfer(from, to, tokenId), \\\"ERC721Creator: Extension approval failure\\\");\\n       }\\n    }\\n\\n}\",\"keccak256\":\"0x8db13d03b181cb9cef1d44f30faa28b8cc386589d0b8ecc2f7b31a230e7fc5ad\",\"license\":\"MIT\"},\"@manifoldxyz/creator-core-solidity/contracts/core/ICreatorCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Core creator interface\\n */\\ninterface ICreatorCore is IERC165 {\\n\\n    event ExtensionRegistered(address indexed extension, address indexed sender);\\n    event ExtensionUnregistered(address indexed extension, address indexed sender);\\n    event ExtensionBlacklisted(address indexed extension, address indexed sender);\\n    event MintPermissionsUpdated(address indexed extension, address indexed permissions, address indexed sender);\\n    event RoyaltiesUpdated(uint256 indexed tokenId, address payable[] receivers, uint256[] basisPoints);\\n    event DefaultRoyaltiesUpdated(address payable[] receivers, uint256[] basisPoints);\\n    event ExtensionRoyaltiesUpdated(address indexed extension, address payable[] receivers, uint256[] basisPoints);\\n    event ExtensionApproveTransferUpdated(address indexed extension, bool enabled);\\n\\n    /**\\n     * @dev gets address of all extensions\\n     */\\n    function getExtensions() external view returns (address[] memory);\\n\\n    /**\\n     * @dev add an extension.  Can only be called by contract owner or admin.\\n     * extension address must point to a contract implementing ICreatorExtension.\\n     * Returns True if newly added, False if already added.\\n     */\\n    function registerExtension(address extension, string calldata baseURI) external;\\n\\n    /**\\n     * @dev add an extension.  Can only be called by contract owner or admin.\\n     * extension address must point to a contract implementing ICreatorExtension.\\n     * Returns True if newly added, False if already added.\\n     */\\n    function registerExtension(address extension, string calldata baseURI, bool baseURIIdentical) external;\\n\\n    /**\\n     * @dev add an extension.  Can only be called by contract owner or admin.\\n     * Returns True if removed, False if already removed.\\n     */\\n    function unregisterExtension(address extension) external;\\n\\n    /**\\n     * @dev blacklist an extension.  Can only be called by contract owner or admin.\\n     * This function will destroy all ability to reference the metadata of any tokens created\\n     * by the specified extension. It will also unregister the extension if needed.\\n     * Returns True if removed, False if already removed.\\n     */\\n    function blacklistExtension(address extension) external;\\n\\n    /**\\n     * @dev set the baseTokenURI of an extension.  Can only be called by extension.\\n     */\\n    function setBaseTokenURIExtension(string calldata uri) external;\\n\\n    /**\\n     * @dev set the baseTokenURI of an extension.  Can only be called by extension.\\n     * For tokens with no uri configured, tokenURI will return \\\"uri+tokenId\\\"\\n     */\\n    function setBaseTokenURIExtension(string calldata uri, bool identical) external;\\n\\n    /**\\n     * @dev set the common prefix of an extension.  Can only be called by extension.\\n     * If configured, and a token has a uri set, tokenURI will return \\\"prefixURI+tokenURI\\\"\\n     * Useful if you want to use ipfs/arweave\\n     */\\n    function setTokenURIPrefixExtension(string calldata prefix) external;\\n\\n    /**\\n     * @dev set the tokenURI of a token extension.  Can only be called by extension that minted token.\\n     */\\n    function setTokenURIExtension(uint256 tokenId, string calldata uri) external;\\n\\n    /**\\n     * @dev set the tokenURI of a token extension for multiple tokens.  Can only be called by extension that minted token.\\n     */\\n    function setTokenURIExtension(uint256[] memory tokenId, string[] calldata uri) external;\\n\\n    /**\\n     * @dev set the baseTokenURI for tokens with no extension.  Can only be called by owner/admin.\\n     * For tokens with no uri configured, tokenURI will return \\\"uri+tokenId\\\"\\n     */\\n    function setBaseTokenURI(string calldata uri) external;\\n\\n    /**\\n     * @dev set the common prefix for tokens with no extension.  Can only be called by owner/admin.\\n     * If configured, and a token has a uri set, tokenURI will return \\\"prefixURI+tokenURI\\\"\\n     * Useful if you want to use ipfs/arweave\\n     */\\n    function setTokenURIPrefix(string calldata prefix) external;\\n\\n    /**\\n     * @dev set the tokenURI of a token with no extension.  Can only be called by owner/admin.\\n     */\\n    function setTokenURI(uint256 tokenId, string calldata uri) external;\\n\\n    /**\\n     * @dev set the tokenURI of multiple tokens with no extension.  Can only be called by owner/admin.\\n     */\\n    function setTokenURI(uint256[] memory tokenIds, string[] calldata uris) external;\\n\\n    /**\\n     * @dev set a permissions contract for an extension.  Used to control minting.\\n     */\\n    function setMintPermissions(address extension, address permissions) external;\\n\\n    /**\\n     * @dev Configure so transfers of tokens created by the caller (must be extension) gets approval\\n     * from the extension before transferring\\n     */\\n    function setApproveTransferExtension(bool enabled) external;\\n\\n    /**\\n     * @dev get the extension of a given token\\n     */\\n    function tokenExtension(uint256 tokenId) external view returns (address);\\n\\n    /**\\n     * @dev Set default royalties\\n     */\\n    function setRoyalties(address payable[] calldata receivers, uint256[] calldata basisPoints) external;\\n\\n    /**\\n     * @dev Set royalties of a token\\n     */\\n    function setRoyalties(uint256 tokenId, address payable[] calldata receivers, uint256[] calldata basisPoints) external;\\n\\n    /**\\n     * @dev Set royalties of an extension\\n     */\\n    function setRoyaltiesExtension(address extension, address payable[] calldata receivers, uint256[] calldata basisPoints) external;\\n\\n    /**\\n     * @dev Get royalites of a token.  Returns list of receivers and basisPoints\\n     */\\n    function getRoyalties(uint256 tokenId) external view returns (address payable[] memory, uint256[] memory);\\n    \\n    // Royalty support for various other standards\\n    function getFeeRecipients(uint256 tokenId) external view returns (address payable[] memory);\\n    function getFeeBps(uint256 tokenId) external view returns (uint[] memory);\\n    function getFees(uint256 tokenId) external view returns (address payable[] memory, uint256[] memory);\\n    function royaltyInfo(uint256 tokenId, uint256 value) external view returns (address, uint256);\\n\\n}\\n\",\"keccak256\":\"0x2dc54667c7182b70fbfcb5c0775b098d9b6b652cbebdd55d2ef7e4676b84af4b\",\"license\":\"MIT\"},\"@manifoldxyz/creator-core-solidity/contracts/core/IERC721CreatorCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"./ICreatorCore.sol\\\";\\n\\n/**\\n * @dev Core ERC721 creator interface\\n */\\ninterface IERC721CreatorCore is ICreatorCore {\\n\\n    /**\\n     * @dev mint a token with no extension. Can only be called by an admin.\\n     * Returns tokenId minted\\n     */\\n    function mintBase(address to) external returns (uint256);\\n\\n    /**\\n     * @dev mint a token with no extension. Can only be called by an admin.\\n     * Returns tokenId minted\\n     */\\n    function mintBase(address to, string calldata uri) external returns (uint256);\\n\\n    /**\\n     * @dev batch mint a token with no extension. Can only be called by an admin.\\n     * Returns tokenId minted\\n     */\\n    function mintBaseBatch(address to, uint16 count) external returns (uint256[] memory);\\n\\n    /**\\n     * @dev batch mint a token with no extension. Can only be called by an admin.\\n     * Returns tokenId minted\\n     */\\n    function mintBaseBatch(address to, string[] calldata uris) external returns (uint256[] memory);\\n\\n    /**\\n     * @dev mint a token. Can only be called by a registered extension.\\n     * Returns tokenId minted\\n     */\\n    function mintExtension(address to) external returns (uint256);\\n\\n    /**\\n     * @dev mint a token. Can only be called by a registered extension.\\n     * Returns tokenId minted\\n     */\\n    function mintExtension(address to, string calldata uri) external returns (uint256);\\n\\n    /**\\n     * @dev batch mint a token. Can only be called by a registered extension.\\n     * Returns tokenIds minted\\n     */\\n    function mintExtensionBatch(address to, uint16 count) external returns (uint256[] memory);\\n\\n    /**\\n     * @dev batch mint a token. Can only be called by a registered extension.\\n     * Returns tokenId minted\\n     */\\n    function mintExtensionBatch(address to, string[] calldata uris) external returns (uint256[] memory);\\n\\n    /**\\n     * @dev burn a token. Can only be called by token owner or approved address.\\n     * On burn, calls back to the registered extension's onBurn method\\n     */\\n    function burn(uint256 tokenId) external;\\n\\n}\",\"keccak256\":\"0xf4f06a129d0081c2d6b2decc23ef16dccf4b723822ca64ab520f56b71fd16f6c\",\"license\":\"MIT\"},\"@manifoldxyz/creator-core-solidity/contracts/extensions/ERC721/IERC721CreatorExtensionApproveTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * Implement this if you want your extension to approve a transfer\\n */\\ninterface IERC721CreatorExtensionApproveTransfer is IERC165 {\\n\\n    /**\\n     * @dev Set whether or not the creator will check the extension for approval of token transfer\\n     */\\n    function setApproveTransfer(address creator, bool enabled) external;\\n\\n    /**\\n     * @dev Called by creator contract to approve a transfer\\n     */\\n    function approveTransfer(address from, address to, uint256 tokenId) external returns (bool);\\n}\\n\",\"keccak256\":\"0x121c7ba9cde35cea09df540e0d9a375a056a6a107033cea3a9fb18bc8acbdf07\",\"license\":\"MIT\"},\"@manifoldxyz/creator-core-solidity/contracts/extensions/ERC721/IERC721CreatorExtensionBurnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Your extension is required to implement this interface if it wishes\\n * to receive the onBurn callback whenever a token the extension created is\\n * burned\\n */\\ninterface IERC721CreatorExtensionBurnable is IERC165 {\\n    /**\\n     * @dev callback handler for burn events\\n     */\\n    function onBurn(address owner, uint256 tokenId) external;\\n}\",\"keccak256\":\"0xfe990176cd9da70d2241bb28b07155555bc1258350a809dc45165b4ad540d6c0\",\"license\":\"MIT\"},\"@manifoldxyz/creator-core-solidity/contracts/extensions/ICreatorExtensionTokenURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Implement this if you want your extension to have overloadable URI's\\n */\\ninterface ICreatorExtensionTokenURI is IERC165 {\\n\\n    /**\\n     * Get the uri for a given creator/tokenId\\n     */\\n    function tokenURI(address creator, uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6c8ca804ee7dea9d78f0dacdd9233b1b75ca2b2fa517f52f0fdf6beb34780a51\",\"license\":\"MIT\"},\"@manifoldxyz/creator-core-solidity/contracts/permissions/ERC721/IERC721CreatorMintPermissions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721Creator compliant extension contracts.\\n */\\ninterface IERC721CreatorMintPermissions is IERC165 {\\n\\n    /**\\n     * @dev get approval to mint\\n     */\\n    function approveMint(address extension, address to, uint256 tokenId) external;\\n}\",\"keccak256\":\"0x9df5ea824141ac0225b240688d6b964d31e4b525c221e4e02b93955500996115\",\"license\":\"MIT\"},\"@manifoldxyz/libraries-solidity/contracts/access/AdminControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./IAdminControl.sol\\\";\\n\\nabstract contract AdminControl is Ownable, IAdminControl, ERC165 {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    // Track registered admins\\n    EnumerableSet.AddressSet private _admins;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IAdminControl).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Only allows approved admins to call the specified function\\n     */\\n    modifier adminRequired() {\\n        require(owner() == msg.sender || _admins.contains(msg.sender), \\\"AdminControl: Must be owner or admin\\\");\\n        _;\\n    }   \\n\\n    /**\\n     * @dev See {IAdminControl-getAdmins}.\\n     */\\n    function getAdmins() external view override returns (address[] memory admins) {\\n        admins = new address[](_admins.length());\\n        for (uint i = 0; i < _admins.length(); i++) {\\n            admins[i] = _admins.at(i);\\n        }\\n        return admins;\\n    }\\n\\n    /**\\n     * @dev See {IAdminControl-approveAdmin}.\\n     */\\n    function approveAdmin(address admin) external override onlyOwner {\\n        if (!_admins.contains(admin)) {\\n            emit AdminApproved(admin, msg.sender);\\n            _admins.add(admin);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IAdminControl-revokeAdmin}.\\n     */\\n    function revokeAdmin(address admin) external override onlyOwner {\\n        if (_admins.contains(admin)) {\\n            emit AdminRevoked(admin, msg.sender);\\n            _admins.remove(admin);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IAdminControl-isAdmin}.\\n     */\\n    function isAdmin(address admin) public override view returns (bool) {\\n        return (owner() == admin || _admins.contains(admin));\\n    }\\n\\n}\",\"keccak256\":\"0xaed5e7784e33745ab1b16f1d87b22084a8b25d531c1dcb8dc41fc2a89e2617da\",\"license\":\"MIT\"},\"@manifoldxyz/libraries-solidity/contracts/access/IAdminControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for admin control\\n */\\ninterface IAdminControl is IERC165 {\\n\\n    event AdminApproved(address indexed account, address indexed sender);\\n    event AdminRevoked(address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev gets address of all admins\\n     */\\n    function getAdmins() external view returns (address[] memory);\\n\\n    /**\\n     * @dev add an admin.  Can only be called by contract owner.\\n     */\\n    function approveAdmin(address admin) external;\\n\\n    /**\\n     * @dev remove an admin.  Can only be called by contract owner.\\n     */\\n    function revokeAdmin(address admin) external;\\n\\n    /**\\n     * @dev checks whether or not given address is an admin\\n     * Returns True if they are\\n     */\\n    function isAdmin(address admin) external view returns (bool);\\n\\n}\",\"keccak256\":\"0x7cc2e4e7d9052532f445e62ec1fa2f05cc0f5d1d8ee1fea913b43a132277bf2f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface,\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            _supportsERC165Interface(account, type(IERC165).interfaceId) &&\\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in _interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n        (bool success, bytes memory result) = account.staticcall{gas: 30000}(encodedParams);\\n        if (result.length < 32) return false;\\n        return success && abi.decode(result, (bool));\\n    }\\n}\\n\",\"keccak256\":\"0xaf583f9537cf446d08c33909e52313d349a831f6b88f20361b76474e40b4c36f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"contracts/MFWUniques.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@manifoldxyz/creator-core-solidity/contracts/ERC721Creator.sol\\\";\\n\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n// @                  @@@@@@#                  @\\n// @                  @@@@@@#                  @\\n// @      @@@@@@      @@@@@@#      @@@@@@      @\\n// @      @@@@@@      @@@@@@#      @@@@@@      @\\n// @      @@@@@@      @@@@@@#      @@@@@@      @\\n// @      @@@@@@      @@@@@@#      @@@@@@      @\\n// @      @@@@@@      @@@@@@#      @@@@@@      @\\n// @      @@@@@@      @@@@@@#      @@@@@@      @\\n// @      @@@@@@      @@@@@@#      @@@@@@      @\\n// @      @@@@@@      @@@@@@#      @@@@@@      @\\n// @      @@@@@@      @@@@@@#      @@@@@@      @\\n// @      @@@@@@      @@@@@@#      @@@@@@      @\\n// @      @@@@@@      @@@@@@#      @@@@@@      @\\n// @      @@@@@@      @@@@@@#      @@@@@@      @\\n// @      @@@@@@      @@@@@@#      @@@@@@      @\\n// @      @@@@@@                   @@@@@@      @\\n// @      @@@@@@                   @@@@@@      @\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n\\n/// @title MFW wearables contract\\ncontract MFWUniques is ERC721Creator {\\n    constructor(string memory _name, string memory _symbol) ERC721Creator(_name, _symbol) {}\\n}\",\"keccak256\":\"0xec8d794a68261763a340c21e2b421e7dc65014c2d8f9f71f27c3f44cadcb5728\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526000600a553480156200001657600080fd5b50604051620051d5380380620051d583398101604081905262000039916200022d565b81818181620000483362000084565b60018055815162000061906004906020850190620000d4565b50805162000077906005906020840190620000d4565b50505050505050620002e7565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b828054620000e29062000294565b90600052602060002090601f01602090048101928262000106576000855562000151565b82601f106200012157805160ff191683800117855562000151565b8280016001018555821562000151579182015b828111156200015157825182559160200191906001019062000134565b506200015f92915062000163565b5090565b5b808211156200015f576000815560010162000164565b600082601f8301126200018b578081fd5b81516001600160401b0380821115620001a857620001a8620002d1565b604051601f8301601f19908116603f01168101908282118183101715620001d357620001d3620002d1565b81604052838152602092508683858801011115620001ef578485fd5b8491505b83821015620002125785820183015181830184015290820190620001f3565b838211156200022357848385830101525b9695505050505050565b6000806040838503121562000240578182fd5b82516001600160401b038082111562000257578384fd5b62000265868387016200017a565b935060208501519150808211156200027b578283fd5b506200028a858286016200017a565b9150509250929050565b600181811c90821680620002a957607f821691505b60208210811415620002cb57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b614ede80620002f76000396000f3fe608060405234801561001057600080fd5b50600436106102e25760003560e01c806370a0823111610188578063ad2d0ddd116100e4578063d5a06d4c11610092578063d5a06d4c14610668578063e00aab4b146106af578063e92a89f6146106c2578063e985e9c5146106d5578063f0cdc499146106e8578063f2fde38b146106fb578063fe2e1f581461070e57600080fd5b8063ad2d0ddd1461060f578063b0fe87c914610622578063b88d4fde14610635578063b9c4d9fb14610648578063bb3bafd614610668578063c87b56dd14610689578063ce8aee9d1461069c57600080fd5b806383b7db631161014157806383b7db63146105ab5780638da5cb5b146105b357806395d89b41146105bb57806399e0dd7c146105c3578063a22cb465146105d6578063aafb2d44146105e9578063ac0c8cfa146105fc57600080fd5b806370a0823114610544578063715018a61461055757806372ff03d31461055f5780637884af44146105725780637aa15f161461058557806382dcc0c81461059857600080fd5b80632d345670116102425780633f0f37f6116101f05780633f0f37f6146104bf57806342842e0e146104d257806342966c68146104e557806361e5bc6b146104f85780636352211e1461050b57806366d1e9d01461051e5780636d73e6691461053157600080fd5b80632d3456701461043857806330176e131461044b5780633071a0f91461045e57806331ae450b14610471578063332dd1ae1461048657806338e52e78146104995780633e6134b8146104ac57600080fd5b8063162094c41161029f578063162094c41461039757806320e4afe2146103aa578063239be317146103bd57806323b872dd146103d057806324d7806c146103e35780632928ca58146103f65780632a55205a1461041757600080fd5b806301ffc9a7146102e757806302e7afb71461030f57806306fdde0314610324578063081812fc14610339578063095ea7b3146103645780630ebd4c7f14610377575b600080fd5b6102fa6102f53660046144fb565b610721565b60405190151581526020015b60405180910390f35b61032261031d36600461405b565b610750565b005b61032c6107a5565b60405161030691906149e8565b61034c610347366004614638565b610837565b6040516001600160a01b039091168152602001610306565b610322610372366004614370565b6108bf565b61038a610385366004614638565b6109d0565b60405161030691906149d5565b6103226103a5366004614684565b610a56565b6103226103b8366004614650565b610aa1565b61034c6103cb366004614638565b610b1a565b6103226103de3660046140af565b610b4a565b6102fa6103f136600461405b565b610b7b565b61040961040436600461405b565b610baa565b604051908152602001610306565b61042a6104253660046146b4565b610c1e565b6040516103069291906148b8565b61032261044636600461405b565b610c5c565b610322610459366004614533565b610ce0565b61032261046c366004614293565b610d5f565b610479610ddb565b60405161030691906148d1565b61032261049436600461439b565b610ea5565b61038a6104a7366004614214565b610ef2565b6103226104ba366004614533565b611059565b6103226104cd3660046142d8565b61108c565b6103226104e03660046140af565b611101565b6103226104f3366004614638565b61111c565b610322610506366004614403565b6111c2565b61034c610519366004614638565b611289565b61032261052c366004614533565b611300565b61032261053f36600461405b565b611331565b61040961055236600461405b565b6113b0565b610322611437565b61040961056d36600461405b565b611472565b610409610580366004614293565b6114f5565b61038a610593366004614214565b6115ab565b6103226105a6366004614572565b61171f565b610479611751565b61034c611817565b61032c611826565b6103226105d1366004614533565b611835565b6103226105e4366004614266565b61187f565b6103226105f7366004614403565b611940565b61032261060a3660046144c3565b611a20565b61038a61061d36600461433d565b611b44565b610322610630366004614195565b611c7c565b6103226106433660046140ef565b611cc9565b61065b610656366004614638565b611cfb565b604051610306919061499d565b61067b610676366004614638565b611d8a565b6040516103069291906149b0565b61032c610697366004614638565b611e6e565b6103226106aa36600461405b565b611e9e565b61038a6106bd36600461433d565b611ee7565b6103226106d0366004614684565b611ffb565b6102fa6106e3366004614077565b61202d565b6103226106f6366004614077565b61205b565b61032261070936600461405b565b6120a5565b61040961071c366004614293565b612142565b600061072c826121d3565b8061073b575061073b826121f8565b8061074a575061074a82612233565b92915050565b33610759611817565b6001600160a01b031614806107745750610774600233612268565b6107995760405162461bcd60e51b815260040161079090614be3565b60405180910390fd5b6107a28161228d565b50565b6060600480546107b490614d87565b80601f01602080910402602001604051908101604052809291908181526020018280546107e090614d87565b801561082d5780601f106108025761010080835404028352916020019161082d565b820191906000526020600020905b81548152906001019060200180831161081057829003601f168201915b5050505050905090565b600061084282612385565b6108a35760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610790565b506000908152600860205260409020546001600160a01b031690565b60006108ca82611289565b9050806001600160a01b0316836001600160a01b031614156109385760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610790565b336001600160a01b03821614806109545750610954813361202d565b6109c15760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776044820152771b995c881b9bdc88185c1c1c9bdd995908199bdc88185b1b60421b6064820152608401610790565b6109cb83836123a2565b505050565b60606109db82612385565b6109f75760405162461bcd60e51b815260040161079090614ada565b610a0082612410565b805480602002602001604051908101604052809291908181526020018280548015610a4a57602002820191906000526020600020905b815481526020019060010190808311610a36575b50505050509050919050565b33610a5f611817565b6001600160a01b03161480610a7a5750610a7a600233612268565b610a965760405162461bcd60e51b815260040161079090614be3565b6109cb83838361249c565b33610aaa611817565b6001600160a01b03161480610ac55750610ac5600233612268565b610ae15760405162461bcd60e51b815260040161079090614be3565b610aea85612385565b610b065760405162461bcd60e51b815260040161079090614ada565b610b1385858585856124eb565b5050505050565b6000610b2582612385565b610b415760405162461bcd60e51b815260040161079090614ada565b61074a826125f8565b610b543382612686565b610b705760405162461bcd60e51b815260040161079090614b92565b6109cb838383612750565b6000816001600160a01b0316610b8f611817565b6001600160a01b0316148061074a575061074a600283612268565b600060026001541415610bcf5760405162461bcd60e51b815260040161079090614c27565b6002600155610bdf600b33612268565b610bfb5760405162461bcd60e51b815260040161079090614aa3565b610c1482604051806020016040528060008152506128e9565b6001805592915050565b600080610c2a84612385565b610c465760405162461bcd60e51b815260040161079090614ada565b610c508484612963565b915091505b9250929050565b33610c65611817565b6001600160a01b031614610c8b5760405162461bcd60e51b815260040161079090614b05565b610c96600282612268565b156107a25760405133906001600160a01b038316907f7c0c3c84c67c85fcac635147348bfe374c24a1a93d0366d1cfe9d8853cbf89d590600090a3610cdc600282612a67565b5050565b33610ce9611817565b6001600160a01b03161480610d045750610d04600233612268565b610d205760405162461bcd60e51b815260040161079090614be3565b610cdc82828080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612a7c92505050565b33610d68611817565b6001600160a01b03161480610d835750610d83600233612268565b610d9f5760405162461bcd60e51b815260040161079090614be3565b82610dab600d82612268565b15610dc85760405162461bcd60e51b815260040161079090614a4d565b610dd58484846000612a9c565b50505050565b6060610de76002612bd7565b6001600160401b03811115610e0c57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610e35578160200160208202803683370190505b50905060005b610e456002612bd7565b811015610ea157610e57600282612be1565b828281518110610e7757634e487b7160e01b600052603260045260246000fd5b6001600160a01b039092166020928302919091019091015280610e9981614dde565b915050610e3b565b5090565b33610eae611817565b6001600160a01b03161480610ec95750610ec9600233612268565b610ee55760405162461bcd60e51b815260040161079090614be3565b610dd53085858585612bed565b606060026001541415610f175760405162461bcd60e51b815260040161079090614c27565b6002600155610f27600b33612268565b610f435760405162461bcd60e51b815260040161079090614aa3565b816001600160401b03811115610f6957634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610f92578160200160208202803683370190505b50905060005b8281101561104d5761101085858584818110610fc457634e487b7160e01b600052603260045260246000fd5b9050602002810190610fd69190614c5e565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506128e992505050565b82828151811061103057634e487b7160e01b600052603260045260246000fd5b60209081029190910101528061104581614dde565b915050610f98565b50600180559392505050565b611064600b33612268565b6110805760405162461bcd60e51b815260040161079090614aa3565b610cdc82826000612d62565b33611095611817565b6001600160a01b031614806110b057506110b0600233612268565b6110cc5760405162461bcd60e51b815260040161079090614be3565b836110d8600d82612268565b156110f55760405162461bcd60e51b815260040161079090614a4d565b610b1385858585612a9c565b6109cb83838360405180602001604052806000815250611cc9565b6002600154141561113f5760405162461bcd60e51b815260040161079090614c27565b600260015561114e3382612686565b61119a5760405162461bcd60e51b815260206004820181905260248201527f43616c6c6572206973206e6f74206f776e6572206e6f7220617070726f7665646044820152606401610790565b60006111a582611289565b90506111b082612d9f565b6111ba8183612e34565b505060018055565b6111cd600b33612268565b6111e95760405162461bcd60e51b815260040161079090614aa3565b825181146112095760405162461bcd60e51b815260040161079090614b3a565b60005b8351811015610dd55761127784828151811061123857634e487b7160e01b600052603260045260246000fd5b602002602001015184848481811061126057634e487b7160e01b600052603260045260246000fd5b90506020028101906112729190614c5e565b612f48565b8061128181614dde565b91505061120c565b6000818152600660205260408120546001600160a01b03168061074a5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610790565b61130b600b33612268565b6113275760405162461bcd60e51b815260040161079090614aa3565b610cdc8282612f7e565b3361133a611817565b6001600160a01b0316146113605760405162461bcd60e51b815260040161079090614b05565b61136b600282612268565b6107a25760405133906001600160a01b038316907f7e1a1a08d52e4ba0e21554733d66165fd5151f99460116223d9e3a608eec5cb190600090a3610cdc600282612f98565b60006001600160a01b03821661141b5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610790565b506001600160a01b031660009081526007602052604090205490565b33611440611817565b6001600160a01b0316146114665760405162461bcd60e51b815260040161079090614b05565b6114706000612fad565b565b6000600260015414156114975760405162461bcd60e51b815260040161079090614c27565b6002600155336114a5611817565b6001600160a01b031614806114c057506114c0600233612268565b6114dc5760405162461bcd60e51b815260040161079090614be3565b610c148260405180602001604052806000815250612ffd565b60006002600154141561151a5760405162461bcd60e51b815260040161079090614c27565b600260015533611528611817565b6001600160a01b031614806115435750611543600233612268565b61155f5760405162461bcd60e51b815260040161079090614be3565b61159f8484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612ffd92505050565b60018055949350505050565b6060600260015414156115d05760405162461bcd60e51b815260040161079090614c27565b6002600155336115de611817565b6001600160a01b031614806115f957506115f9600233612268565b6116155760405162461bcd60e51b815260040161079090614be3565b816001600160401b0381111561163b57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611664578160200160208202803683370190505b50905060005b8281101561104d576116e28585858481811061169657634e487b7160e01b600052603260045260246000fd5b90506020028101906116a89190614c5e565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612ffd92505050565b82828151811061170257634e487b7160e01b600052603260045260246000fd5b60209081029190910101528061171781614dde565b91505061166a565b61172a600b33612268565b6117465760405162461bcd60e51b815260040161079090614aa3565b6109cb838383612d62565b606061175d600b612bd7565b6001600160401b0381111561178257634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156117ab578160200160208202803683370190505b50905060005b6117bb600b612bd7565b811015610ea1576117cd600b82612be1565b8282815181106117ed57634e487b7160e01b600052603260045260246000fd5b6001600160a01b03909216602092830291909101909101528061180f81614dde565b9150506117b1565b6000546001600160a01b031690565b6060600580546107b490614d87565b3361183e611817565b6001600160a01b031614806118595750611859600233612268565b6118755760405162461bcd60e51b815260040161079090614be3565b610cdc8282613040565b6001600160a01b0382163314156118d45760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b6044820152606401610790565b3360008181526009602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b33611949611817565b6001600160a01b031614806119645750611964600233612268565b6119805760405162461bcd60e51b815260040161079090614be3565b825181146119a05760405162461bcd60e51b815260040161079090614b3a565b60005b8351811015610dd557611a0e8482815181106119cf57634e487b7160e01b600052603260045260246000fd5b60200260200101518484848181106119f757634e487b7160e01b600052603260045260246000fd5b9050602002810190611a099190614c5e565b61249c565b80611a1881614dde565b9150506119a3565b611a2b600b33612268565b611a475760405162461bcd60e51b815260040161079090614aa3565b801580611a605750611a6033634ce6d51160e11b61305a565b611ad25760405162461bcd60e51b815260206004820152603f60248201527f457874656e73696f6e206d75737420696d706c656d656e74204945524337323160448201527f43726561746f72457874656e73696f6e417070726f76655472616e73666572006064820152608401610790565b3360009081526010602052604090205460ff161515811515146107a25733600081815260106020908152604091829020805460ff191685151590811790915591519182527f072a7592283e2c2d1d56d21517ff6013325e0f55483f4828373ff4d98b0a1a36910160405180910390a250565b606060026001541415611b695760405162461bcd60e51b815260040161079090614c27565b600260015533611b77611817565b6001600160a01b03161480611b925750611b92600233612268565b611bae5760405162461bcd60e51b815260040161079090614be3565b8161ffff166001600160401b03811115611bd857634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611c01578160200160208202803683370190505b50905060005b8261ffff168161ffff161015611c7157611c308460405180602001604052806000815250612ffd565b828261ffff1681518110611c5457634e487b7160e01b600052603260045260246000fd5b602090810291909101015280611c6981614dbc565b915050611c07565b506001805592915050565b33611c85611817565b6001600160a01b03161480611ca05750611ca0600233612268565b611cbc5760405162461bcd60e51b815260040161079090614be3565b610b138585858585612bed565b611cd33383612686565b611cef5760405162461bcd60e51b815260040161079090614b92565b610dd584848484613076565b6060611d0682612385565b611d225760405162461bcd60e51b815260040161079090614ada565b611d2b826130a9565b805480602002602001604051908101604052809291908181526020018280548015610a4a57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611d615750505050509050919050565b606080611d9683612385565b611db25760405162461bcd60e51b815260040161079090614ada565b611dbb83613135565b815460408051602080840282018101909252828152918491830182828015611e0c57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611dee575b5050505050915080805480602002602001604051908101604052809291908181526020018280548015611e5e57602002820191906000526020600020905b815481526020019060010190808311611e4a575b5050505050905091509150915091565b6060611e7982612385565b611e955760405162461bcd60e51b815260040161079090614ada565b61074a82613153565b33611ea7611817565b6001600160a01b03161480611ec25750611ec2600233612268565b611ede5760405162461bcd60e51b815260040161079090614be3565b6107a2816133dc565b606060026001541415611f0c5760405162461bcd60e51b815260040161079090614c27565b6002600155611f1c600b33612268565b611f385760405162461bcd60e51b815260040161079090614aa3565b8161ffff166001600160401b03811115611f6257634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611f8b578160200160208202803683370190505b50905060005b8261ffff168161ffff161015611c7157611fba84604051806020016040528060008152506128e9565b828261ffff1681518110611fde57634e487b7160e01b600052603260045260246000fd5b602090810291909101015280611ff381614dbc565b915050611f91565b612006600b33612268565b6120225760405162461bcd60e51b815260040161079090614aa3565b6109cb838383612f48565b6001600160a01b03918216600090815260096020908152604080832093909416825291909152205460ff1690565b33612064611817565b6001600160a01b0316148061207f575061207f600233612268565b61209b5760405162461bcd60e51b815260040161079090614be3565b610cdc828261342d565b336120ae611817565b6001600160a01b0316146120d45760405162461bcd60e51b815260040161079090614b05565b6001600160a01b0381166121395760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610790565b6107a281612fad565b6000600260015414156121675760405162461bcd60e51b815260040161079090614c27565b6002600155612177600b33612268565b6121935760405162461bcd60e51b815260040161079090614aa3565b61159f8484848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506128e992505050565b60006001600160e01b03198216639088c20760e01b148061074a575061074a82613562565b60006001600160e01b031982166380ac58cd60e01b148061073b57506001600160e01b03198216635b5e139f60e01b148061074a575061074a825b60006001600160e01b03198216632a9f3abf60e11b148061074a57506301ffc9a760e01b6001600160e01b031983161461074a565b6001600160a01b038116600090815260018301602052604081205415155b9392505050565b6001600160a01b0381163014156122e25760405162461bcd60e51b815260206004820152601960248201527821b0b73737ba10313630b1b5b634b9ba103cb7bab939b2b63360391b6044820152606401610790565b6122ed600b82612268565b156123355760405133906001600160a01b038316907fd19cf84cf0fec6bec9ddfa29c63adf83a55707c712f32c8285d6180a7890147990600090a3612333600b82612a67565b505b612340600d82612268565b6107a25760405133906001600160a01b038316907f05ac7bc5a606cd92a63365f9fda244499b9add0526b22d99937b6bd88181059c90600090a3610cdc600d82612f98565b6000908152600660205260409020546001600160a01b0316151590565b600081815260086020526040902080546001600160a01b0319166001600160a01b03841690811790915581906123d782611289565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600081815260196020526040812054156124365750600090815260196020526040902090565b6000828152601160209081526040808320546001600160a01b0316835260179091529020541561248857506000908152601160209081526040808320546001600160a01b031683526017909152902090565b505030600090815260176020526040902090565b6000838152601160205260409020546001600160a01b031630146124d25760405162461bcd60e51b815260040161079090614a7c565b6000838152601560205260409020610dd5908383613e0e565b82811461250a5760405162461bcd60e51b815260040161079090614b3a565b6000805b8281101561255c5783838281811061253657634e487b7160e01b600052603260045260246000fd5b90506020020135826125489190614cf9565b91508061255481614dde565b91505061250e565b50612710811061257e5760405162461bcd60e51b815260040161079090614b61565b6000868152601860205260409020612597908686613e8e565b5060008681526019602052604090206125b1908484613ee1565b50857fabb46fe0761d77584bde75697647804ffd8113abd4d8d06bc664150395eccdee868686866040516125e8949392919061491e565b60405180910390a2505050505050565b6000818152601160205260409020546001600160a01b0316308114156126595760405162461bcd60e51b815260206004820152601660248201527527379032bc3a32b739b4b7b7103337b9103a37b5b2b760511b6044820152606401610790565b612664600d82612268565b156126815760405162461bcd60e51b815260040161079090614a4d565b919050565b600061269182612385565b6126f25760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610790565b60006126fd83611289565b9050806001600160a01b0316846001600160a01b031614806127385750836001600160a01b031661272d84610837565b6001600160a01b0316145b806127485750612748818561202d565b949350505050565b826001600160a01b031661276382611289565b6001600160a01b0316146127cb5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610790565b6001600160a01b03821661282d5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610790565b6128388383836135f8565b6128436000826123a2565b6001600160a01b038316600090815260076020526040812080546001929061286c908490614d44565b90915550506001600160a01b038216600090815260076020526040812080546001929061289a908490614cf9565b909155505060008181526006602052604080822080546001600160a01b0319166001600160a01b038681169182179092559151849391871691600080516020614e8983398151915291a4505050565b600a8054600091826128fa83614dde565b9190505550600a54905061290e8382613603565b600081815260116020526040902080546001600160a01b031916331790556129368382613690565b81511561295e576000818152601560209081526040909120835161295c92850190613f1b565b505b61074a565b6000806000612971856130a9565b8054909150600110156129c65760405162461bcd60e51b815260206004820152601c60248201527f4d6f7265207468616e203120726f79616c7479207265636569766572000000006044820152606401610790565b80546129d9573060009250925050610c55565b806000815481106129fa57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031661271085612a1c88612410565b600081548110612a3c57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154612a519190614d25565b612a5b9190614d11565b92509250509250929050565b6000612286836001600160a01b0384166136aa565b3060009081526012602090815260409091208251610cdc92840190613f1b565b6001600160a01b038416301415612ae85760405162461bcd60e51b815260206004820152601060248201526f10dc99585d1bdc8e88125b9d985b1a5960821b6044820152606401610790565b6001600160a01b0384163b612b4d5760405162461bcd60e51b815260206004820152602560248201527f43726561746f723a20457874656e73696f6e206d757374206265206120636f6e6044820152641d1c9858dd60da1b6064820152608401610790565b612b58600b85612268565b610dd5576001600160a01b0384166000908152601260205260409020612b7f908484613e0e565b506001600160a01b038416600081815260136020526040808220805460ff1916851515179055513392917fd8cb8ba4086944eabf43c5535b7712015e4d4c714b24bf812c040ea5b7a3e42a91a3610b13600b85612f98565b600061074a825490565b600061228683836137c7565b828114612c0c5760405162461bcd60e51b815260040161079090614b3a565b6000805b82811015612c5e57838382818110612c3857634e487b7160e01b600052603260045260246000fd5b9050602002013582612c4a9190614cf9565b915080612c5681614dde565b915050612c10565b506127108110612c805760405162461bcd60e51b815260040161079090614b61565b6001600160a01b0386166000908152601660205260409020612ca3908686613e8e565b506001600160a01b0386166000908152601760205260409020612cc7908484613ee1565b506001600160a01b038616301415612d1b577f2b6849d5976d799a5b0ca4dfd6b40a3d7afe9ea72c091fa01a958594f9a2659b85858585604051612d0e949392919061491e565b60405180910390a1612d5a565b856001600160a01b03167f535a93d2cb000582c0ebeaa9be4890ec6a287f98eb2df00c54c300612fd78d8f868686866040516125e8949392919061491e565b505050505050565b336000908152601260205260409020612d7c908484613e0e565b50336000908152601360205260409020805460ff19169115159190911790555050565b6000612daa82611289565b9050612db8816000846135f8565b612dc36000836123a2565b6001600160a01b0381166000908152600760205260408120805460019290612dec908490614d44565b909155505060008281526006602052604080822080546001600160a01b0319169055518391906001600160a01b03841690600080516020614e89833981519152908390a45050565b6000818152601160205260409020546001600160a01b03163014612ef257600081815260116020526040902054612e7b906001600160a01b03166311686e4b60e21b61305a565b15612ef257600081815260116020526040908190205490516311686e4b60e21b81526001600160a01b03909116906345a1b92c90612ebf90859085906004016148b8565b600060405180830381600087803b158015612ed957600080fd5b505af1158015612eed573d6000803e3d6000fd5b505050505b60008181526015602052604090208054612f0b90614d87565b159050612f29576000818152601560205260408120612f2991613f8f565b600090815260116020526040902080546001600160a01b031916905550565b6000838152601160205260409020546001600160a01b031633146124d25760405162461bcd60e51b815260040161079090614a7c565b3360009081526014602052604090206109cb908383613e0e565b6000612286836001600160a01b0384166137ff565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600a80546000918261300e83614dde565b9091555050600a54600081815260116020526040902080546001600160a01b0319163017905590506129368382613690565b3060009081526014602052604090206109cb908383613e0e565b60006130658361384e565b801561228657506122868383613881565b613081848484612750565b61308d8484848461396a565b610dd55760405162461bcd60e51b8152600401610790906149fb565b600081815260186020526040812054156130cf5750600090815260186020526040902090565b6000828152601160209081526040808320546001600160a01b0316835260169091529020541561312157506000908152601160209081526040808320546001600160a01b031683526016909152902090565b505030600090815260166020526040902090565b600080613141836130a9565b61314a84612410565b91509150915091565b6000818152601160205260409020546060906001600160a01b0316613179600d82612268565b156131965760405162461bcd60e51b815260040161079090614a4d565b600083815260156020526040902080546131af90614d87565b1590506132c9576001600160a01b038116600090815260146020526040902080546131d990614d87565b15905061322a576001600160a01b03811660009081526014602090815260408083208684526015835292819020905161321393920161484c565b604051602081830303815290604052915050919050565b6000838152601560205260409020805461324390614d87565b80601f016020809104026020016040519081016040528092919081815260200182805461326f90614d87565b80156132bc5780601f10613291576101008083540402835291602001916132bc565b820191906000526020600020905b81548152906001019060200180831161329f57829003601f168201915b5050505050915050919050565b6132da8163e9dc637560e01b61305a565b156133615760405163e9dc637560e01b81526001600160a01b0382169063e9dc63759061330d90309087906004016148b8565b60006040518083038186803b15801561332557600080fd5b505afa158015613339573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261228691908101906145c6565b6001600160a01b03811660009081526013602052604090205460ff166133b3576001600160a01b03811660009081526012602052604090206133a284613a77565b604051602001613213929190614827565b6001600160a01b0381166000908152601260205260409020805461324390614d87565b50919050565b6133e7600b82612268565b156107a25760405133906001600160a01b038316907fd19cf84cf0fec6bec9ddfa29c63adf83a55707c712f32c8285d6180a7890147990600090a3610cdc600b82612a67565b613438600b83612268565b6134845760405162461bcd60e51b815260206004820152601e60248201527f43726561746f72436f72653a20496e76616c696420657874656e73696f6e00006044820152606401610790565b6001600160a01b03811615806134a657506134a681631e05385b60e31b61305a565b6134e45760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b6044820152606401610790565b6001600160a01b038281166000908152600f6020526040902054811690821614610cdc576001600160a01b038281166000818152600f602052604080822080546001600160a01b031916948616948517905551339392917f6a835c4fcf7e0d398db3762332fdaa1471814ad39f1e2d6d0b3fdabf8efee3e091a45050565b60006001600160e01b031982166328f10a2160e01b14806135875750613587826121f8565b806135a257506001600160e01b03198216635d9dd7eb60e11b145b806135bd57506001600160e01b03198216632dde656160e21b145b806135d857506001600160e01b031982166335681b5360e21b145b8061074a57506001600160e01b0319821663152a902d60e11b1492915050565b6109cb838383613b90565b336000908152600f60205260409020546001600160a01b031615610cdc57336000818152600f602052604090819020549051631e05385b60e31b81526001600160a01b039091169163f029c2d891613662919086908690600401614861565b600060405180830381600087803b15801561367c57600080fd5b505af1158015612d5a573d6000803e3d6000fd5b610cdc828260405180602001604052806000815250613cae565b600081815260018301602052604081205480156137bd5760006136ce600183614d44565b85549091506000906136e290600190614d44565b905081811461376357600086600001828154811061371057634e487b7160e01b600052603260045260246000fd5b906000526020600020015490508087600001848154811061374157634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b855486908061378257634e487b7160e01b600052603160045260246000fd5b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061074a565b600091505061074a565b60008260000182815481106137ec57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b60008181526001830160205260408120546138465750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561074a565b50600061074a565b6000613861826301ffc9a760e01b613881565b801561074a575061387a826001600160e01b0319613881565b1592915050565b604080516001600160e01b0319831660248083019190915282518083039091018152604490910182526020810180516001600160e01b03166301ffc9a760e01b179052905160009190829081906001600160a01b03871690617530906138e890869061480b565b6000604051808303818686fa925050503d8060008114613924576040519150601f19603f3d011682016040523d82523d6000602084013e613929565b606091505b5091509150602081511015613944576000935050505061074a565b81801561396057508080602001905181019061396091906144df565b9695505050505050565b60006001600160a01b0384163b15613a6c57604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906139ae903390899088908890600401614885565b602060405180830381600087803b1580156139c857600080fd5b505af19250505080156139f8575060408051601f3d908101601f191682019092526139f591810190614517565b60015b613a52573d808015613a26576040519150601f19603f3d011682016040523d82523d6000602084013e613a2b565b606091505b508051613a4a5760405162461bcd60e51b8152600401610790906149fb565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050612748565b506001949350505050565b606081613a9b5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115613ac55780613aaf81614dde565b9150613abe9050600a83614d11565b9150613a9f565b6000816001600160401b03811115613aed57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015613b17576020820181803683370190505b5090505b841561274857613b2c600183614d44565b9150613b39600a86614df9565b613b44906030614cf9565b60f81b818381518110613b6757634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350613b89600a86614d11565b9450613b1b565b6000818152601160209081526040808320546001600160a01b03168352601090915290205460ff16156109cb5760008181526011602052604090819020549051638258080560e01b81526001600160a01b0390911690638258080590613bfe90869086908690600401614861565b602060405180830381600087803b158015613c1857600080fd5b505af1158015613c2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c5091906144df565b6109cb5760405162461bcd60e51b815260206004820152602960248201527f45524337323143726561746f723a20457874656e73696f6e20617070726f76616044820152686c206661696c75726560b81b6064820152608401610790565b613cb88383613ce1565b613cc5600084848461396a565b6109cb5760405162461bcd60e51b8152600401610790906149fb565b6001600160a01b038216613d375760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610790565b613d4081612385565b15613d8d5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610790565b613d99600083836135f8565b6001600160a01b0382166000908152600760205260408120805460019290613dc2908490614cf9565b909155505060008181526006602052604080822080546001600160a01b0319166001600160a01b0386169081179091559051839290600080516020614e89833981519152908290a45050565b828054613e1a90614d87565b90600052602060002090601f016020900481019282613e3c5760008555613e82565b82601f10613e555782800160ff19823516178555613e82565b82800160010185558215613e82579182015b82811115613e82578235825591602001919060010190613e67565b50610ea1929150613fc5565b828054828255906000526020600020908101928215613e82579160200282015b82811115613e825781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190613eae565b828054828255906000526020600020908101928215613e825791602002820182811115613e82578235825591602001919060010190613e67565b828054613f2790614d87565b90600052602060002090601f016020900481019282613f495760008555613e82565b82601f10613f6257805160ff1916838001178555613e82565b82800160010185558215613e82579182015b82811115613e82578251825591602001919060010190613f74565b508054613f9b90614d87565b6000825580601f10613fab575050565b601f0160209004906000526020600020908101906107a291905b5b80821115610ea15760008155600101613fc6565b60008083601f840112613feb578182fd5b5081356001600160401b03811115614001578182fd5b6020830191508360208260051b8501011115610c5557600080fd5b60008083601f84011261402d578182fd5b5081356001600160401b03811115614043578182fd5b602083019150836020828501011115610c5557600080fd5b60006020828403121561406c578081fd5b813561228681614e4f565b60008060408385031215614089578081fd5b823561409481614e4f565b915060208301356140a481614e4f565b809150509250929050565b6000806000606084860312156140c3578081fd5b83356140ce81614e4f565b925060208401356140de81614e4f565b929592945050506040919091013590565b60008060008060808587031215614104578081fd5b843561410f81614e4f565b9350602085013561411f81614e4f565b92506040850135915060608501356001600160401b03811115614140578182fd5b8501601f81018713614150578182fd5b803561416361415e82614cd2565b614ca2565b818152886020838501011115614177578384fd5b81602084016020830137908101602001929092525092959194509250565b6000806000806000606086880312156141ac578081fd5b85356141b781614e4f565b945060208601356001600160401b03808211156141d2578283fd5b6141de89838a01613fda565b909650945060408801359150808211156141f6578283fd5b5061420388828901613fda565b969995985093965092949392505050565b600080600060408486031215614228578283fd5b833561423381614e4f565b925060208401356001600160401b0381111561424d578283fd5b61425986828701613fda565b9497909650939450505050565b60008060408385031215614278578182fd5b823561428381614e4f565b915060208301356140a481614e64565b6000806000604084860312156142a7578081fd5b83356142b281614e4f565b925060208401356001600160401b038111156142cc578182fd5b6142598682870161401c565b600080600080606085870312156142ed578182fd5b84356142f881614e4f565b935060208501356001600160401b03811115614312578283fd5b61431e8782880161401c565b909450925050604085013561433281614e64565b939692955090935050565b6000806040838503121561434f578182fd5b823561435a81614e4f565b9150602083013561ffff811681146140a4578182fd5b60008060408385031215614382578182fd5b823561438d81614e4f565b946020939093013593505050565b600080600080604085870312156143b0578182fd5b84356001600160401b03808211156143c6578384fd5b6143d288838901613fda565b909650945060208701359150808211156143ea578384fd5b506143f787828801613fda565b95989497509550505050565b600080600060408486031215614417578081fd5b83356001600160401b038082111561442d578283fd5b818601915086601f830112614440578283fd5b813560208282111561445457614454614e39565b8160051b614463828201614ca2565b8381528281019086840183880185018d101561447d578889fd5b8897505b8588101561449f578035835260019790970196918401918401614481565b5098505050870135925050808211156144b6578283fd5b5061425986828701613fda565b6000602082840312156144d4578081fd5b813561228681614e64565b6000602082840312156144f0578081fd5b815161228681614e64565b60006020828403121561450c578081fd5b813561228681614e72565b600060208284031215614528578081fd5b815161228681614e72565b60008060208385031215614545578182fd5b82356001600160401b0381111561455a578283fd5b6145668582860161401c565b90969095509350505050565b600080600060408486031215614586578081fd5b83356001600160401b0381111561459b578182fd5b6145a78682870161401c565b90945092505060208401356145bb81614e64565b809150509250925092565b6000602082840312156145d7578081fd5b81516001600160401b038111156145ec578182fd5b8201601f810184136145fc578182fd5b805161460a61415e82614cd2565b81815285602083850101111561461e578384fd5b61462f826020830160208601614d5b565b95945050505050565b600060208284031215614649578081fd5b5035919050565b600080600080600060608688031215614667578283fd5b8535945060208601356001600160401b03808211156141d2578485fd5b600080600060408486031215614698578081fd5b8335925060208401356001600160401b038111156142cc578182fd5b600080604083850312156146c6578182fd5b50508035926020909101359150565b6000815180845260208085019450808401835b8381101561470d5781516001600160a01b0316875295820195908201906001016146e8565b509495945050505050565b6000815180845260208085019450808401835b8381101561470d5781518752958201959082019060010161472b565b6000815180845261475f816020860160208601614d5b565b601f01601f19169290920160200192915050565b8054600090600181811c908083168061478d57607f831692505b60208084108214156147ad57634e487b7160e01b86526022600452602486fd5b8180156147c157600181146147d2576147ff565b60ff198616895284890196506147ff565b60008881526020902060005b868110156147f75781548b8201529085019083016147de565b505084890196505b50505050505092915050565b6000825161481d818460208701614d5b565b9190910192915050565b60006148338285614773565b8351614843818360208801614d5b565b01949350505050565b600061274861485b8386614773565b84614773565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061396090830184614747565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b818110156149125783516001600160a01b0316835292840192918401916001016148ed565b50909695505050505050565b6040808252810184905260008560608301825b8781101561496157823561494481614e4f565b6001600160a01b0316825260209283019290910190600101614931565b5083810360208501528481526001600160fb1b03851115614980578283fd5b8460051b9150818660208301370160200190815295945050505050565b60208152600061228660208301846146d5565b6040815260006149c360408301856146d5565b828103602084015261462f8185614718565b6020815260006122866020830184614718565b6020815260006122866020830184614747565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b602080825260159082015274115e1d195b9cda5bdb88189b1858dadb1a5cdd1959605a1b604082015260600190565b6020808252600d908201526c24b73b30b634b2103a37b5b2b760991b604082015260600190565b6020808252601c908201527f4d757374206265207265676973746572656420657874656e73696f6e00000000604082015260600190565b6020808252601190820152702737b732bc34b9ba32b73a103a37b5b2b760791b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252600d908201526c125b9d985b1a59081a5b9c1d5d609a1b604082015260600190565b602080825260179082015276496e76616c696420746f74616c20726f79616c7469657360481b604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b60208082526024908201527f41646d696e436f6e74726f6c3a204d757374206265206f776e6572206f7220616040820152633236b4b760e11b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6000808335601e19843603018112614c74578283fd5b8301803591506001600160401b03821115614c8d578283fd5b602001915036819003821315610c5557600080fd5b604051601f8201601f191681016001600160401b0381118282101715614cca57614cca614e39565b604052919050565b60006001600160401b03821115614ceb57614ceb614e39565b50601f01601f191660200190565b60008219821115614d0c57614d0c614e0d565b500190565b600082614d2057614d20614e23565b500490565b6000816000190483118215151615614d3f57614d3f614e0d565b500290565b600082821015614d5657614d56614e0d565b500390565b60005b83811015614d76578181015183820152602001614d5e565b83811115610dd55750506000910152565b600181811c90821680614d9b57607f821691505b602082108114156133d657634e487b7160e01b600052602260045260246000fd5b600061ffff80831681811415614dd457614dd4614e0d565b6001019392505050565b6000600019821415614df257614df2614e0d565b5060010190565b600082614e0857614e08614e23565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146107a257600080fd5b80151581146107a257600080fd5b6001600160e01b0319811681146107a257600080fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa26469706673582212202a9ebb57de25a6fc1ed6f1df2c763025961e9f466eeb890f9a61de18c922a0fa64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102e25760003560e01c806370a0823111610188578063ad2d0ddd116100e4578063d5a06d4c11610092578063d5a06d4c14610668578063e00aab4b146106af578063e92a89f6146106c2578063e985e9c5146106d5578063f0cdc499146106e8578063f2fde38b146106fb578063fe2e1f581461070e57600080fd5b8063ad2d0ddd1461060f578063b0fe87c914610622578063b88d4fde14610635578063b9c4d9fb14610648578063bb3bafd614610668578063c87b56dd14610689578063ce8aee9d1461069c57600080fd5b806383b7db631161014157806383b7db63146105ab5780638da5cb5b146105b357806395d89b41146105bb57806399e0dd7c146105c3578063a22cb465146105d6578063aafb2d44146105e9578063ac0c8cfa146105fc57600080fd5b806370a0823114610544578063715018a61461055757806372ff03d31461055f5780637884af44146105725780637aa15f161461058557806382dcc0c81461059857600080fd5b80632d345670116102425780633f0f37f6116101f05780633f0f37f6146104bf57806342842e0e146104d257806342966c68146104e557806361e5bc6b146104f85780636352211e1461050b57806366d1e9d01461051e5780636d73e6691461053157600080fd5b80632d3456701461043857806330176e131461044b5780633071a0f91461045e57806331ae450b14610471578063332dd1ae1461048657806338e52e78146104995780633e6134b8146104ac57600080fd5b8063162094c41161029f578063162094c41461039757806320e4afe2146103aa578063239be317146103bd57806323b872dd146103d057806324d7806c146103e35780632928ca58146103f65780632a55205a1461041757600080fd5b806301ffc9a7146102e757806302e7afb71461030f57806306fdde0314610324578063081812fc14610339578063095ea7b3146103645780630ebd4c7f14610377575b600080fd5b6102fa6102f53660046144fb565b610721565b60405190151581526020015b60405180910390f35b61032261031d36600461405b565b610750565b005b61032c6107a5565b60405161030691906149e8565b61034c610347366004614638565b610837565b6040516001600160a01b039091168152602001610306565b610322610372366004614370565b6108bf565b61038a610385366004614638565b6109d0565b60405161030691906149d5565b6103226103a5366004614684565b610a56565b6103226103b8366004614650565b610aa1565b61034c6103cb366004614638565b610b1a565b6103226103de3660046140af565b610b4a565b6102fa6103f136600461405b565b610b7b565b61040961040436600461405b565b610baa565b604051908152602001610306565b61042a6104253660046146b4565b610c1e565b6040516103069291906148b8565b61032261044636600461405b565b610c5c565b610322610459366004614533565b610ce0565b61032261046c366004614293565b610d5f565b610479610ddb565b60405161030691906148d1565b61032261049436600461439b565b610ea5565b61038a6104a7366004614214565b610ef2565b6103226104ba366004614533565b611059565b6103226104cd3660046142d8565b61108c565b6103226104e03660046140af565b611101565b6103226104f3366004614638565b61111c565b610322610506366004614403565b6111c2565b61034c610519366004614638565b611289565b61032261052c366004614533565b611300565b61032261053f36600461405b565b611331565b61040961055236600461405b565b6113b0565b610322611437565b61040961056d36600461405b565b611472565b610409610580366004614293565b6114f5565b61038a610593366004614214565b6115ab565b6103226105a6366004614572565b61171f565b610479611751565b61034c611817565b61032c611826565b6103226105d1366004614533565b611835565b6103226105e4366004614266565b61187f565b6103226105f7366004614403565b611940565b61032261060a3660046144c3565b611a20565b61038a61061d36600461433d565b611b44565b610322610630366004614195565b611c7c565b6103226106433660046140ef565b611cc9565b61065b610656366004614638565b611cfb565b604051610306919061499d565b61067b610676366004614638565b611d8a565b6040516103069291906149b0565b61032c610697366004614638565b611e6e565b6103226106aa36600461405b565b611e9e565b61038a6106bd36600461433d565b611ee7565b6103226106d0366004614684565b611ffb565b6102fa6106e3366004614077565b61202d565b6103226106f6366004614077565b61205b565b61032261070936600461405b565b6120a5565b61040961071c366004614293565b612142565b600061072c826121d3565b8061073b575061073b826121f8565b8061074a575061074a82612233565b92915050565b33610759611817565b6001600160a01b031614806107745750610774600233612268565b6107995760405162461bcd60e51b815260040161079090614be3565b60405180910390fd5b6107a28161228d565b50565b6060600480546107b490614d87565b80601f01602080910402602001604051908101604052809291908181526020018280546107e090614d87565b801561082d5780601f106108025761010080835404028352916020019161082d565b820191906000526020600020905b81548152906001019060200180831161081057829003601f168201915b5050505050905090565b600061084282612385565b6108a35760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610790565b506000908152600860205260409020546001600160a01b031690565b60006108ca82611289565b9050806001600160a01b0316836001600160a01b031614156109385760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610790565b336001600160a01b03821614806109545750610954813361202d565b6109c15760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776044820152771b995c881b9bdc88185c1c1c9bdd995908199bdc88185b1b60421b6064820152608401610790565b6109cb83836123a2565b505050565b60606109db82612385565b6109f75760405162461bcd60e51b815260040161079090614ada565b610a0082612410565b805480602002602001604051908101604052809291908181526020018280548015610a4a57602002820191906000526020600020905b815481526020019060010190808311610a36575b50505050509050919050565b33610a5f611817565b6001600160a01b03161480610a7a5750610a7a600233612268565b610a965760405162461bcd60e51b815260040161079090614be3565b6109cb83838361249c565b33610aaa611817565b6001600160a01b03161480610ac55750610ac5600233612268565b610ae15760405162461bcd60e51b815260040161079090614be3565b610aea85612385565b610b065760405162461bcd60e51b815260040161079090614ada565b610b1385858585856124eb565b5050505050565b6000610b2582612385565b610b415760405162461bcd60e51b815260040161079090614ada565b61074a826125f8565b610b543382612686565b610b705760405162461bcd60e51b815260040161079090614b92565b6109cb838383612750565b6000816001600160a01b0316610b8f611817565b6001600160a01b0316148061074a575061074a600283612268565b600060026001541415610bcf5760405162461bcd60e51b815260040161079090614c27565b6002600155610bdf600b33612268565b610bfb5760405162461bcd60e51b815260040161079090614aa3565b610c1482604051806020016040528060008152506128e9565b6001805592915050565b600080610c2a84612385565b610c465760405162461bcd60e51b815260040161079090614ada565b610c508484612963565b915091505b9250929050565b33610c65611817565b6001600160a01b031614610c8b5760405162461bcd60e51b815260040161079090614b05565b610c96600282612268565b156107a25760405133906001600160a01b038316907f7c0c3c84c67c85fcac635147348bfe374c24a1a93d0366d1cfe9d8853cbf89d590600090a3610cdc600282612a67565b5050565b33610ce9611817565b6001600160a01b03161480610d045750610d04600233612268565b610d205760405162461bcd60e51b815260040161079090614be3565b610cdc82828080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612a7c92505050565b33610d68611817565b6001600160a01b03161480610d835750610d83600233612268565b610d9f5760405162461bcd60e51b815260040161079090614be3565b82610dab600d82612268565b15610dc85760405162461bcd60e51b815260040161079090614a4d565b610dd58484846000612a9c565b50505050565b6060610de76002612bd7565b6001600160401b03811115610e0c57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610e35578160200160208202803683370190505b50905060005b610e456002612bd7565b811015610ea157610e57600282612be1565b828281518110610e7757634e487b7160e01b600052603260045260246000fd5b6001600160a01b039092166020928302919091019091015280610e9981614dde565b915050610e3b565b5090565b33610eae611817565b6001600160a01b03161480610ec95750610ec9600233612268565b610ee55760405162461bcd60e51b815260040161079090614be3565b610dd53085858585612bed565b606060026001541415610f175760405162461bcd60e51b815260040161079090614c27565b6002600155610f27600b33612268565b610f435760405162461bcd60e51b815260040161079090614aa3565b816001600160401b03811115610f6957634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610f92578160200160208202803683370190505b50905060005b8281101561104d5761101085858584818110610fc457634e487b7160e01b600052603260045260246000fd5b9050602002810190610fd69190614c5e565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506128e992505050565b82828151811061103057634e487b7160e01b600052603260045260246000fd5b60209081029190910101528061104581614dde565b915050610f98565b50600180559392505050565b611064600b33612268565b6110805760405162461bcd60e51b815260040161079090614aa3565b610cdc82826000612d62565b33611095611817565b6001600160a01b031614806110b057506110b0600233612268565b6110cc5760405162461bcd60e51b815260040161079090614be3565b836110d8600d82612268565b156110f55760405162461bcd60e51b815260040161079090614a4d565b610b1385858585612a9c565b6109cb83838360405180602001604052806000815250611cc9565b6002600154141561113f5760405162461bcd60e51b815260040161079090614c27565b600260015561114e3382612686565b61119a5760405162461bcd60e51b815260206004820181905260248201527f43616c6c6572206973206e6f74206f776e6572206e6f7220617070726f7665646044820152606401610790565b60006111a582611289565b90506111b082612d9f565b6111ba8183612e34565b505060018055565b6111cd600b33612268565b6111e95760405162461bcd60e51b815260040161079090614aa3565b825181146112095760405162461bcd60e51b815260040161079090614b3a565b60005b8351811015610dd55761127784828151811061123857634e487b7160e01b600052603260045260246000fd5b602002602001015184848481811061126057634e487b7160e01b600052603260045260246000fd5b90506020028101906112729190614c5e565b612f48565b8061128181614dde565b91505061120c565b6000818152600660205260408120546001600160a01b03168061074a5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610790565b61130b600b33612268565b6113275760405162461bcd60e51b815260040161079090614aa3565b610cdc8282612f7e565b3361133a611817565b6001600160a01b0316146113605760405162461bcd60e51b815260040161079090614b05565b61136b600282612268565b6107a25760405133906001600160a01b038316907f7e1a1a08d52e4ba0e21554733d66165fd5151f99460116223d9e3a608eec5cb190600090a3610cdc600282612f98565b60006001600160a01b03821661141b5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610790565b506001600160a01b031660009081526007602052604090205490565b33611440611817565b6001600160a01b0316146114665760405162461bcd60e51b815260040161079090614b05565b6114706000612fad565b565b6000600260015414156114975760405162461bcd60e51b815260040161079090614c27565b6002600155336114a5611817565b6001600160a01b031614806114c057506114c0600233612268565b6114dc5760405162461bcd60e51b815260040161079090614be3565b610c148260405180602001604052806000815250612ffd565b60006002600154141561151a5760405162461bcd60e51b815260040161079090614c27565b600260015533611528611817565b6001600160a01b031614806115435750611543600233612268565b61155f5760405162461bcd60e51b815260040161079090614be3565b61159f8484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612ffd92505050565b60018055949350505050565b6060600260015414156115d05760405162461bcd60e51b815260040161079090614c27565b6002600155336115de611817565b6001600160a01b031614806115f957506115f9600233612268565b6116155760405162461bcd60e51b815260040161079090614be3565b816001600160401b0381111561163b57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611664578160200160208202803683370190505b50905060005b8281101561104d576116e28585858481811061169657634e487b7160e01b600052603260045260246000fd5b90506020028101906116a89190614c5e565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612ffd92505050565b82828151811061170257634e487b7160e01b600052603260045260246000fd5b60209081029190910101528061171781614dde565b91505061166a565b61172a600b33612268565b6117465760405162461bcd60e51b815260040161079090614aa3565b6109cb838383612d62565b606061175d600b612bd7565b6001600160401b0381111561178257634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156117ab578160200160208202803683370190505b50905060005b6117bb600b612bd7565b811015610ea1576117cd600b82612be1565b8282815181106117ed57634e487b7160e01b600052603260045260246000fd5b6001600160a01b03909216602092830291909101909101528061180f81614dde565b9150506117b1565b6000546001600160a01b031690565b6060600580546107b490614d87565b3361183e611817565b6001600160a01b031614806118595750611859600233612268565b6118755760405162461bcd60e51b815260040161079090614be3565b610cdc8282613040565b6001600160a01b0382163314156118d45760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b6044820152606401610790565b3360008181526009602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b33611949611817565b6001600160a01b031614806119645750611964600233612268565b6119805760405162461bcd60e51b815260040161079090614be3565b825181146119a05760405162461bcd60e51b815260040161079090614b3a565b60005b8351811015610dd557611a0e8482815181106119cf57634e487b7160e01b600052603260045260246000fd5b60200260200101518484848181106119f757634e487b7160e01b600052603260045260246000fd5b9050602002810190611a099190614c5e565b61249c565b80611a1881614dde565b9150506119a3565b611a2b600b33612268565b611a475760405162461bcd60e51b815260040161079090614aa3565b801580611a605750611a6033634ce6d51160e11b61305a565b611ad25760405162461bcd60e51b815260206004820152603f60248201527f457874656e73696f6e206d75737420696d706c656d656e74204945524337323160448201527f43726561746f72457874656e73696f6e417070726f76655472616e73666572006064820152608401610790565b3360009081526010602052604090205460ff161515811515146107a25733600081815260106020908152604091829020805460ff191685151590811790915591519182527f072a7592283e2c2d1d56d21517ff6013325e0f55483f4828373ff4d98b0a1a36910160405180910390a250565b606060026001541415611b695760405162461bcd60e51b815260040161079090614c27565b600260015533611b77611817565b6001600160a01b03161480611b925750611b92600233612268565b611bae5760405162461bcd60e51b815260040161079090614be3565b8161ffff166001600160401b03811115611bd857634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611c01578160200160208202803683370190505b50905060005b8261ffff168161ffff161015611c7157611c308460405180602001604052806000815250612ffd565b828261ffff1681518110611c5457634e487b7160e01b600052603260045260246000fd5b602090810291909101015280611c6981614dbc565b915050611c07565b506001805592915050565b33611c85611817565b6001600160a01b03161480611ca05750611ca0600233612268565b611cbc5760405162461bcd60e51b815260040161079090614be3565b610b138585858585612bed565b611cd33383612686565b611cef5760405162461bcd60e51b815260040161079090614b92565b610dd584848484613076565b6060611d0682612385565b611d225760405162461bcd60e51b815260040161079090614ada565b611d2b826130a9565b805480602002602001604051908101604052809291908181526020018280548015610a4a57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611d615750505050509050919050565b606080611d9683612385565b611db25760405162461bcd60e51b815260040161079090614ada565b611dbb83613135565b815460408051602080840282018101909252828152918491830182828015611e0c57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611dee575b5050505050915080805480602002602001604051908101604052809291908181526020018280548015611e5e57602002820191906000526020600020905b815481526020019060010190808311611e4a575b5050505050905091509150915091565b6060611e7982612385565b611e955760405162461bcd60e51b815260040161079090614ada565b61074a82613153565b33611ea7611817565b6001600160a01b03161480611ec25750611ec2600233612268565b611ede5760405162461bcd60e51b815260040161079090614be3565b6107a2816133dc565b606060026001541415611f0c5760405162461bcd60e51b815260040161079090614c27565b6002600155611f1c600b33612268565b611f385760405162461bcd60e51b815260040161079090614aa3565b8161ffff166001600160401b03811115611f6257634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611f8b578160200160208202803683370190505b50905060005b8261ffff168161ffff161015611c7157611fba84604051806020016040528060008152506128e9565b828261ffff1681518110611fde57634e487b7160e01b600052603260045260246000fd5b602090810291909101015280611ff381614dbc565b915050611f91565b612006600b33612268565b6120225760405162461bcd60e51b815260040161079090614aa3565b6109cb838383612f48565b6001600160a01b03918216600090815260096020908152604080832093909416825291909152205460ff1690565b33612064611817565b6001600160a01b0316148061207f575061207f600233612268565b61209b5760405162461bcd60e51b815260040161079090614be3565b610cdc828261342d565b336120ae611817565b6001600160a01b0316146120d45760405162461bcd60e51b815260040161079090614b05565b6001600160a01b0381166121395760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610790565b6107a281612fad565b6000600260015414156121675760405162461bcd60e51b815260040161079090614c27565b6002600155612177600b33612268565b6121935760405162461bcd60e51b815260040161079090614aa3565b61159f8484848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506128e992505050565b60006001600160e01b03198216639088c20760e01b148061074a575061074a82613562565b60006001600160e01b031982166380ac58cd60e01b148061073b57506001600160e01b03198216635b5e139f60e01b148061074a575061074a825b60006001600160e01b03198216632a9f3abf60e11b148061074a57506301ffc9a760e01b6001600160e01b031983161461074a565b6001600160a01b038116600090815260018301602052604081205415155b9392505050565b6001600160a01b0381163014156122e25760405162461bcd60e51b815260206004820152601960248201527821b0b73737ba10313630b1b5b634b9ba103cb7bab939b2b63360391b6044820152606401610790565b6122ed600b82612268565b156123355760405133906001600160a01b038316907fd19cf84cf0fec6bec9ddfa29c63adf83a55707c712f32c8285d6180a7890147990600090a3612333600b82612a67565b505b612340600d82612268565b6107a25760405133906001600160a01b038316907f05ac7bc5a606cd92a63365f9fda244499b9add0526b22d99937b6bd88181059c90600090a3610cdc600d82612f98565b6000908152600660205260409020546001600160a01b0316151590565b600081815260086020526040902080546001600160a01b0319166001600160a01b03841690811790915581906123d782611289565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600081815260196020526040812054156124365750600090815260196020526040902090565b6000828152601160209081526040808320546001600160a01b0316835260179091529020541561248857506000908152601160209081526040808320546001600160a01b031683526017909152902090565b505030600090815260176020526040902090565b6000838152601160205260409020546001600160a01b031630146124d25760405162461bcd60e51b815260040161079090614a7c565b6000838152601560205260409020610dd5908383613e0e565b82811461250a5760405162461bcd60e51b815260040161079090614b3a565b6000805b8281101561255c5783838281811061253657634e487b7160e01b600052603260045260246000fd5b90506020020135826125489190614cf9565b91508061255481614dde565b91505061250e565b50612710811061257e5760405162461bcd60e51b815260040161079090614b61565b6000868152601860205260409020612597908686613e8e565b5060008681526019602052604090206125b1908484613ee1565b50857fabb46fe0761d77584bde75697647804ffd8113abd4d8d06bc664150395eccdee868686866040516125e8949392919061491e565b60405180910390a2505050505050565b6000818152601160205260409020546001600160a01b0316308114156126595760405162461bcd60e51b815260206004820152601660248201527527379032bc3a32b739b4b7b7103337b9103a37b5b2b760511b6044820152606401610790565b612664600d82612268565b156126815760405162461bcd60e51b815260040161079090614a4d565b919050565b600061269182612385565b6126f25760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610790565b60006126fd83611289565b9050806001600160a01b0316846001600160a01b031614806127385750836001600160a01b031661272d84610837565b6001600160a01b0316145b806127485750612748818561202d565b949350505050565b826001600160a01b031661276382611289565b6001600160a01b0316146127cb5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610790565b6001600160a01b03821661282d5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610790565b6128388383836135f8565b6128436000826123a2565b6001600160a01b038316600090815260076020526040812080546001929061286c908490614d44565b90915550506001600160a01b038216600090815260076020526040812080546001929061289a908490614cf9565b909155505060008181526006602052604080822080546001600160a01b0319166001600160a01b038681169182179092559151849391871691600080516020614e8983398151915291a4505050565b600a8054600091826128fa83614dde565b9190505550600a54905061290e8382613603565b600081815260116020526040902080546001600160a01b031916331790556129368382613690565b81511561295e576000818152601560209081526040909120835161295c92850190613f1b565b505b61074a565b6000806000612971856130a9565b8054909150600110156129c65760405162461bcd60e51b815260206004820152601c60248201527f4d6f7265207468616e203120726f79616c7479207265636569766572000000006044820152606401610790565b80546129d9573060009250925050610c55565b806000815481106129fa57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031661271085612a1c88612410565b600081548110612a3c57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154612a519190614d25565b612a5b9190614d11565b92509250509250929050565b6000612286836001600160a01b0384166136aa565b3060009081526012602090815260409091208251610cdc92840190613f1b565b6001600160a01b038416301415612ae85760405162461bcd60e51b815260206004820152601060248201526f10dc99585d1bdc8e88125b9d985b1a5960821b6044820152606401610790565b6001600160a01b0384163b612b4d5760405162461bcd60e51b815260206004820152602560248201527f43726561746f723a20457874656e73696f6e206d757374206265206120636f6e6044820152641d1c9858dd60da1b6064820152608401610790565b612b58600b85612268565b610dd5576001600160a01b0384166000908152601260205260409020612b7f908484613e0e565b506001600160a01b038416600081815260136020526040808220805460ff1916851515179055513392917fd8cb8ba4086944eabf43c5535b7712015e4d4c714b24bf812c040ea5b7a3e42a91a3610b13600b85612f98565b600061074a825490565b600061228683836137c7565b828114612c0c5760405162461bcd60e51b815260040161079090614b3a565b6000805b82811015612c5e57838382818110612c3857634e487b7160e01b600052603260045260246000fd5b9050602002013582612c4a9190614cf9565b915080612c5681614dde565b915050612c10565b506127108110612c805760405162461bcd60e51b815260040161079090614b61565b6001600160a01b0386166000908152601660205260409020612ca3908686613e8e565b506001600160a01b0386166000908152601760205260409020612cc7908484613ee1565b506001600160a01b038616301415612d1b577f2b6849d5976d799a5b0ca4dfd6b40a3d7afe9ea72c091fa01a958594f9a2659b85858585604051612d0e949392919061491e565b60405180910390a1612d5a565b856001600160a01b03167f535a93d2cb000582c0ebeaa9be4890ec6a287f98eb2df00c54c300612fd78d8f868686866040516125e8949392919061491e565b505050505050565b336000908152601260205260409020612d7c908484613e0e565b50336000908152601360205260409020805460ff19169115159190911790555050565b6000612daa82611289565b9050612db8816000846135f8565b612dc36000836123a2565b6001600160a01b0381166000908152600760205260408120805460019290612dec908490614d44565b909155505060008281526006602052604080822080546001600160a01b0319169055518391906001600160a01b03841690600080516020614e89833981519152908390a45050565b6000818152601160205260409020546001600160a01b03163014612ef257600081815260116020526040902054612e7b906001600160a01b03166311686e4b60e21b61305a565b15612ef257600081815260116020526040908190205490516311686e4b60e21b81526001600160a01b03909116906345a1b92c90612ebf90859085906004016148b8565b600060405180830381600087803b158015612ed957600080fd5b505af1158015612eed573d6000803e3d6000fd5b505050505b60008181526015602052604090208054612f0b90614d87565b159050612f29576000818152601560205260408120612f2991613f8f565b600090815260116020526040902080546001600160a01b031916905550565b6000838152601160205260409020546001600160a01b031633146124d25760405162461bcd60e51b815260040161079090614a7c565b3360009081526014602052604090206109cb908383613e0e565b6000612286836001600160a01b0384166137ff565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600a80546000918261300e83614dde565b9091555050600a54600081815260116020526040902080546001600160a01b0319163017905590506129368382613690565b3060009081526014602052604090206109cb908383613e0e565b60006130658361384e565b801561228657506122868383613881565b613081848484612750565b61308d8484848461396a565b610dd55760405162461bcd60e51b8152600401610790906149fb565b600081815260186020526040812054156130cf5750600090815260186020526040902090565b6000828152601160209081526040808320546001600160a01b0316835260169091529020541561312157506000908152601160209081526040808320546001600160a01b031683526016909152902090565b505030600090815260166020526040902090565b600080613141836130a9565b61314a84612410565b91509150915091565b6000818152601160205260409020546060906001600160a01b0316613179600d82612268565b156131965760405162461bcd60e51b815260040161079090614a4d565b600083815260156020526040902080546131af90614d87565b1590506132c9576001600160a01b038116600090815260146020526040902080546131d990614d87565b15905061322a576001600160a01b03811660009081526014602090815260408083208684526015835292819020905161321393920161484c565b604051602081830303815290604052915050919050565b6000838152601560205260409020805461324390614d87565b80601f016020809104026020016040519081016040528092919081815260200182805461326f90614d87565b80156132bc5780601f10613291576101008083540402835291602001916132bc565b820191906000526020600020905b81548152906001019060200180831161329f57829003601f168201915b5050505050915050919050565b6132da8163e9dc637560e01b61305a565b156133615760405163e9dc637560e01b81526001600160a01b0382169063e9dc63759061330d90309087906004016148b8565b60006040518083038186803b15801561332557600080fd5b505afa158015613339573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261228691908101906145c6565b6001600160a01b03811660009081526013602052604090205460ff166133b3576001600160a01b03811660009081526012602052604090206133a284613a77565b604051602001613213929190614827565b6001600160a01b0381166000908152601260205260409020805461324390614d87565b50919050565b6133e7600b82612268565b156107a25760405133906001600160a01b038316907fd19cf84cf0fec6bec9ddfa29c63adf83a55707c712f32c8285d6180a7890147990600090a3610cdc600b82612a67565b613438600b83612268565b6134845760405162461bcd60e51b815260206004820152601e60248201527f43726561746f72436f72653a20496e76616c696420657874656e73696f6e00006044820152606401610790565b6001600160a01b03811615806134a657506134a681631e05385b60e31b61305a565b6134e45760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b6044820152606401610790565b6001600160a01b038281166000908152600f6020526040902054811690821614610cdc576001600160a01b038281166000818152600f602052604080822080546001600160a01b031916948616948517905551339392917f6a835c4fcf7e0d398db3762332fdaa1471814ad39f1e2d6d0b3fdabf8efee3e091a45050565b60006001600160e01b031982166328f10a2160e01b14806135875750613587826121f8565b806135a257506001600160e01b03198216635d9dd7eb60e11b145b806135bd57506001600160e01b03198216632dde656160e21b145b806135d857506001600160e01b031982166335681b5360e21b145b8061074a57506001600160e01b0319821663152a902d60e11b1492915050565b6109cb838383613b90565b336000908152600f60205260409020546001600160a01b031615610cdc57336000818152600f602052604090819020549051631e05385b60e31b81526001600160a01b039091169163f029c2d891613662919086908690600401614861565b600060405180830381600087803b15801561367c57600080fd5b505af1158015612d5a573d6000803e3d6000fd5b610cdc828260405180602001604052806000815250613cae565b600081815260018301602052604081205480156137bd5760006136ce600183614d44565b85549091506000906136e290600190614d44565b905081811461376357600086600001828154811061371057634e487b7160e01b600052603260045260246000fd5b906000526020600020015490508087600001848154811061374157634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b855486908061378257634e487b7160e01b600052603160045260246000fd5b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061074a565b600091505061074a565b60008260000182815481106137ec57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b60008181526001830160205260408120546138465750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561074a565b50600061074a565b6000613861826301ffc9a760e01b613881565b801561074a575061387a826001600160e01b0319613881565b1592915050565b604080516001600160e01b0319831660248083019190915282518083039091018152604490910182526020810180516001600160e01b03166301ffc9a760e01b179052905160009190829081906001600160a01b03871690617530906138e890869061480b565b6000604051808303818686fa925050503d8060008114613924576040519150601f19603f3d011682016040523d82523d6000602084013e613929565b606091505b5091509150602081511015613944576000935050505061074a565b81801561396057508080602001905181019061396091906144df565b9695505050505050565b60006001600160a01b0384163b15613a6c57604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906139ae903390899088908890600401614885565b602060405180830381600087803b1580156139c857600080fd5b505af19250505080156139f8575060408051601f3d908101601f191682019092526139f591810190614517565b60015b613a52573d808015613a26576040519150601f19603f3d011682016040523d82523d6000602084013e613a2b565b606091505b508051613a4a5760405162461bcd60e51b8152600401610790906149fb565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050612748565b506001949350505050565b606081613a9b5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115613ac55780613aaf81614dde565b9150613abe9050600a83614d11565b9150613a9f565b6000816001600160401b03811115613aed57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015613b17576020820181803683370190505b5090505b841561274857613b2c600183614d44565b9150613b39600a86614df9565b613b44906030614cf9565b60f81b818381518110613b6757634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350613b89600a86614d11565b9450613b1b565b6000818152601160209081526040808320546001600160a01b03168352601090915290205460ff16156109cb5760008181526011602052604090819020549051638258080560e01b81526001600160a01b0390911690638258080590613bfe90869086908690600401614861565b602060405180830381600087803b158015613c1857600080fd5b505af1158015613c2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c5091906144df565b6109cb5760405162461bcd60e51b815260206004820152602960248201527f45524337323143726561746f723a20457874656e73696f6e20617070726f76616044820152686c206661696c75726560b81b6064820152608401610790565b613cb88383613ce1565b613cc5600084848461396a565b6109cb5760405162461bcd60e51b8152600401610790906149fb565b6001600160a01b038216613d375760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610790565b613d4081612385565b15613d8d5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610790565b613d99600083836135f8565b6001600160a01b0382166000908152600760205260408120805460019290613dc2908490614cf9565b909155505060008181526006602052604080822080546001600160a01b0319166001600160a01b0386169081179091559051839290600080516020614e89833981519152908290a45050565b828054613e1a90614d87565b90600052602060002090601f016020900481019282613e3c5760008555613e82565b82601f10613e555782800160ff19823516178555613e82565b82800160010185558215613e82579182015b82811115613e82578235825591602001919060010190613e67565b50610ea1929150613fc5565b828054828255906000526020600020908101928215613e82579160200282015b82811115613e825781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190613eae565b828054828255906000526020600020908101928215613e825791602002820182811115613e82578235825591602001919060010190613e67565b828054613f2790614d87565b90600052602060002090601f016020900481019282613f495760008555613e82565b82601f10613f6257805160ff1916838001178555613e82565b82800160010185558215613e82579182015b82811115613e82578251825591602001919060010190613f74565b508054613f9b90614d87565b6000825580601f10613fab575050565b601f0160209004906000526020600020908101906107a291905b5b80821115610ea15760008155600101613fc6565b60008083601f840112613feb578182fd5b5081356001600160401b03811115614001578182fd5b6020830191508360208260051b8501011115610c5557600080fd5b60008083601f84011261402d578182fd5b5081356001600160401b03811115614043578182fd5b602083019150836020828501011115610c5557600080fd5b60006020828403121561406c578081fd5b813561228681614e4f565b60008060408385031215614089578081fd5b823561409481614e4f565b915060208301356140a481614e4f565b809150509250929050565b6000806000606084860312156140c3578081fd5b83356140ce81614e4f565b925060208401356140de81614e4f565b929592945050506040919091013590565b60008060008060808587031215614104578081fd5b843561410f81614e4f565b9350602085013561411f81614e4f565b92506040850135915060608501356001600160401b03811115614140578182fd5b8501601f81018713614150578182fd5b803561416361415e82614cd2565b614ca2565b818152886020838501011115614177578384fd5b81602084016020830137908101602001929092525092959194509250565b6000806000806000606086880312156141ac578081fd5b85356141b781614e4f565b945060208601356001600160401b03808211156141d2578283fd5b6141de89838a01613fda565b909650945060408801359150808211156141f6578283fd5b5061420388828901613fda565b969995985093965092949392505050565b600080600060408486031215614228578283fd5b833561423381614e4f565b925060208401356001600160401b0381111561424d578283fd5b61425986828701613fda565b9497909650939450505050565b60008060408385031215614278578182fd5b823561428381614e4f565b915060208301356140a481614e64565b6000806000604084860312156142a7578081fd5b83356142b281614e4f565b925060208401356001600160401b038111156142cc578182fd5b6142598682870161401c565b600080600080606085870312156142ed578182fd5b84356142f881614e4f565b935060208501356001600160401b03811115614312578283fd5b61431e8782880161401c565b909450925050604085013561433281614e64565b939692955090935050565b6000806040838503121561434f578182fd5b823561435a81614e4f565b9150602083013561ffff811681146140a4578182fd5b60008060408385031215614382578182fd5b823561438d81614e4f565b946020939093013593505050565b600080600080604085870312156143b0578182fd5b84356001600160401b03808211156143c6578384fd5b6143d288838901613fda565b909650945060208701359150808211156143ea578384fd5b506143f787828801613fda565b95989497509550505050565b600080600060408486031215614417578081fd5b83356001600160401b038082111561442d578283fd5b818601915086601f830112614440578283fd5b813560208282111561445457614454614e39565b8160051b614463828201614ca2565b8381528281019086840183880185018d101561447d578889fd5b8897505b8588101561449f578035835260019790970196918401918401614481565b5098505050870135925050808211156144b6578283fd5b5061425986828701613fda565b6000602082840312156144d4578081fd5b813561228681614e64565b6000602082840312156144f0578081fd5b815161228681614e64565b60006020828403121561450c578081fd5b813561228681614e72565b600060208284031215614528578081fd5b815161228681614e72565b60008060208385031215614545578182fd5b82356001600160401b0381111561455a578283fd5b6145668582860161401c565b90969095509350505050565b600080600060408486031215614586578081fd5b83356001600160401b0381111561459b578182fd5b6145a78682870161401c565b90945092505060208401356145bb81614e64565b809150509250925092565b6000602082840312156145d7578081fd5b81516001600160401b038111156145ec578182fd5b8201601f810184136145fc578182fd5b805161460a61415e82614cd2565b81815285602083850101111561461e578384fd5b61462f826020830160208601614d5b565b95945050505050565b600060208284031215614649578081fd5b5035919050565b600080600080600060608688031215614667578283fd5b8535945060208601356001600160401b03808211156141d2578485fd5b600080600060408486031215614698578081fd5b8335925060208401356001600160401b038111156142cc578182fd5b600080604083850312156146c6578182fd5b50508035926020909101359150565b6000815180845260208085019450808401835b8381101561470d5781516001600160a01b0316875295820195908201906001016146e8565b509495945050505050565b6000815180845260208085019450808401835b8381101561470d5781518752958201959082019060010161472b565b6000815180845261475f816020860160208601614d5b565b601f01601f19169290920160200192915050565b8054600090600181811c908083168061478d57607f831692505b60208084108214156147ad57634e487b7160e01b86526022600452602486fd5b8180156147c157600181146147d2576147ff565b60ff198616895284890196506147ff565b60008881526020902060005b868110156147f75781548b8201529085019083016147de565b505084890196505b50505050505092915050565b6000825161481d818460208701614d5b565b9190910192915050565b60006148338285614773565b8351614843818360208801614d5b565b01949350505050565b600061274861485b8386614773565b84614773565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061396090830184614747565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b818110156149125783516001600160a01b0316835292840192918401916001016148ed565b50909695505050505050565b6040808252810184905260008560608301825b8781101561496157823561494481614e4f565b6001600160a01b0316825260209283019290910190600101614931565b5083810360208501528481526001600160fb1b03851115614980578283fd5b8460051b9150818660208301370160200190815295945050505050565b60208152600061228660208301846146d5565b6040815260006149c360408301856146d5565b828103602084015261462f8185614718565b6020815260006122866020830184614718565b6020815260006122866020830184614747565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b602080825260159082015274115e1d195b9cda5bdb88189b1858dadb1a5cdd1959605a1b604082015260600190565b6020808252600d908201526c24b73b30b634b2103a37b5b2b760991b604082015260600190565b6020808252601c908201527f4d757374206265207265676973746572656420657874656e73696f6e00000000604082015260600190565b6020808252601190820152702737b732bc34b9ba32b73a103a37b5b2b760791b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252600d908201526c125b9d985b1a59081a5b9c1d5d609a1b604082015260600190565b602080825260179082015276496e76616c696420746f74616c20726f79616c7469657360481b604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b60208082526024908201527f41646d696e436f6e74726f6c3a204d757374206265206f776e6572206f7220616040820152633236b4b760e11b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6000808335601e19843603018112614c74578283fd5b8301803591506001600160401b03821115614c8d578283fd5b602001915036819003821315610c5557600080fd5b604051601f8201601f191681016001600160401b0381118282101715614cca57614cca614e39565b604052919050565b60006001600160401b03821115614ceb57614ceb614e39565b50601f01601f191660200190565b60008219821115614d0c57614d0c614e0d565b500190565b600082614d2057614d20614e23565b500490565b6000816000190483118215151615614d3f57614d3f614e0d565b500290565b600082821015614d5657614d56614e0d565b500390565b60005b83811015614d76578181015183820152602001614d5e565b83811115610dd55750506000910152565b600181811c90821680614d9b57607f821691505b602082108114156133d657634e487b7160e01b600052602260045260246000fd5b600061ffff80831681811415614dd457614dd4614e0d565b6001019392505050565b6000600019821415614df257614df2614e0d565b5060010190565b600082614e0857614e08614e23565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146107a257600080fd5b80151581146107a257600080fd5b6001600160e01b0319811681146107a257600080fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa26469706673582212202a9ebb57de25a6fc1ed6f1df2c763025961e9f466eeb890f9a61de18c922a0fa64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "approveAdmin(address)": {
        "details": "See {IAdminControl-approveAdmin}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "blacklistExtension(address)": {
        "details": "See {ICreatorCore-blacklistExtension}."
      },
      "burn(uint256)": {
        "details": "See {IERC721CreatorCore-burn}."
      },
      "getAdmins()": {
        "details": "See {IAdminControl-getAdmins}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getExtensions()": {
        "details": "See {ICreatorCore-getExtensions}."
      },
      "getFeeBps(uint256)": {
        "details": "{See ICreatorCore-getFeeBps}."
      },
      "getFeeRecipients(uint256)": {
        "details": "{See ICreatorCore-getFeeRecipients}."
      },
      "getFees(uint256)": {
        "details": "{See ICreatorCore-getFees}."
      },
      "getRoyalties(uint256)": {
        "details": "{See ICreatorCore-getRoyalties}."
      },
      "isAdmin(address)": {
        "details": "See {IAdminControl-isAdmin}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "mintBase(address)": {
        "details": "See {IERC721CreatorCore-mintBase}."
      },
      "mintBase(address,string)": {
        "details": "See {IERC721CreatorCore-mintBase}."
      },
      "mintBaseBatch(address,string[])": {
        "details": "See {IERC721CreatorCore-mintBaseBatch}."
      },
      "mintBaseBatch(address,uint16)": {
        "details": "See {IERC721CreatorCore-mintBaseBatch}."
      },
      "mintExtension(address)": {
        "details": "See {IERC721CreatorCore-mintExtension}."
      },
      "mintExtension(address,string)": {
        "details": "See {IERC721CreatorCore-mintExtension}."
      },
      "mintExtensionBatch(address,string[])": {
        "details": "See {IERC721CreatorCore-mintExtensionBatch}."
      },
      "mintExtensionBatch(address,uint16)": {
        "details": "See {IERC721CreatorCore-mintExtensionBatch}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "registerExtension(address,string)": {
        "details": "See {ICreatorCore-registerExtension}."
      },
      "registerExtension(address,string,bool)": {
        "details": "See {ICreatorCore-registerExtension}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "revokeAdmin(address)": {
        "details": "See {IAdminControl-revokeAdmin}."
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "{See ICreatorCore-royaltyInfo}."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setApproveTransferExtension(bool)": {
        "details": "See {ICreatorCore-setApproveTransferExtension}."
      },
      "setBaseTokenURI(string)": {
        "details": "See {ICreatorCore-setBaseTokenURI}."
      },
      "setBaseTokenURIExtension(string)": {
        "details": "See {ICreatorCore-setBaseTokenURIExtension}."
      },
      "setBaseTokenURIExtension(string,bool)": {
        "details": "See {ICreatorCore-setBaseTokenURIExtension}."
      },
      "setMintPermissions(address,address)": {
        "details": "See {ICreatorCore-setMintPermissions}."
      },
      "setRoyalties(address[],uint256[])": {
        "details": "See {ICreatorCore-setRoyalties}."
      },
      "setRoyalties(uint256,address[],uint256[])": {
        "details": "See {ICreatorCore-setRoyalties}."
      },
      "setRoyaltiesExtension(address,address[],uint256[])": {
        "details": "See {ICreatorCore-setRoyaltiesExtension}."
      },
      "setTokenURI(uint256,string)": {
        "details": "See {ICreatorCore-setTokenURI}."
      },
      "setTokenURI(uint256[],string[])": {
        "details": "See {ICreatorCore-setTokenURI}."
      },
      "setTokenURIExtension(uint256,string)": {
        "details": "See {ICreatorCore-setTokenURIExtension}."
      },
      "setTokenURIExtension(uint256[],string[])": {
        "details": "See {ICreatorCore-setTokenURIExtension}."
      },
      "setTokenURIPrefix(string)": {
        "details": "See {ICreatorCore-setTokenURIPrefix}."
      },
      "setTokenURIPrefixExtension(string)": {
        "details": "See {ICreatorCore-setTokenURIPrefixExtension}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenExtension(uint256)": {
        "details": "See {IERC721CreatorCore-tokenExtension}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unregisterExtension(address)": {
        "details": "See {ICreatorCore-unregisterExtension}."
      }
    },
    "title": "MFW wearables contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5481,
        "contract": "contracts/MFWUniques.sol:MFWUniques",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5588,
        "contract": "contracts/MFWUniques.sol:MFWUniques",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 4637,
        "contract": "contracts/MFWUniques.sol:MFWUniques",
        "label": "_admins",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(AddressSet)9227_storage"
      },
      {
        "astId": 7204,
        "contract": "contracts/MFWUniques.sol:MFWUniques",
        "label": "_name",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 7206,
        "contract": "contracts/MFWUniques.sol:MFWUniques",
        "label": "_symbol",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 7210,
        "contract": "contracts/MFWUniques.sol:MFWUniques",
        "label": "_owners",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 7214,
        "contract": "contracts/MFWUniques.sol:MFWUniques",
        "label": "_balances",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7218,
        "contract": "contracts/MFWUniques.sol:MFWUniques",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 7224,
        "contract": "contracts/MFWUniques.sol:MFWUniques",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2480,
        "contract": "contracts/MFWUniques.sol:MFWUniques",
        "label": "_tokenCount",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 2483,
        "contract": "contracts/MFWUniques.sol:MFWUniques",
        "label": "_extensions",
        "offset": 0,
        "slot": "11",
        "type": "t_struct(AddressSet)9227_storage"
      },
      {
        "astId": 2486,
        "contract": "contracts/MFWUniques.sol:MFWUniques",
        "label": "_blacklistedExtensions",
        "offset": 0,
        "slot": "13",
        "type": "t_struct(AddressSet)9227_storage"
      },
      {
        "astId": 2490,
        "contract": "contracts/MFWUniques.sol:MFWUniques",
        "label": "_extensionPermissions",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 2494,
        "contract": "contracts/MFWUniques.sol:MFWUniques",
        "label": "_extensionApproveTransfers",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2498,
        "contract": "contracts/MFWUniques.sol:MFWUniques",
        "label": "_tokensExtension",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2502,
        "contract": "contracts/MFWUniques.sol:MFWUniques",
        "label": "_extensionBaseURI",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_string_storage)"
      },
      {
        "astId": 2506,
        "contract": "contracts/MFWUniques.sol:MFWUniques",
        "label": "_extensionBaseURIIdentical",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2510,
        "contract": "contracts/MFWUniques.sol:MFWUniques",
        "label": "_extensionURIPrefix",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_string_storage)"
      },
      {
        "astId": 2514,
        "contract": "contracts/MFWUniques.sol:MFWUniques",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 2519,
        "contract": "contracts/MFWUniques.sol:MFWUniques",
        "label": "_extensionRoyaltyReceivers",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_address,t_array(t_address_payable)dyn_storage)"
      },
      {
        "astId": 2524,
        "contract": "contracts/MFWUniques.sol:MFWUniques",
        "label": "_extensionRoyaltyBPS",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 2529,
        "contract": "contracts/MFWUniques.sol:MFWUniques",
        "label": "_tokenRoyaltyReceivers",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_uint256,t_array(t_address_payable)dyn_storage)"
      },
      {
        "astId": 2534,
        "contract": "contracts/MFWUniques.sol:MFWUniques",
        "label": "_tokenRoyaltyBPS",
        "offset": 0,
        "slot": "25",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_address_payable)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address payable[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address_payable)dyn_storage"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_address_payable)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address payable[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address_payable)dyn_storage"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)9227_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 9226,
            "contract": "contracts/MFWUniques.sol:MFWUniques",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)8926_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)8926_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 8921,
            "contract": "contracts/MFWUniques.sol:MFWUniques",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 8925,
            "contract": "contracts/MFWUniques.sol:MFWUniques",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}